var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AddChannelComponent.html",[0,0.14,1,0.516]],["body/components/AddChannelComponent.html",[0,0.211,1,0.722,2,0.498,3,0.115,4,0.098,5,0.399,6,0.399,7,0.399,8,0.098,9,5.281,10,5.954,11,1.822,12,0.399,13,1.198,14,1.198,15,0.916,16,0.742,17,0.607,18,0.763,19,0.607,20,1.109,21,2.783,22,0.607,23,3.127,24,0.686,25,3.127,26,0.098,27,0.281,28,4.436,29,6.024,30,4.436,31,2.388,32,1.28,33,2.781,34,5.336,35,4.554,36,3.786,37,2.824,38,1,39,3.038,40,0.281,41,3.664,42,1.856,43,4.959,44,4.959,45,3.664,46,3.664,47,3.111,48,4.436,49,4.436,50,3.664,51,4.436,52,0.222,53,2.054,54,2.681,55,2.727,56,2.229,57,2.191,58,0.429,59,3.127,60,0.409,61,0.022,62,0.392,63,0.319,64,0.448,65,3.664,66,0.825,67,2.407,68,2.492,69,4.56,70,2.123,71,4.959,72,3.111,73,3.85,74,3.754,75,2.873,76,3.786,77,2.774,78,4.039,79,4.232,80,2.67,81,0.509,82,2.774,83,3.85,84,4.56,85,1.965,86,0.811,87,2.298,88,3.664,89,2.198,90,2.407,91,4.798,92,2.66,93,0.601,94,3.664,95,3.127,96,2.509,97,3.127,98,3.396,99,3.664,100,5.621,101,2.227,102,3.754,103,3.754,104,0.375,105,2.298,106,2.29,107,3.127,108,3.664,109,4.436,110,2.873,111,4.554,112,2.407,113,4.959,114,2.298,115,1.156,116,2.681,117,4.232,118,1.619,119,1.381,120,1.973,121,3.127,122,3.127,123,4.436,124,4.436,125,3.754,126,3.358,127,3.664,128,3.664,129,3.664,130,2.407,131,1.841,132,1.973,133,1.385,134,2.774,135,3.127,136,2.298,137,5.336,138,1.637,139,2.873,140,3.358,141,2.509,142,0.582,143,3.664,144,2.407,145,3.664,146,3.127,147,3.664,148,4.436,149,2.298,150,3.127,151,3.664,152,3.664,153,3.664,154,3.038,155,2.407,156,2.509,157,3.664,158,3.664,159,3.664,160,2.509,161,3.127,162,3.664,163,3.664,164,2.774,165,3.664,166,3.127,167,3.127,168,2.407,169,1.296,170,1.395,171,2.407,172,2.774,173,1.648,174,2.407,175,1.648,176,1.296,177,1.822,178,2.407,179,2.054,180,1.822,181,2.407,182,2.088,183,2.054,184,2.407,185,2.407,186,2.407,187,1.822,188,2.407,189,1.296,190,0.89,191,2.054,192,2.407,193,1.822,194,2.407,195,1.296,196,2.407,197,1.001,198,1.724,199,3.664,200,1.648,201,2.407,202,2.407,203,2.407,204,2.407,205,2.407,206,0.874,207,0.764,208,2.054,209,2.054,210,3.111,211,2.054,212,2.054,213,2.054,214,2.054,215,2.054,216,2.054,217,2.407,218,3.092,219,0.344,220,0.537,221,0.203,222,0.89,223,1.063,224,1.209,225,1.296,226,0.533,227,1.822,228,2.407,229,0.89,230,0.841,231,1.296,232,0.098,233,0.036,234,1.648,235,2.509,236,2.407,237,1.822,238,2.407,239,1.523,240,2.407,241,2.123,242,2.054,243,2.407,244,3.664,245,2.407,246,1.822,247,2.407,248,2.774,249,2.407,250,2.229,251,1.395,252,2.407,253,2.054,254,0.446,255,0.607,256,2.407,257,2.054,258,2.407,259,2.407,260,0.818,261,2.407,262,2.407,263,2.407,264,1.209,265,3.664,266,2.407,267,2.407,268,1.133,269,2.407,270,4.039,271,5.336,272,2.407,273,1.209,274,1.822,275,1.648,276,1.51,277,2.407,278,2.407,279,1.648,280,3.664,281,3.127,282,3.664,283,3.127,284,3.664,285,3.664,286,3.664,287,2.298,288,3.664,289,4.232,290,3.664,291,2.774,292,3.664,293,3.127,294,3.664,295,2.873,296,2.774,297,3.664,298,2.774,299,3.664,300,3.664,301,3.664,302,2.123,303,3.127,304,2.509,305,3.664,306,3.127,307,2.774,308,2.774,309,0.399,310,0.607,311,0.607,312,0.399,313,0.822,314,0.399,315,0.607,316,0.35,317,0.374,318,0.607,319,0.35,320,0.607,321,0.35,322,0.399,323,0.374,324,0.607,325,0.35,326,0.399,327,0.35,328,0.735,329,0.35,330,0.399,331,0.35,332,0.374,333,0.35,334,0.327,335,0.399,336,0.374,337,0.498,338,0.374,339,0.222,340,0.35,341,0.399,342,0.35,343,0.399,344,0.35,345,0.399,346,0.35,347,0.399,348,0.35,349,0.399,350,0.35,351,0.374,352,0.399,353,0.35,354,0.374,355,0.399,356,0.35,357,0.374,358,0.399,359,0.35,360,0.399,361,0.374,362,0.646,363,0.399,364,0.35,365,0.399,366,0.35,367,0.399,368,0.374,369,0.399,370,0.35,371,0.399,372,0.35,373,0.399,374,0.399,375,0.35,376,0.399,377,0.35,378,0.374,379,0.374,380,0.374,381,0.399,382,0.374,383,0.399,384,0.35,385,0.399,386,0.374,387,0.374,388,0.283,389,0.35,390,0.327,391,0.399,392,0.399,393,0.011,394,0.011]],["title/components/AddImgToMessageComponent.html",[0,0.14,316,0.516]],["body/components/AddImgToMessageComponent.html",[0,0.226,1,0.55,2,0.689,3,0.18,4,0.154,5,0.626,6,0.626,7,0.626,8,0.294,12,0.626,13,1.235,14,1.235,15,0.989,16,0.64,17,0.839,18,0.642,19,0.839,22,0.839,24,0.949,26,0.154,27,0.389,40,0.389,52,0.528,58,0.405,60,0.29,61,0.022,62,0.312,63,0.291,64,0.29,66,0.445,70,2.934,81,0.389,86,0.479,93,0.428,104,0.482,105,3.827,115,1.07,136,3.177,142,0.552,195,2.726,206,0.587,207,0.777,219,0.277,221,0.319,226,0.55,232,0.154,233,0.057,254,0.38,255,0.946,309,0.626,310,0.839,311,1.085,312,0.626,313,1.011,314,0.626,315,0.839,316,0.888,317,1.137,318,0.839,319,0.55,320,0.839,321,0.55,322,0.626,323,0.587,324,0.839,325,0.55,326,0.626,327,0.55,328,0.946,329,0.55,330,0.626,331,0.55,332,0.587,333,0.55,334,0.514,335,0.626,336,0.587,337,0.689,338,0.587,339,0.349,340,0.55,341,0.626,342,0.55,343,0.626,344,0.55,345,0.626,346,0.55,347,0.626,348,0.55,349,0.626,350,0.55,351,0.587,352,0.626,353,0.55,354,0.587,355,0.626,356,0.55,357,0.587,358,0.626,359,0.55,360,0.626,361,0.587,362,0.831,363,0.626,364,0.55,365,0.626,366,0.55,367,0.626,368,0.587,369,0.626,370,0.55,371,0.626,372,0.55,373,0.626,374,0.626,375,0.55,376,0.626,377,0.55,378,0.587,379,0.587,380,0.587,381,0.626,382,0.587,383,0.626,384,0.55,385,0.626,386,0.587,387,0.587,388,0.445,389,0.55,390,0.514,391,0.626,392,0.626,393,0.015,394,0.015,395,5.707,396,5.707,397,3.226,398,3.309,399,3.309,400,5.064,401,5.064,402,5.711,403,4.815,404,5.064,405,6.1,406,2.726,407,6.687,408,5.064,409,5.064,410,3.78,411,5.064,412,3.78,413,2.544,414,2.825,415,2.335,416,4.322,417,3.177,418,3.658,419,3.833,420,2.87,421,5.064,422,3.177,423,5.064,424,3.833,425,2.934,426,3.78,427,3.468,428,4.322,429,4.323,430,1.67,431,5.064,432,3.78,433,3.424,434,2.861,435,2.035,436,3.78,437,3.226,438,4.322,439,3.78,440,3.78,441,3.78,442,3.78,443,3.78,444,3.226,445,3.78,446,5.064,447,3.78,448,3.78,449,3.78,450,3.226,451,4.322,452,3.78]],["title/components/AddUsersComponent.html",[0,0.14,319,0.516]],["body/components/AddUsersComponent.html",[0,0.18,1,0.365,2,0.514,3,0.12,4,0.102,5,0.416,6,0.416,7,0.416,8,0.102,9,5.239,12,0.416,13,1.202,14,1.202,15,0.831,16,0.666,17,0.627,18,0.479,19,0.627,20,1.138,21,2.855,22,0.627,24,0.709,26,0.102,27,0.29,32,2.181,33,2.402,37,3.066,38,0.709,40,0.29,52,0.35,54,2.731,55,2.955,58,0.426,60,0.455,61,0.022,62,0.362,63,0.328,64,0.455,66,0.843,68,1.9,70,2.935,73,3.47,75,1.454,81,0.508,86,0.724,89,1.321,92,2.722,93,0.615,101,1.399,104,0.212,105,2.373,106,1.783,110,3.659,115,0.709,116,1.9,119,1.401,132,3.075,139,2.036,142,0.623,169,2.036,172,3.835,173,2.59,175,2.59,177,3.835,179,3.228,182,1.78,190,1.399,193,2.863,195,2.036,198,1.78,200,2.59,206,0.787,207,0.865,219,0.374,220,0.56,221,0.212,222,0.928,223,1.109,224,1.261,225,1.351,226,0.365,229,0.928,230,0.877,232,0.102,233,0.038,241,4.064,248,1.9,250,1.261,254,0.614,255,0.982,260,1.213,273,1.261,309,0.416,310,0.627,311,0.839,312,0.416,313,0.839,314,0.416,315,0.627,316,0.365,317,0.39,318,0.627,319,0.737,320,0.627,321,0.365,322,0.416,323,0.39,324,0.627,325,0.365,326,0.416,327,0.365,328,0.754,329,0.365,330,0.416,331,0.365,332,0.39,333,0.365,334,0.341,335,0.416,336,0.39,337,0.514,338,0.39,339,0.232,340,0.365,341,0.416,342,0.365,343,0.416,344,0.365,345,0.416,346,0.365,347,0.416,348,0.365,349,0.416,350,0.365,351,0.39,352,0.416,353,0.365,354,0.39,355,0.416,356,0.365,357,0.39,358,0.416,359,0.365,360,0.416,361,0.39,362,0.662,363,0.416,364,0.365,365,0.416,366,0.365,367,0.416,368,0.39,369,0.416,370,0.365,371,0.416,372,0.365,373,0.416,374,0.416,375,0.365,376,0.416,377,0.365,378,0.39,379,0.39,380,0.39,381,0.416,382,0.39,383,0.416,384,0.365,385,0.416,386,0.39,387,0.39,388,0.296,389,0.365,390,0.341,391,0.416,392,0.416,393,0.011,394,0.011,398,2.935,399,2.637,414,2.537,415,1.995,417,4.108,420,1.78,422,2.373,427,2.59,430,1.109,435,1.351,453,5.239,454,2.142,455,3.884,456,2.142,457,2.142,458,3.884,459,3.884,460,3.445,461,2.45,462,3.445,463,3.782,464,3.782,465,5.06,466,4.114,467,3.445,468,4.639,469,4.639,470,3.884,471,4.876,472,2.863,473,3.228,474,3.228,475,3.228,476,3.228,477,3.47,478,3.228,479,2.142,480,3.075,481,2.637,482,3.47,483,2.287,484,3.782,485,2.51,486,2.727,487,4.179,488,3.782,489,2.287,490,3.47,491,2.863,492,2.51,493,3.228,494,3.228,495,2.59,496,2.191,497,4.324,498,3.835,499,2.191,500,3.149,501,3.228,502,2.51,503,3.47,504,3.47,505,2.863,506,4.324,507,4.324,508,2.51,509,4.876,510,3.228,511,3.884,512,2.51,513,3.686,514,2.373,515,2.59,516,2.935,517,3.228,518,3.228,519,3.228,520,2.51,521,2.51,522,3.228,523,2.863,524,2.191,525,3.228,526,3.782,527,3.228,528,2.51,529,3.228,530,2.191,531,2.863,532,2.373,533,2.373,534,2.51,535,2.51,536,2.51,537,2.51,538,2.51,539,2.51,540,2.51,541,3.445,542,2.51,543,1.575,544,1.575,545,2.142,546,1.9,547,2.863,548,2.142,549,2.142,550,1.9,551,1.9,552,1.181,553,2.142,554,1.719,555,1.575,556,1.261,557,1.9,558,2.142,559,1.575,560,2.142,561,2.142,562,1.9,563,2.142,564,1.9,565,1.9,566,1.9,567,1.9,568,2.142,569,1.9,570,2.51,571,2.142,572,2.142,573,2.142,574,2.142,575,3.228,576,2.142,577,2.142,578,2.142,579,2.142,580,2.142,581,2.142,582,2.142,583,2.142,584,2.142,585,2.142,586,2.142,587,2.142,588,2.51,589,1.454,590,1.9,591,2.142,592,3.445,593,2.142,594,2.142,595,2.142,596,2.142,597,2.142,598,3.228,599,2.863,600,2.855,601,2.142,602,2.142,603,2.142,604,2.142,605,2.142,606,2.142,607,1.719,608,1.719,609,2.142,610,2.26,611,2.142,612,2.142,613,3.228,614,3.782,615,3.782]],["title/components/AppComponent.html",[0,0.14,321,0.516]],["body/components/AppComponent.html",[0,0.248,1,0.669,2,0.782,3,0.219,4,0.188,5,0.762,6,0.762,7,0.762,8,0.188,12,0.762,13,1.248,14,1.248,15,0.837,16,0.681,17,0.953,18,0.729,19,0.953,22,0.953,24,1.077,26,0.188,27,0.441,58,0.284,61,0.022,62,0.314,63,0.219,66,0.542,78,4.749,93,0.486,104,0.389,206,0.715,207,0.625,219,0.314,221,0.389,226,0.669,232,0.188,233,0.069,309,0.762,310,0.953,311,0.953,312,0.762,313,1.089,314,0.762,315,0.953,316,0.669,317,0.715,318,0.953,319,0.669,320,0.953,321,0.957,322,0.762,323,0.715,324,0.953,325,0.669,326,0.762,327,0.669,328,1.04,329,0.669,330,0.762,331,0.669,332,0.715,333,0.669,334,0.625,335,0.762,336,0.715,337,0.782,338,0.715,339,0.425,340,0.669,341,0.762,342,0.669,343,0.762,344,0.669,345,0.762,346,0.669,347,0.762,348,0.669,349,0.762,350,0.669,351,0.715,352,0.762,353,0.669,354,0.715,355,0.762,356,0.669,357,0.715,358,0.762,359,0.669,360,0.762,361,0.715,362,0.913,363,0.762,364,0.669,365,0.762,366,0.669,367,0.762,368,0.715,369,0.762,370,0.669,371,0.762,372,0.669,373,0.762,374,0.762,375,0.669,376,0.762,377,0.669,378,0.715,379,0.715,380,0.715,381,0.762,382,0.715,383,0.762,384,0.669,385,0.762,386,0.715,387,0.715,388,0.542,389,0.669,390,0.625,391,0.762,392,0.762,393,0.017,394,0.017,616,3.926,617,2.706,618,5.355,619,5.751,620,5.751,621,3.939,622,4.6,623,1.216]],["title/classes/Channel.html",[16,0.357,233,0.053]],["body/classes/Channel.html",[3,0.204,4,0.175,8,0.175,15,0.801,16,0.744,26,0.248,27,0.422,40,0.422,52,0.396,58,0.436,60,0.466,61,0.022,62,0.332,63,0.339,64,0.466,66,0.869,78,5.218,81,0.492,86,0.907,92,2.287,93,0.625,115,1.031,119,1.514,133,2,138,2.115,139,2.309,142,0.699,189,3.759,190,1.586,219,0.234,232,0.175,233,0.064,254,0.703,255,0.711,260,0.957,273,3.406,274,5.131,393,0.016,394,0.016,420,2.589,483,2.764,486,2.962,489,3.464,624,2.485,625,3.66,626,3.451,627,4.695,628,5.501,629,5.501,630,4.019,631,3.451,632,5.501,633,3.187,634,4.288,635,4.288,636,4.288,637,4.288,638,5.501,639,4.288,640,5.501,641,4.288,642,4.695,643,4.288,644,3.187,645,4.019,646,3.187,647,3.66,648,4.695,649,5.501,650,4.695,651,5.501,652,5.501,653,4.695,654,5.501,655,4.695,656,5.501,657,5.501,658,4.288,659,4.288,660,4.288,661,2.034,662,4.288]],["title/components/ChannelMembersComponent.html",[0,0.14,226,0.516]],["body/components/ChannelMembersComponent.html",[0,0.168,1,0.327,2,0.473,3,0.107,4,0.092,5,0.372,6,0.372,7,0.372,8,0.092,12,0.372,13,1.191,14,1.191,15,0.506,16,0.689,17,0.576,18,0.441,19,0.576,20,1.063,21,2.667,22,0.576,24,0.651,26,0.211,27,0.267,32,2.113,33,2.52,37,3.375,38,0.651,40,0.267,42,1.708,52,0.321,54,2.6,55,2.891,58,0.425,60,0.438,61,0.022,62,0.354,63,0.324,64,0.438,66,0.838,68,1.747,70,2.772,73,3.277,75,2.015,81,0.511,86,0.693,92,2.655,93,0.61,95,2.967,101,1.286,104,0.19,105,2.181,106,1.666,110,3.588,115,0.797,116,2.961,119,1.348,132,2.945,139,2.576,142,0.564,169,1.872,172,2.632,173,2.381,175,3.277,177,3.622,182,1.636,190,1.286,195,1.872,197,1.446,198,1.636,200,2.381,206,0.804,207,0.855,219,0.364,220,0.502,221,0.19,222,0.831,223,0.993,224,1.13,226,0.696,227,5.232,229,0.831,230,0.785,232,0.092,233,0.034,239,0.935,241,4.038,248,1.702,250,1.13,254,0.593,255,1.058,260,1.316,264,1.13,268,1.058,273,1.13,274,1.702,307,2.632,308,2.632,309,0.372,310,0.576,311,0.793,312,0.372,313,0.793,314,0.372,315,0.576,316,0.327,317,0.349,318,0.576,319,0.327,320,0.576,321,0.327,322,0.372,323,0.349,324,0.576,325,0.327,326,0.372,327,0.327,328,0.704,329,0.327,330,0.372,331,0.327,332,0.349,333,0.327,334,0.306,335,0.372,336,0.349,337,0.473,338,0.349,339,0.208,340,0.327,341,0.372,342,0.327,343,0.372,344,0.327,345,0.372,346,0.327,347,0.372,348,0.327,349,0.372,350,0.327,351,0.349,352,0.372,353,0.327,354,0.349,355,0.372,356,0.327,357,0.349,358,0.372,359,0.327,360,0.372,361,0.349,362,0.619,363,0.372,364,0.327,365,0.372,366,0.327,367,0.372,368,0.349,369,0.372,370,0.327,371,0.372,372,0.327,373,0.372,374,0.372,375,0.327,376,0.372,377,0.327,378,0.349,379,0.349,380,0.349,381,0.372,382,0.349,383,0.372,384,0.327,385,0.372,386,0.349,387,0.349,388,0.265,389,0.327,390,0.306,391,0.372,392,0.372,393,0.01,394,0.01,398,2.772,399,2.463,413,1.747,414,2.45,415,1.911,417,4.181,420,1.636,422,2.181,427,2.381,430,0.993,435,1.21,455,3.629,456,2.001,457,2.001,458,3.629,459,3.629,460,3.218,461,2.289,462,3.218,465,4.869,466,4.318,467,3.218,468,4.416,469,4.869,470,3.629,471,4.084,472,2.632,473,2.967,474,2.967,475,2.967,476,2.967,477,3.277,478,2.967,479,1.919,480,2.945,481,2.463,482,3.277,483,2.136,486,2.945,487,4.632,489,1.747,490,3.277,491,2.632,493,2.967,494,2.967,495,2.381,496,2.015,497,4.084,498,3.622,499,2.015,500,2.998,501,2.967,503,3.277,504,3.277,505,2.632,506,4.084,507,4.084,509,4.669,510,2.967,511,3.629,513,3.58,514,2.181,515,2.381,516,2.772,517,2.967,518,2.967,519,2.967,525,4.084,527,2.967,529,2.967,530,2.015,531,2.632,532,2.181,533,2.181,541,3.218,543,1.41,544,1.41,545,1.919,546,1.702,547,2.632,548,1.919,549,1.919,550,1.702,551,1.702,552,1.058,553,1.919,554,1.54,555,1.41,556,1.13,557,1.702,558,1.919,560,1.919,561,1.919,562,1.702,563,1.919,564,1.702,565,1.702,566,1.702,567,1.702,568,1.919,569,1.702,571,1.919,572,2.967,573,2.967,574,2.967,575,3.629,576,2.967,577,1.919,578,2.967,579,1.919,580,2.967,581,2.967,582,2.967,583,1.919,584,2.967,585,1.919,586,1.919,587,1.919,589,1.302,590,1.702,591,1.919,592,4.318,594,1.919,595,1.919,596,1.919,597,1.919,598,2.967,599,2.632,600,2.667,601,1.919,602,1.919,603,1.919,604,1.919,605,1.919,606,1.919,607,1.54,608,1.54,609,1.919,610,2.515,611,1.919,612,1.919,613,4.084,663,5.899,664,1.919,665,3.477,666,3.477,667,6.291,668,4.785,669,3.477,670,2.248,671,2.248,672,2.248,673,2.248,674,2.248,675,2.248,676,2.248,677,4.084,678,4.785,679,2.6,680,2.015,681,3.477,682,2.248,683,2.248,684,2.632,685,3.477,686,2.381,687,3.477,688,3.477,689,2.967,690,2.381,691,2.181,692,2.248,693,2.248,694,2.248,695,2.248,696,2.248,697,2.248,698,2.248,699,2.248,700,2.248,701,2.248,702,1.919,703,2.248,704,2.248,705,2.248,706,2.248,707,2.248,708,2.248,709,2.248,710,2.248,711,2.248,712,2.248,713,2.248,714,2.248,715,2.248,716,2.248,717,2.248,718,2.248,719,1.702,720,3.477,721,2.248,722,1.702,723,3.477,724,2.967,725,2.632,726,2.967,727,3.477,728,3.277,729,3.477,730,4.785,731,3.477,732,3.477]],["title/components/ChannelParticipantsComponent.html",[0,0.14,325,0.516]],["body/components/ChannelParticipantsComponent.html",[0,0.231,1,0.435,2,0.585,3,0.142,4,0.122,5,0.495,6,0.495,7,0.495,8,0.122,12,0.495,13,1.218,14,1.218,15,0.802,16,0.728,17,0.712,18,0.638,19,0.712,20,1.259,22,0.712,24,0.806,26,0.206,27,0.467,31,2.712,32,2.04,33,2.93,37,2.934,38,0.944,40,0.33,52,0.276,53,2.55,54,2.934,55,2.93,58,0.432,60,0.423,61,0.022,62,0.332,63,0.32,64,0.423,66,0.649,69,3.255,80,2.967,81,0.501,85,0.933,86,0.638,92,2.291,93,0.583,101,2.675,103,3.255,104,0.252,105,2.698,115,1.032,119,1.302,131,2.161,132,3.652,133,1.721,134,3.255,142,0.684,169,2.967,170,2.492,176,2.967,189,3.614,190,2.038,218,3.384,219,0.35,220,0.667,221,0.252,223,1.32,224,1.501,225,1.608,226,0.435,230,1.044,232,0.122,233,0.045,234,2.046,254,0.555,260,1.125,273,1.501,275,2.046,309,0.495,310,0.712,311,0.712,312,0.495,313,0.913,314,0.495,315,0.712,316,0.435,317,0.464,318,0.712,319,0.626,320,0.712,321,0.435,322,0.495,323,0.464,324,0.712,325,0.802,326,0.495,327,0.435,328,0.835,329,0.435,330,0.495,331,0.435,332,0.464,333,0.435,334,0.406,335,0.495,336,0.464,337,0.585,338,0.464,339,0.276,340,0.435,341,0.495,342,0.435,343,0.495,344,0.435,345,0.495,346,0.435,347,0.495,348,0.435,349,0.495,350,0.435,351,0.464,352,0.495,353,0.435,354,0.464,355,0.495,356,0.435,357,0.464,358,0.495,359,0.435,360,0.495,361,0.464,362,0.912,363,0.495,364,0.435,365,0.495,366,0.435,367,0.495,368,0.464,369,0.495,370,0.435,371,0.495,372,0.435,373,0.495,374,0.495,375,0.435,376,0.495,377,0.435,378,0.464,379,0.464,380,0.464,381,0.495,382,0.464,383,0.495,384,0.435,385,0.495,386,0.464,387,0.464,388,0.352,389,0.626,390,0.406,391,0.495,392,0.495,393,0.013,394,0.013,406,2.315,414,2.666,420,2.593,422,2.698,424,3.255,453,2.262,486,2.315,489,3.466,559,3.457,592,3.255,642,3.67,661,1.105,724,3.67,728,2.945,733,4.405,734,4.81,735,5.994,736,2.55,737,4.3,738,4.3,739,6.267,740,5.038,741,5.511,742,5.511,743,3.67,744,2.769,745,5.511,746,3.67,747,5.511,748,4.3,749,2.988,750,2.988,751,2.988,752,2.988,753,2.988,754,3.255,755,3.67,756,4.3,757,3.67,758,2.988,759,2.698,760,1.788,761,3.67,762,4.3,763,4.3,764,4.3,765,4.3,766,3.67,767,4.984,768,2.988,769,3.67,770,3.193,771,3.67,772,3.255,773,2.698,774,3.255,775,2.988,776,2.988,777,3.67,778,3.67,779,2.988,780,2.988,781,4.3,782,4.42,783,2.988,784,5.511,785,2.988,786,2.988,787,4.3,788,2.262,789,1.874,790,2.262,791,2.988,792,2.988,793,4.3,794,4.3,795,2.988,796,2.55,797,2.988,798,2.988,799,4.3,800,2.988,801,2.988,802,2.988,803,2.046,804,2.988,805,4.3,806,2.988,807,2.988,808,2.988,809,2.988,810,2.988,811,2.262,812,2.988,813,2.55,814,2.55,815,4.3,816,2.945,817,4.3,818,4.3,819,4.3,820,4.3]],["title/components/ChannelThreadComponent.html",[0,0.14,327,0.516]],["body/components/ChannelThreadComponent.html",[0,0.217,1,0.374,2,0.524,3,0.123,4,0.105,5,0.426,6,0.426,7,0.426,8,0.105,12,0.426,13,1.204,14,1.204,15,0.561,16,0.662,17,0.638,18,0.797,19,0.638,20,1.154,22,0.638,24,0.722,26,0.105,27,0.296,32,2.299,33,2.547,40,0.296,42,1.903,52,0.356,54,2.76,55,2.871,58,0.437,60,0.442,61,0.022,62,0.336,63,0.329,64,0.442,66,0.679,68,1.935,81,0.505,85,2.115,86,0.326,89,2.195,93,0.556,101,1.424,104,0.556,106,1.81,118,1.702,119,1.362,120,2.132,138,1.272,141,4.21,142,0.629,183,2.195,189,2.486,206,0.797,207,0.697,219,0.367,220,0.574,221,0.217,223,1.136,224,1.292,226,0.374,229,0.951,232,0.105,233,0.039,239,1.069,251,1.49,254,0.633,255,0.638,260,0.86,264,1.292,268,1.21,295,2.232,309,0.426,310,0.638,311,0.638,312,0.426,313,0.85,314,0.426,315,0.638,316,0.374,317,1.01,318,0.638,319,0.374,320,0.638,321,0.374,322,0.426,323,0.896,324,0.638,325,0.374,326,0.426,327,0.839,328,0.765,329,0.561,330,0.426,331,0.374,332,1.01,333,0.746,334,0.524,335,0.426,336,0.4,337,0.697,338,0.4,339,0.671,340,0.374,341,0.426,342,0.374,343,0.426,344,0.374,345,0.426,346,0.374,347,0.426,348,0.839,349,0.426,350,0.374,351,0.4,352,0.426,353,0.374,354,0.4,355,0.426,356,0.374,357,0.4,358,0.426,359,0.374,360,0.426,361,0.4,362,0.799,363,0.426,364,0.374,365,0.426,366,0.374,367,0.426,368,0.4,369,0.426,370,0.374,371,0.426,372,0.374,373,0.426,374,0.426,375,0.374,376,0.426,377,0.374,378,0.718,379,0.4,380,0.4,381,0.426,382,0.4,383,0.426,384,0.374,385,0.426,386,0.4,387,0.4,388,0.303,389,0.561,390,0.35,391,0.426,392,0.426,393,0.011,394,0.011,399,2.676,403,3.496,406,2.074,414,1.601,429,3.496,430,1.702,434,1.947,435,1.384,451,3.287,477,2.638,610,1.92,661,2.434,733,4.444,734,4.852,744,2.577,746,3.287,778,3.287,782,2.916,788,1.947,789,1.613,790,1.947,803,1.761,811,1.947,821,6.047,822,2.195,823,3.852,824,3.852,825,5.492,826,4.618,827,4.618,828,4.618,829,4.618,830,4.618,831,3.765,832,4.618,833,5.128,834,3.852,835,5.128,836,3.852,837,5.128,838,5.765,839,3.287,840,3.852,841,2.572,842,3.852,843,4.618,844,3.941,845,4.618,846,3.941,847,2.572,848,2.572,849,3.852,850,2.572,851,2.971,852,3.852,853,2.572,854,3.852,855,2.572,856,2.916,857,5.128,858,5.492,859,2.572,860,4.377,861,5.128,862,5.128,863,3.882,864,2.572,865,3.882,866,2.572,867,3.852,868,2.572,869,3.852,870,2.572,871,2.638,872,2.074,873,2.676,874,3.852,875,2.572,876,2.638,877,2.572,878,2.572,879,2.572,880,2.572,881,2.572,882,2.572,883,2.572,884,2.572,885,3.852,886,2.572,887,2.572,888,2.572,889,1.761,890,1.947,891,2.572,892,2.195,893,1.947,894,2.572,895,2.572,896,1.947,897,1.761,898,2.416,899,1.761,900,1.761,901,2.572,902,2.572,903,2.572,904,2.572,905,3.852,906,2.572,907,2.195,908,3.852,909,2.572,910,2.572,911,2.572,912,2.572,913,2.572,914,2.572,915,1.761,916,4.618,917,3.852,918,2.572,919,2.572,920,2.572,921,1.761,922,1.761,923,1.947,924,2.572,925,1.384,926,2.572,927,2.195,928,1.613,929,2.572,930,3.852,931,3.852,932,5.128,933,3.852,934,4.377,935,2.916,936,2.916,937,3.852,938,3.852,939,3.852,940,5.128,941,3.852,942,3.852,943,3.852,944,3.852,945,3.852,946,5.128,947,3.852,948,3.287,949,5.765,950,3.852,951,3.852,952,3.852,953,3.852]],["title/components/DashboardComponent.html",[0,0.14,329,0.516]],["body/components/DashboardComponent.html",[0,0.237,1,0.607,2,0.735,3,0.199,4,0.17,5,0.691,6,0.691,7,0.691,8,0.17,12,0.691,13,1.242,14,1.242,15,0.787,16,0.677,17,0.896,18,0.685,19,0.896,20,1.499,22,0.896,24,1.013,26,0.17,27,0.415,32,1.888,52,0.554,58,0.371,60,0.32,61,0.022,62,0.328,63,0.286,64,0.32,85,1.688,86,0.529,89,1.888,93,0.506,104,0.353,120,2.429,206,0.649,207,0.568,219,0.383,220,0.932,221,0.353,226,0.607,232,0.17,233,0.063,234,2.858,254,0.42,309,0.691,310,0.896,311,0.896,312,0.691,313,1.051,314,0.691,315,0.896,316,0.607,317,0.649,318,0.896,319,0.607,320,0.896,321,0.607,322,0.691,323,0.986,324,0.896,325,0.607,326,0.691,327,0.607,328,0.993,329,0.923,330,0.691,331,0.607,332,0.649,333,0.607,334,0.568,335,0.691,336,0.986,337,0.815,338,0.649,339,0.622,340,0.923,341,0.691,342,0.607,343,0.691,344,0.607,345,0.691,346,0.607,347,0.691,348,0.607,349,0.691,350,0.607,351,0.649,352,0.691,353,0.607,354,0.649,355,0.691,356,0.607,357,0.649,358,0.691,359,0.607,360,0.691,361,0.649,362,0.873,363,0.691,364,0.607,365,0.691,366,0.607,367,0.691,368,0.649,369,0.691,370,0.607,371,0.691,372,0.607,373,0.691,374,0.691,375,0.607,376,0.691,377,0.607,378,0.649,379,0.649,380,0.649,381,0.691,382,0.986,383,0.691,384,0.607,385,0.691,386,0.986,387,0.649,388,0.491,389,0.607,390,0.568,391,0.691,392,0.691,393,0.016,394,0.016,500,3.132,618,5.117,623,1.103,734,2.858,759,3.391,831,4.13,839,5.117,892,4.613,896,3.159,954,3.562,955,3.702,956,5.405,957,5.405,958,4.173,959,5.405,960,4.092,961,5.117,962,5.117,963,4.173,964,3.562,965,4.173,966,4.173,967,3.562,968,4.173,969,4.173,970,4.173,971,4.173]],["title/components/EditChannelComponent.html",[0,0.14,331,0.516]],["body/components/EditChannelComponent.html",[0,0.206,1,0.333,2,0.479,3,0.109,4,0.093,5,0.379,6,0.379,7,0.379,8,0.093,11,1.73,12,0.379,13,1.193,14,1.193,15,0.513,16,0.736,17,0.584,18,0.787,19,0.584,20,1.074,21,2.695,22,0.584,23,3.006,24,0.66,25,3.006,26,0.093,27,0.423,31,2.313,32,1.23,35,4.701,40,0.27,52,0.211,55,2.686,58,0.437,59,1.951,60,0.37,61,0.022,62,0.384,63,0.323,64,0.37,66,0.744,68,1.77,72,2.209,77,2.666,81,0.504,83,2.412,84,3.654,85,2.142,86,0.823,89,2.335,92,1.464,93,0.534,101,2.537,104,0.193,115,0.904,116,2.425,117,4.12,119,1.141,120,1.302,121,3.006,131,3.408,133,1.1,141,3.306,142,0.699,146,4.701,150,3.006,154,2.412,190,1.302,191,5.298,195,1.896,197,2.007,198,2.271,206,0.921,207,0.909,208,1.951,209,1.951,211,1.951,212,1.951,213,1.951,214,1.951,215,1.951,216,1.951,219,0.339,220,0.51,221,0.193,222,0.845,224,1.148,225,1.231,226,0.333,229,0.845,232,0.093,233,0.034,234,1.565,254,0.432,255,0.913,260,0.51,273,2.62,275,1.565,295,3.021,302,2.797,304,2.412,306,4.12,309,0.379,310,0.584,311,0.913,312,0.379,313,0.8,314,0.379,315,0.584,316,0.333,317,0.355,318,0.584,319,0.333,320,0.584,321,0.333,322,0.379,323,0.355,324,0.584,325,0.333,326,0.379,327,0.333,328,0.712,329,0.333,330,0.379,331,0.703,332,0.945,333,0.333,334,0.311,335,0.379,336,0.355,337,0.479,338,0.355,339,0.211,340,0.333,341,0.379,342,0.333,343,0.379,344,0.333,345,0.379,346,0.333,347,0.379,348,0.333,349,0.379,350,0.333,351,0.355,352,0.379,353,0.333,354,0.355,355,0.379,356,0.333,357,0.355,358,0.379,359,0.333,360,0.379,361,0.355,362,0.625,363,0.379,364,0.333,365,0.379,366,0.333,367,0.379,368,0.355,369,0.379,370,0.333,371,0.379,372,0.333,373,0.379,374,0.379,375,0.333,376,0.379,377,0.333,378,0.355,379,0.355,380,0.355,381,0.379,382,0.355,383,0.379,384,0.333,385,0.379,386,0.355,387,0.355,388,0.269,389,0.333,390,0.311,391,0.379,392,0.379,393,0.01,394,0.01,398,3.597,406,1.896,414,2.893,415,2.439,420,1.657,435,1.231,477,2.412,487,2.412,489,1.77,496,2.041,504,2.412,513,3.191,554,1.565,555,1.434,559,2.695,607,2.412,608,2.412,623,0.604,684,2.666,690,2.412,725,3.654,726,3.006,733,4.45,743,3.006,744,2.425,754,2.666,760,2.007,766,3.006,767,4.45,769,3.006,770,3.191,771,3.006,772,2.666,773,2.209,774,2.666,777,4.12,782,2.666,796,1.951,803,1.565,813,1.951,814,1.951,935,3.654,948,4.12,972,6.054,973,6.054,974,4.296,975,4.296,976,2.695,977,2.943,978,5.739,979,5.214,980,5.214,981,5.508,982,5.508,983,5.508,984,6.208,985,6.208,986,4.827,987,4.827,988,4.827,989,4.827,990,4.827,991,4.827,992,4.12,993,4.296,994,4.296,995,4.296,996,4.296,997,1.73,998,2.286,999,2.286,1000,3.522,1001,4.827,1002,4.827,1003,2.286,1004,3.522,1005,2.209,1006,2.286,1007,3.522,1008,3.006,1009,2.286,1010,3.654,1011,4.827,1012,2.133,1013,4.701,1014,4.827,1015,2.286,1016,2.286,1017,4.296,1018,4.296,1019,2.286,1020,3.006,1021,3.006,1022,3.006,1023,2.286,1024,2.286,1025,2.286,1026,3.522,1027,3.271,1028,5.925,1029,3.522,1030,4.296,1031,2.666,1032,3.522,1033,1.896,1034,3.522,1035,3.006,1036,3.522,1037,3.772,1038,3.522,1039,3.522,1040,3.522,1041,3.006,1042,2.286,1043,5.214,1044,3.522,1045,2.286,1046,5.925,1047,2.797,1048,3.522,1049,2.286,1050,2.286,1051,2.286,1052,2.286,1053,2.286,1054,2.286,1055,1.434,1056,3.522,1057,3.522,1058,3.522,1059,3.522,1060,4.827,1061,3.522,1062,2.286,1063,2.286,1064,2.286,1065,2.286,1066,1.951,1067,5.214,1068,5.214,1069,3.522,1070,3.522,1071,3.522,1072,3.522,1073,2.286,1074,2.286,1075,4.296,1076,3.522,1077,3.522,1078,2.286,1079,2.286,1080,2.286,1081,2.286,1082,3.522,1083,3.522,1084,3.654,1085,3.522,1086,3.522,1087,2.412,1088,3.006,1089,3.522]],["title/injectables/EmojiCommunicationService.html",[1090,1.047,1091,2.223]],["body/injectables/EmojiCommunicationService.html",[2,0.808,3,0.231,4,0.198,8,0.198,26,0.198,27,0.456,38,1.204,40,0.456,58,0.397,60,0.372,61,0.022,62,0.265,63,0.231,64,0.527,66,0.789,80,3.199,81,0.372,86,0.615,104,0.622,107,5.071,115,1.113,119,1.404,133,1.855,142,0.529,206,0.924,207,0.808,219,0.351,221,0.41,230,1.694,232,0.198,233,0.073,254,0.674,334,1.004,393,0.017,394,0.017,415,2.555,530,3.88,617,2.282,760,2.47,856,4.498,1090,1.755,1091,3.728,1092,2.282,1093,5.715,1094,4.139,1095,6.424,1096,6.424,1097,5.942,1098,5.942,1099,4.442,1100,6.871,1101,2.784,1102,4.85,1103,5.071,1104,5.942,1105,5.942,1106,5.071,1107,5.942,1108,4.498,1109,3.443,1110,5.942,1111,4.85,1112,4.863,1113,4.85,1114,4.139,1115,2.437,1116,4.85]],["title/components/EmojiMartComponent.html",[0,0.14,333,0.516]],["body/components/EmojiMartComponent.html",[0,0.227,1,0.558,2,0.695,3,0.183,4,0.157,5,0.635,6,0.635,7,0.635,8,0.157,12,0.635,13,1.236,14,1.236,15,0.744,16,0.643,17,0.847,18,0.648,19,0.847,22,0.847,24,0.958,26,0.157,38,0.719,40,0.392,52,0.473,58,0.415,60,0.392,61,0.022,62,0.335,63,0.32,64,0.392,66,0.803,81,0.294,86,0.486,93,0.432,104,0.612,119,1.208,133,1.597,142,0.418,176,3.304,206,0.894,207,0.782,219,0.349,221,0.324,226,0.558,232,0.157,233,0.058,254,0.386,255,0.635,309,0.635,310,0.847,311,0.847,312,0.635,313,1.017,314,0.635,315,0.847,316,0.558,317,0.596,318,0.847,319,0.558,320,0.847,321,0.558,322,0.635,323,0.596,324,0.847,325,0.558,326,0.635,327,0.558,328,0.953,329,0.558,330,0.635,331,0.558,332,0.596,333,0.893,334,0.973,335,0.635,336,0.596,337,0.695,338,0.596,339,0.355,340,0.558,341,0.635,342,0.558,343,0.635,344,0.558,345,0.635,346,0.558,347,0.635,348,0.558,349,0.635,350,0.558,351,0.596,352,0.635,353,0.558,354,0.596,355,0.635,356,0.558,357,0.596,358,0.635,359,0.558,360,0.635,361,0.596,362,0.837,363,0.635,364,0.558,365,0.635,366,0.558,367,0.635,368,0.596,369,0.635,370,0.558,371,0.635,372,0.558,373,0.635,374,0.635,375,0.558,376,0.635,377,0.558,378,0.596,379,0.596,380,0.596,381,0.635,382,0.596,383,0.635,384,0.558,385,0.635,386,0.596,387,0.596,388,0.452,389,0.558,390,0.522,391,0.635,392,0.635,393,0.015,394,0.015,398,3.333,399,3.333,406,2.753,413,2.569,414,2.733,415,2.296,435,2.065,504,3.502,646,3.555,677,4.364,890,5.161,1047,2.963,1091,3.849,1099,4.21,1103,4.364,1109,2.963,1114,3.273,1117,5.819,1118,3.273,1119,4.91,1120,5.753,1121,5.114,1122,5.114,1123,5.114,1124,5.753,1125,5.753,1126,5.753,1127,4.91,1128,3.273,1129,5.114,1130,4.364,1131,3.835,1132,3.835,1133,3.835,1134,3.835,1135,5.114,1136,3.835,1137,5.114,1138,6.136,1139,6.136,1140,6.136,1141,6.136,1142,5.114,1143,3.273,1144,3.273,1145,3.273,1146,3.835,1147,5.114,1148,5.114,1149,3.835]],["title/components/HeaderComponent.html",[0,0.14,340,0.516]],["body/components/HeaderComponent.html",[0,0.2,1,0.436,2,0.586,3,0.143,4,0.122,5,0.497,6,0.497,7,0.497,8,0.122,12,0.497,13,1.218,14,1.218,15,0.627,16,0.588,17,0.714,18,0.64,19,0.714,20,1.262,22,0.714,24,0.808,26,0.122,27,0.331,32,1.763,38,1.272,39,3.457,40,0.331,42,1.666,47,3.462,52,0.398,56,2.536,57,2.69,58,0.434,60,0.387,61,0.022,62,0.32,63,0.299,64,0.502,81,0.502,85,1.723,89,1.928,93,0.596,102,2.269,104,0.253,106,1.175,110,2.321,115,1.141,119,1.304,142,0.724,164,3.263,195,2.321,197,1.792,198,2.028,206,0.975,207,0.795,218,3.635,219,0.384,220,0.669,221,0.253,226,0.436,229,1.108,230,1.047,231,1.614,232,0.122,233,0.045,235,2.952,239,1.792,254,0.508,255,0.497,264,1.506,268,1.411,279,2.053,309,0.497,310,0.714,311,0.714,312,0.497,313,0.914,314,0.497,315,0.714,316,0.436,317,0.466,318,0.714,319,0.436,320,0.714,321,0.436,322,0.497,323,0.466,324,0.714,325,0.436,326,0.497,327,0.436,328,0.836,329,0.436,330,0.497,331,0.436,332,0.909,333,0.436,334,0.408,335,0.497,336,0.466,337,0.586,338,0.466,339,0.277,340,0.803,341,0.497,342,0.436,343,0.497,344,0.436,345,0.497,346,0.436,347,0.497,348,0.436,349,0.497,350,0.436,351,0.466,352,0.497,353,0.436,354,0.466,355,0.497,356,0.436,357,0.466,358,0.497,359,0.436,360,0.497,361,0.858,362,1.032,363,0.497,364,0.803,365,0.497,366,0.436,367,0.497,368,0.466,369,0.497,370,0.436,371,0.497,372,0.436,373,0.497,374,0.497,375,0.803,376,0.497,377,0.436,378,0.466,379,0.466,380,0.466,381,0.497,382,0.466,383,0.497,384,0.436,385,0.497,386,0.466,387,0.466,388,0.353,389,0.436,390,0.853,391,0.497,392,0.497,393,0.013,394,0.013,398,2.925,399,2.925,415,2.242,435,1.614,457,2.375,460,3.821,461,2.717,499,1.737,500,3.198,513,3.719,516,2.925,552,1.411,554,2.053,555,1.88,556,1.506,600,2.704,610,2.098,623,0.792,661,1.108,976,3.166,1012,2.584,1055,1.88,1150,2.558,1151,3.679,1152,4.31,1153,4.31,1154,5.047,1155,5.047,1156,5.047,1157,5.047,1158,3.845,1159,3.679,1160,4.711,1161,3.679,1162,5.519,1163,5.519,1164,5.519,1165,5.519,1166,4.711,1167,2.558,1168,3.122,1169,5.196,1170,3.462,1171,4.31,1172,4.31,1173,4.31,1174,4.31,1175,4.31,1176,4.31,1177,2.998,1178,3.263,1179,2.998,1180,4.711,1181,2.998,1182,4.31,1183,4.31,1184,4.31,1185,2.998,1186,2.998,1187,4.31,1188,4.178,1189,4.31,1190,4.31,1191,4.31,1192,2.998,1193,6.088,1194,2.998,1195,2.998,1196,2.998,1197,3.263,1198,2.998,1199,2.998,1200,2.998,1201,2.998,1202,2.998,1203,2.998,1204,4.31,1205,2.558,1206,2.998,1207,2.269,1208,2.998,1209,2.558,1210,2.558,1211,2.053,1212,4.005,1213,2.053,1214,1.88,1215,2.998,1216,2.269,1217,2.053,1218,2.998,1219,2.558,1220,3.78,1221,2.998,1222,2.998,1223,2.558,1224,2.998,1225,2.998,1226,2.998,1227,2.998,1228,2.998,1229,3.679,1230,4.31,1231,2.998,1232,2.998,1233,4.31,1234,2.998,1235,2.998,1236,2.558,1237,2.269,1238,2.558,1239,3.263,1240,2.998,1241,2.998,1242,2.269,1243,2.053,1244,3.679,1245,2.998,1246,2.053,1247,2.269,1248,2.053,1249,2.998,1250,2.998,1251,3.263]],["title/injectables/HeaderProfileService.html",[1090,1.047,1170,2.223]],["body/injectables/HeaderProfileService.html",[3,0.23,4,0.197,8,0.197,18,0.848,26,0.197,27,0.455,38,1.309,40,0.455,58,0.438,61,0.022,81,0.492,85,2.182,115,1.253,131,3.511,142,0.7,206,1.04,207,0.91,219,0.324,221,0.409,230,1.689,232,0.197,233,0.073,332,0.922,362,1.017,390,0.807,393,0.017,394,0.017,513,3.437,617,2.276,1012,3.088,1022,5.063,1090,1.752,1092,2.276,1115,2.43,1166,5.71,1170,3.721,1178,5.289,1252,6.1,1253,4.128,1254,7.313,1255,7.313,1256,6.69,1257,6.69,1258,4.837,1259,4.837,1260,4.837,1261,6.69,1262,4.837,1263,5.932,1264,4.837,1265,4.837,1266,5.932,1267,4.837,1268,4.128,1269,5.932,1270,5.932,1271,4.837,1272,4.837]],["title/components/ImprintComponent.html",[0,0.14,342,0.516]],["body/components/ImprintComponent.html",[0,0.259,1,0.554,2,0.692,3,0.181,4,0.155,5,0.631,6,0.631,7,0.631,8,0.155,12,0.631,13,1.236,14,1.236,15,0.74,16,0.642,17,0.843,18,0.645,19,0.843,20,1.432,22,0.843,24,0.953,26,0.155,40,0.39,52,0.352,58,0.314,60,0.292,61,0.022,62,0.313,63,0.181,64,0.292,81,0.292,86,0.645,93,0.43,104,0.322,118,2.248,120,1.881,138,1.68,142,0.415,176,3.293,219,0.334,220,0.85,221,0.322,226,0.554,232,0.155,233,0.057,250,3.074,254,0.383,283,4.342,298,3.851,309,0.631,310,0.843,311,0.843,312,0.631,313,1.014,314,0.631,315,0.843,316,0.554,317,0.592,318,0.843,319,0.554,320,0.843,321,0.554,322,0.631,323,0.592,324,0.843,325,0.554,326,0.631,327,0.554,328,0.949,329,0.554,330,0.631,331,0.554,332,0.592,333,0.554,334,0.518,335,0.631,336,0.592,337,0.692,338,0.592,339,0.352,340,0.554,341,0.631,342,0.991,343,0.631,344,0.554,345,0.631,346,0.554,347,0.631,348,0.554,349,0.631,350,0.554,351,0.592,352,0.631,353,0.554,354,0.592,355,0.631,356,0.554,357,0.592,358,0.631,359,0.554,360,0.631,361,0.592,362,0.834,363,0.631,364,0.554,365,0.631,366,0.554,367,0.631,368,0.592,369,0.631,370,0.554,371,0.631,372,0.554,373,0.631,374,0.631,375,0.554,376,0.631,377,0.554,378,0.592,379,0.891,380,0.592,381,0.631,382,0.592,383,0.631,384,0.554,385,0.631,386,0.592,387,0.592,388,0.448,389,0.554,390,0.518,391,0.631,392,0.631,393,0.015,394,0.015,419,3.851,623,1.006,772,3.851,1084,3.851,1273,3.248,1274,6.117,1275,3.851,1276,2.697,1277,4.338,1278,4.338,1279,5.087,1280,5.087,1281,5.221,1282,3.248,1283,5.353,1284,3.806,1285,5.087,1286,4.19,1287,3.806,1288,3.851,1289,4.342,1290,5.087,1291,1.791,1292,2.205,1293,2.607,1294,3.248,1295,4.115,1296,5.087,1297,6.56,1298,4.342,1299,5.087,1300,3.851,1301,4.342,1302,4.342,1303,4.342,1304,4.342,1305,4.342,1306,4.342,1307,4.342,1308,4.342,1309,4.342,1310,4.342,1311,5.087,1312,4.342,1313,5.087,1314,5.087,1315,5.087,1316,3.806,1317,5.087,1318,5.087,1319,5.221,1320,6.117,1321,6.117,1322,5.087,1323,5.087,1324,3.851,1325,3.191,1326,5.087,1327,5.087,1328,5.087,1329,5.087,1330,5.087,1331,3.484,1332,4.342,1333,5.087,1334,5.087,1335,4.342,1336,5.087,1337,5.087,1338,4.342,1339,4.342,1340,5.087,1341,5.087,1342,3.851,1343,4.342,1344,3.191,1345,4.342,1346,5.087,1347,5.087,1348,4.342,1349,4.342,1350,4.342,1351,3.191,1352,3.806]],["title/components/LoginComponent.html",[0,0.14,344,0.516]],["body/components/LoginComponent.html",[0,0.215,1,0.502,2,0.647,3,0.164,4,0.141,5,0.571,6,0.571,7,0.571,8,0.141,12,0.571,13,1.229,14,1.229,15,0.692,16,0.62,17,0.788,18,0.69,19,0.788,20,1.361,22,0.788,24,0.891,26,0.141,27,0.365,32,1.902,38,1.02,40,0.365,42,2.103,52,0.44,56,3.433,57,3.019,58,0.404,60,0.365,61,0.022,62,0.321,63,0.26,64,0.365,72,2.984,81,0.418,85,1.7,91,4.06,93,0.52,104,0.291,106,1.351,142,0.376,160,3.73,206,0.739,207,0.647,219,0.38,220,0.77,221,0.291,222,1.275,226,0.502,231,1.856,232,0.141,233,0.052,239,1.433,246,2.609,250,2.39,254,0.347,255,0.571,270,3.601,309,0.571,310,0.788,311,0.788,312,0.571,313,0.973,314,0.571,315,0.788,316,0.502,317,0.536,318,0.788,319,0.502,320,0.788,321,0.502,322,0.571,323,0.536,324,0.788,325,0.502,326,0.571,327,0.502,328,0.902,329,0.502,330,0.571,331,0.502,332,0.536,333,0.502,334,0.469,335,0.571,336,0.536,337,0.647,338,0.536,339,0.319,340,0.502,341,0.571,342,0.502,343,0.571,344,0.855,345,0.571,346,0.502,347,0.571,348,0.502,349,0.571,350,0.502,351,0.536,352,0.571,353,0.502,354,1.015,355,0.571,356,0.502,357,0.536,358,0.571,359,0.502,360,0.571,361,0.536,362,0.793,363,0.571,364,0.502,365,0.571,366,0.502,367,0.571,368,0.536,369,0.571,370,0.502,371,0.571,372,0.502,373,0.571,374,0.571,375,0.502,376,0.571,377,0.502,378,0.536,379,0.958,380,0.536,381,0.571,382,0.536,383,0.571,384,0.502,385,0.571,386,0.536,387,0.536,388,0.406,389,0.502,390,0.469,391,0.571,392,0.571,393,0.014,394,0.014,415,2.225,456,2.563,457,2.563,461,2.932,480,1.856,496,2.756,551,2.609,552,1.622,556,1.732,621,3.258,623,0.911,816,3.258,871,3.258,872,2.561,925,1.856,976,3.416,977,3.73,1055,2.162,1087,3.258,1168,3.072,1291,1.622,1295,2.984,1325,3.683,1331,3.258,1344,2.984,1351,2.984,1353,2.942,1354,3.715,1355,3.155,1356,4.757,1357,4.757,1358,5.446,1359,4.648,1360,5.872,1361,5.872,1362,2.162,1363,3.996,1364,4.757,1365,3.447,1366,4.757,1367,3.601,1368,6.369,1369,3.601,1370,3.447,1371,4.757,1372,3.447,1373,3.569,1374,3.447,1375,2.984,1376,3.447,1377,3.601,1378,3.447,1379,2.942,1380,3.447,1381,3.447,1382,3.447,1383,3.447,1384,3.447,1385,4.757,1386,3.447,1387,4.757,1388,5.446,1389,3.447,1390,3.447,1391,3.447,1392,3.447,1393,3.447,1394,3.447,1395,3.447,1396,3.447,1397,4.06,1398,2.942,1399,3.447,1400,3.447,1401,3.447,1402,3.447,1403,3.447,1404,4.757,1405,5.011,1406,4.06,1407,4.757,1408,4.757,1409,4.757,1410,2.95,1411,3.161,1412,4.757,1413,4.757,1414,4.757,1415,4.06,1416,2.756,1417,3.161,1418,4.445,1419,3.683,1420,4.06,1421,4.757,1422,3.683,1423,4.757,1424,4.06,1425,5.872,1426,4.757,1427,4.757]],["title/components/LogoComponent.html",[0,0.14,346,0.516]],["body/components/LogoComponent.html",[0,0.196,1,0.422,2,0.573,3,0.138,4,0.118,5,0.481,6,0.481,7,0.481,8,0.118,12,0.481,13,1.215,14,1.215,15,0.613,16,0.581,17,0.698,18,0.763,19,0.698,20,1.239,22,0.698,26,0.118,27,0.323,40,0.323,42,1.636,52,0.268,58,0.434,60,0.323,61,0.022,62,0.297,63,0.309,64,0.323,66,0.802,81,0.462,85,1.88,93,0.356,104,0.245,116,2.116,142,0.657,170,2.871,206,1.058,207,0.917,219,0.315,220,0.648,221,0.245,226,0.422,232,0.118,233,0.044,239,1.206,251,2.44,253,2.477,255,0.901,260,0.648,295,1.681,309,0.481,310,0.698,311,0.698,312,0.481,313,0.901,314,0.481,315,0.698,316,0.422,317,0.451,318,0.698,319,0.422,320,0.698,321,0.422,322,0.481,323,0.451,324,0.698,325,0.422,326,0.481,327,0.422,328,0.821,329,0.422,330,0.481,331,0.422,332,0.451,333,0.422,334,0.395,335,0.481,336,0.451,337,0.573,338,0.451,339,0.268,340,0.422,341,0.481,342,0.422,343,0.481,344,0.422,345,0.481,346,0.791,347,0.481,348,0.422,349,0.481,350,0.422,351,0.451,352,0.481,353,0.422,354,0.451,355,0.481,356,0.422,357,0.451,358,0.481,359,0.422,360,0.481,361,0.451,362,0.721,363,0.481,364,0.422,365,0.481,366,0.422,367,0.481,368,0.451,369,0.481,370,0.422,371,0.481,372,0.422,373,0.481,374,0.481,375,0.422,376,0.481,377,0.422,378,0.451,379,0.451,380,0.451,381,0.481,382,0.451,383,0.481,384,0.422,385,0.481,386,0.451,387,0.451,388,0.342,389,0.422,390,0.395,391,0.481,392,0.481,393,0.012,394,0.012,415,2.222,425,2.44,430,1.282,499,1.681,516,2.871,610,1.751,623,0.767,661,1.073,744,2.732,760,1.751,773,2.641,860,3.594,876,2.884,955,2.884,1012,1.86,1027,1.82,1101,1.206,1168,2.558,1211,1.987,1212,4.358,1213,2.884,1214,1.82,1217,1.987,1219,4.229,1220,1.987,1223,2.477,1288,3.187,1292,1.681,1354,2.267,1428,2.477,1429,2.477,1430,5.622,1431,3.594,1432,4.956,1433,4.211,1434,4.956,1435,4.956,1436,4.956,1437,4.956,1438,4.956,1439,6.212,1440,5.437,1441,4.956,1442,5.773,1443,4.956,1444,5.437,1445,5.437,1446,3.594,1447,5.437,1448,5.437,1449,3.187,1450,3.594,1451,2.902,1452,4.211,1453,2.884,1454,2.197,1455,2.902,1456,4.211,1457,2.902,1458,4.211,1459,3.594,1460,4.211,1461,3.187,1462,3.897,1463,2.902,1464,6.021,1465,6.021,1466,4.211,1467,6.021,1468,2.902,1469,4.211,1470,3.594,1471,2.902,1472,4.64,1473,5.437,1474,4.702,1475,2.267,1476,2.902,1477,4.956,1478,3.594,1479,2.902,1480,2.902,1481,4.211,1482,2.902,1483,4.956,1484,2.902,1485,4.956,1486,4.211,1487,2.902,1488,6.486,1489,2.902,1490,4.956,1491,2.902,1492,2.902,1493,2.902,1494,2.197,1495,2.477,1496,2.902,1497,3.751,1498,2.902,1499,2.902,1500,4.956,1501,4.211,1502,2.902,1503,2.902,1504,2.902,1505,2.902,1506,4.64,1507,3.992,1508,5.139,1509,4.956,1510,2.902,1511,2.902,1512,4.229,1513,2.902,1514,2.902,1515,3.751,1516,2.902,1517,2.902,1518,2.902,1519,4.211,1520,2.902,1521,2.902,1522,4.211,1523,5.773,1524,2.197,1525,5.437,1526,2.902,1527,2.477,1528,2.902,1529,4.211,1530,4.211,1531,4.211,1532,4.956,1533,5.437,1534,2.902,1535,2.902,1536,2.477,1537,4.211,1538,2.902,1539,4.211,1540,2.902,1541,2.902,1542,4.211,1543,2.902,1544,2.902,1545,2.902,1546,2.902,1547,2.884,1548,4.211,1549,4.211,1550,2.902,1551,4.64,1552,4.211,1553,3.594,1554,2.884,1555,2.477,1556,2.477,1557,4.229,1558,2.477,1559,2.902,1560,2.902,1561,2.902,1562,2.902,1563,1.987,1564,2.902,1565,2.902,1566,3.594,1567,2.477,1568,2.902,1569,2.477,1570,4.64,1571,5.302,1572,3.594,1573,2.884,1574,4.229,1575,4.229,1576,3.594,1577,3.594,1578,2.477,1579,2.902,1580,2.477,1581,2.902,1582,2.477,1583,2.477,1584,2.477,1585,2.902]],["title/classes/Message.html",[104,0.299,233,0.053]],["body/classes/Message.html",[3,0.2,4,0.171,8,0.245,26,0.171,27,0.416,40,0.416,52,0.387,58,0.443,60,0.416,61,0.022,62,0.328,63,0.342,64,0.416,66,0.863,81,0.487,85,1.692,86,0.761,89,2.218,92,1.742,93,0.354,104,0.63,114,3.399,115,1.19,118,2.394,133,2.141,138,2.294,139,2.917,219,0.229,232,0.171,233,0.063,254,0.639,255,0.694,260,1.21,339,0.501,393,0.016,394,0.016,418,2.917,433,2.255,483,2.105,530,3.14,624,2.427,626,3.399,630,3.984,633,3.14,644,3.14,645,4.442,646,3.14,647,3.576,1099,3.984,1101,2.253,1108,3.171,1109,3.68,1475,2.917,1573,4.884,1586,3.576,1587,5.419,1588,6.351,1589,6.351,1590,6.351,1591,6.044,1592,6.351,1593,6.351,1594,6.351,1595,5.126,1596,4.625,1597,5.419,1598,6.351,1599,5.419,1600,4.189,1601,4.189,1602,4.189,1603,4.189,1604,4.189,1605,4.189,1606,4.189,1607,4.189,1608,4.625,1609,4.189,1610,4.189,1611,5.419,1612,4.189,1613,5.419,1614,4.189,1615,5.419,1616,4.625,1617,3.171,1618,4.189,1619,5.419,1620,5.419,1621,5.419,1622,5.419,1623,4.189,1624,4.189,1625,4.189,1626,4.189,1627,4.189,1628,4.189,1629,4.189,1630,3.576,1631,4.189,1632,4.189,1633,4.189,1634,4.189,1635,4.189,1636,4.189,1637,4.189,1638,4.189,1639,4.189]],["title/components/MessageReactionComponent.html",[0,0.14,348,0.516]],["body/components/MessageReactionComponent.html",[0,0.241,1,0.335,2,0.481,3,0.11,4,0.094,5,0.381,6,0.381,7,0.381,8,0.094,12,0.381,13,1.193,14,1.193,15,0.705,16,0.526,17,0.586,18,0.546,19,0.586,20,1.078,22,0.586,24,0.663,26,0.198,27,0.271,31,2.322,37,3.06,38,0.808,40,0.271,47,3.038,52,0.327,55,2.795,58,0.422,60,0.455,61,0.022,62,0.34,63,0.316,64,0.455,66,0.732,68,1.778,70,2.05,73,3.316,74,2.678,79,4.133,81,0.493,83,3.781,85,0.718,86,0.752,87,2.219,93,0.617,101,2.195,104,0.588,115,0.663,116,2.433,119,1.144,120,2.041,126,2.678,132,1.905,133,1.105,138,1.168,140,1.74,142,0.678,149,2.219,156,2.423,160,2.423,161,3.019,166,3.019,167,3.019,190,1.308,206,0.357,207,0.313,218,2.499,219,0.324,220,0.513,221,0.194,224,1.155,226,0.335,229,0.85,230,0.803,232,0.094,233,0.035,254,0.662,255,0.381,260,0.79,275,2.423,309,0.381,310,0.586,311,0.586,312,0.381,313,0.802,314,0.381,315,0.586,316,0.335,317,0.357,318,0.586,319,0.335,320,0.586,321,0.335,322,0.381,323,0.357,324,0.586,325,0.335,326,0.381,327,0.335,328,0.714,329,0.335,330,0.381,331,0.335,332,0.357,333,0.335,334,1.001,335,0.381,336,0.357,337,0.481,338,0.357,339,0.648,340,0.335,341,0.381,342,0.335,343,0.381,344,0.335,345,0.381,346,0.335,347,0.381,348,0.837,349,0.381,350,0.335,351,0.357,352,0.381,353,0.335,354,0.357,355,0.381,356,0.335,357,0.357,358,0.381,359,0.335,360,0.381,361,0.357,362,0.628,363,0.381,364,0.335,365,0.381,366,0.335,367,0.381,368,0.357,369,0.381,370,0.335,371,0.381,372,0.335,373,0.381,374,0.381,375,0.335,376,0.381,377,0.335,378,0.357,379,0.357,380,0.357,381,0.381,382,0.357,383,0.381,384,0.335,385,0.381,386,0.357,387,0.357,388,0.271,389,0.335,390,0.313,391,0.381,392,0.381,393,0.01,394,0.01,406,1.905,413,1.778,414,2.295,415,1.236,420,2.598,433,2.607,486,2.607,487,3.316,599,2.678,610,0.956,627,3.019,633,2.05,661,2.339,689,3.019,733,4.308,744,2.433,754,3.665,755,3.019,759,3.038,760,2.585,803,2.423,816,3.316,831,3.767,851,1.332,872,1.905,889,1.575,893,5.199,896,1.74,907,1.962,962,4.133,1008,3.019,1033,1.905,1091,3.82,1099,2.219,1101,1.793,1109,2.05,1128,1.962,1130,3.68,1144,1.962,1145,1.962,1367,2.678,1640,5.862,1641,1.962,1642,6.201,1643,3.538,1644,3.538,1645,5.228,1646,4.312,1647,3.538,1648,3.538,1649,3.538,1650,4.842,1651,3.538,1652,3.538,1653,3.538,1654,4.842,1655,3.538,1656,5.751,1657,2.705,1658,4.312,1659,3.538,1660,3.665,1661,3.538,1662,3.019,1663,4.133,1664,4.787,1665,5.521,1666,3.538,1667,2.299,1668,2.299,1669,2.299,1670,2.299,1671,2.299,1672,3.538,1673,2.299,1674,3.019,1675,5.937,1676,3.538,1677,3.538,1678,6.326,1679,2.299,1680,3.538,1681,2.299,1682,6.089,1683,2.299,1684,3.538,1685,3.019,1686,3.538,1687,2.299,1688,2.678,1689,3.538,1690,3.538,1691,4.842,1692,2.299,1693,4.842,1694,3.538,1695,2.299,1696,3.538,1697,5.751,1698,3.538,1699,2.299,1700,3.019,1701,4.133,1702,3.538,1703,3.019,1704,3.538,1705,5.228,1706,2.299,1707,4.133,1708,3.019,1709,2.299,1710,3.538,1711,3.538,1712,2.299,1713,3.538,1714,3.538,1715,3.538,1716,3.538,1717,3.538,1718,4.312,1719,3.538,1720,2.299,1721,2.299,1722,2.299,1723,2.299,1724,2.299,1725,2.299,1726,2.299,1727,2.299,1728,2.299,1729,2.299,1730,2.299,1731,1.74,1732,3.538,1733,2.299,1734,4.312,1735,2.299,1736,2.299,1737,2.299,1738,2.299,1739,2.299,1740,2.299,1741,2.299,1742,3.538,1743,2.299,1744,2.299,1745,2.299,1746,3.538,1747,3.538,1748,2.299,1749,4.312,1750,2.299,1751,2.299,1752,2.299,1753,2.299,1754,2.299,1755,2.299,1756,2.299,1757,2.299,1758,2.299,1759,1.962,1760,2.299,1761,3.538,1762,2.299,1763,4.312,1764,2.299,1765,2.299,1766,2.299,1767,2.299,1768,2.299,1769,2.299,1770,2.299,1771,4.842,1772,3.538,1773,4.842,1774,3.538,1775,3.538,1776,4.842,1777,3.538,1778,3.538,1779,3.019,1780,3.538,1781,3.019,1782,3.538,1783,3.538]],["title/injectables/MessageService.html",[1090,1.047,1784,2.683]],["body/injectables/MessageService.html",[3,0.179,4,0.154,8,0.259,16,0.672,26,0.154,27,0.387,31,3.419,38,1.323,40,0.387,52,0.527,58,0.441,60,0.487,61,0.022,62,0.347,63,0.303,64,0.487,66,0.717,81,0.512,86,0.805,89,2.127,93,0.592,101,2.418,104,0.552,115,1.302,142,0.622,169,2.719,197,2.099,198,2.376,206,1.055,207,0.923,219,0.357,221,0.318,225,2.026,229,1.392,230,1.315,232,0.154,233,0.057,254,0.683,255,0.837,260,1.272,337,0.828,339,0.692,390,0.828,393,0.015,394,0.015,418,2.719,425,2.926,490,3.458,530,2.926,559,3.985,617,1.771,679,3.492,680,3.529,719,3.822,722,3.822,770,3.529,851,2.926,873,3.302,889,2.578,897,2.578,898,3.168,899,2.578,900,2.578,921,2.578,922,2.578,923,2.849,925,2.026,960,4.314,1005,3.168,1033,3.741,1047,2.926,1090,1.491,1092,1.771,1112,5.206,1115,1.891,1197,3.822,1248,2.578,1664,3.458,1688,4.314,1731,2.849,1784,3.822,1785,3.212,1786,4.864,1787,4.864,1788,4.864,1789,4.864,1790,4.864,1791,5.198,1792,4.31,1793,4.31,1794,4.31,1795,4.31,1796,4.31,1797,5.05,1798,4.31,1799,5.421,1800,3.764,1801,4.31,1802,4.31,1803,4.31,1804,5.198,1805,4.31,1806,3.764,1807,3.458,1808,4.864,1809,4.31,1810,4.31,1811,3.764,1812,4.61,1813,5.198,1814,4.31,1815,3.764,1816,4.31,1817,3.764,1818,4.31,1819,3.458,1820,4.31,1821,3.764,1822,4.31,1823,3.764,1824,3.764,1825,4.31,1826,3.764,1827,3.764,1828,3.764,1829,4.31,1830,3.764,1831,3.212,1832,3.212,1833,3.212,1834,3.212]],["title/components/PageNotFoundComponent.html",[0,0.14,350,0.516]],["body/components/PageNotFoundComponent.html",[0,0.247,1,0.664,2,0.778,3,0.217,4,0.186,5,0.756,6,0.756,7,0.756,8,0.186,12,0.756,13,1.247,14,1.247,15,0.833,16,0.679,17,0.948,18,0.725,19,0.948,22,0.948,24,1.072,61,0.022,62,0.313,83,3.918,93,0.483,104,0.385,219,0.313,221,0.385,226,0.664,232,0.186,233,0.069,291,4.33,298,4.33,309,0.756,310,0.948,311,0.948,312,0.756,313,1.086,314,0.756,315,0.948,316,0.664,317,0.709,318,0.948,319,0.664,320,0.948,321,0.664,322,0.756,323,0.709,324,0.948,325,0.664,326,0.756,327,0.664,328,1.036,329,0.664,330,0.756,331,0.664,332,0.709,333,0.664,334,0.62,335,0.756,336,0.709,337,0.778,338,0.709,339,0.422,340,0.664,341,0.756,342,0.664,343,0.756,344,0.664,345,0.756,346,0.664,347,0.756,348,0.664,349,0.756,350,0.954,351,1.086,352,0.756,353,0.664,354,0.709,355,0.756,356,0.664,357,0.709,358,0.756,359,0.664,360,0.756,361,0.709,362,0.91,363,0.756,364,0.664,365,0.756,366,0.664,367,0.756,368,0.709,369,0.756,370,0.664,371,0.756,372,0.664,373,0.756,374,0.756,375,0.664,376,0.756,377,0.664,378,0.709,379,0.709,380,0.709,381,0.756,382,0.709,383,0.756,384,0.664,385,0.756,386,0.709,387,0.709,388,0.537,389,0.664,390,0.62,391,0.756,392,0.756,393,0.017,394,0.017,593,4.882,623,1.205,955,3.918,1276,2.941,1417,3.08,1835,3.893,1836,3.893,1837,3.893,1838,5.721,1839,5.721,1840,5.721,1841,5.721,1842,5.721]],["title/components/PasswordResetComponent.html",[0,0.14,353,0.516]],["body/components/PasswordResetComponent.html",[0,0.219,1,0.518,2,0.662,3,0.17,4,0.145,5,0.59,6,0.59,7,0.59,8,0.145,12,0.59,13,1.231,14,1.231,15,0.708,16,0.627,17,0.806,18,0.702,19,0.806,20,1.385,22,0.806,24,0.911,26,0.145,27,0.373,38,1.038,40,0.373,42,1.829,52,0.45,58,0.385,60,0.373,61,0.022,62,0.325,63,0.284,64,0.373,66,0.419,68,2.444,81,0.373,82,3.683,86,0.451,89,1.244,93,0.411,101,1.799,104,0.301,114,3.052,120,2.201,138,1.606,176,2.619,182,2.289,206,0.554,207,0.484,210,2.235,219,0.36,220,0.795,221,0.301,222,1.317,226,0.518,232,0.145,233,0.054,251,2.819,254,0.599,255,0.986,260,0.795,276,2.235,309,0.59,310,0.806,311,0.806,312,0.59,313,0.986,314,0.59,315,0.806,316,0.518,317,0.554,318,0.806,319,0.518,320,0.806,321,0.518,322,0.59,323,0.554,324,0.806,325,0.518,326,0.59,327,0.518,328,0.918,329,0.518,330,0.59,331,0.518,332,0.554,333,0.518,334,0.484,335,0.59,336,0.554,337,0.662,338,0.554,339,0.329,340,0.518,341,0.59,342,0.518,343,0.59,344,0.518,345,0.59,346,0.518,347,0.59,348,0.518,349,0.59,350,0.518,351,0.554,352,0.59,353,0.936,354,1.112,355,0.59,356,0.518,357,0.554,358,0.59,359,0.518,360,0.59,361,0.554,362,0.806,363,0.59,364,0.518,365,0.59,366,0.518,367,0.59,368,0.554,369,0.59,370,0.518,371,0.59,372,0.518,373,0.59,374,0.59,375,0.518,376,0.59,377,0.518,378,0.554,379,0.969,380,0.969,381,0.59,382,0.554,383,0.59,384,0.518,385,0.59,386,0.554,387,0.554,388,0.419,389,0.518,390,0.484,391,0.59,392,0.59,393,0.014,394,0.014,456,2.607,457,2.607,516,2.064,552,1.676,623,0.941,661,1.799,856,3.683,876,3.332,1012,1.574,1168,3.236,1211,2.44,1212,3.794,1213,2.44,1214,2.235,1217,2.44,1220,3.332,1246,2.44,1276,2.607,1286,3.332,1291,1.676,1354,2.619,1355,3.21,1362,2.235,1363,4.131,1375,2.235,1410,2.991,1411,3.205,1416,3.45,1417,3.205,1419,3.735,1420,5.081,1422,3.052,1453,3.332,1497,2.696,1507,2.235,1563,2.44,1843,5.491,1844,5.491,1845,3.04,1846,5.54,1847,4.865,1848,4.865,1849,4.728,1850,5.54,1851,4.865,1852,5.954,1853,6.704,1854,4.865,1855,3.683,1856,4.865,1857,4.985,1858,3.562,1859,4.865,1860,4.865,1861,4.865,1862,3.562,1863,4.152,1864,3.683,1865,3.562,1866,3.332,1867,3.562,1868,3.04,1869,3.04,1870,4.152,1871,3.04,1872,3.04,1873,4.152,1874,3.04,1875,3.562,1876,3.332,1877,5.54,1878,3.562,1879,3.562,1880,3.562,1881,3.562,1882,3.562,1883,3.562,1884,3.562,1885,3.562,1886,4.152,1887,2.44,1888,4.152,1889,3.683,1890,4.865]],["title/components/PhotoSelectionComponent.html",[0,0.14,356,0.516]],["body/components/PhotoSelectionComponent.html",[0,0.257,1,0.374,2,0.523,3,0.122,4,0.105,5,0.425,6,0.425,7,0.425,8,0.286,12,0.425,13,1.204,14,1.204,15,0.56,16,0.552,17,0.637,18,0.823,19,0.637,20,1.153,22,0.637,24,0.721,26,0.105,27,0.295,32,2.012,33,2.714,38,0.481,40,0.295,52,0.356,58,0.436,60,0.421,61,0.022,62,0.343,63,0.335,64,0.52,66,0.783,80,2.071,81,0.458,85,2.028,86,0.73,89,2.235,93,0.54,104,0.217,110,2.483,115,0.721,118,1.7,119,1.535,120,1.422,131,1.933,133,1.6,138,1.27,142,0.718,197,1.599,206,1.01,207,0.883,210,3.747,219,0.36,220,0.573,221,0.217,222,0.949,223,1.134,226,0.374,232,0.105,233,0.039,250,1.933,254,0.618,255,0.764,260,0.573,276,1.61,289,3.283,293,3.283,303,3.283,309,0.425,310,0.637,311,1.06,312,0.425,313,0.849,314,0.425,315,0.637,316,0.374,317,0.399,318,0.637,319,0.374,320,0.637,321,0.374,322,0.425,323,0.399,324,0.637,325,0.374,326,0.425,327,0.374,328,0.764,329,0.374,330,0.425,331,0.374,332,0.399,333,0.374,334,0.349,335,0.425,336,0.399,337,0.697,338,0.399,339,0.237,340,0.374,341,0.425,342,0.374,343,0.425,344,0.374,345,0.425,346,0.374,347,0.425,348,0.374,349,0.425,350,0.374,351,0.399,352,0.425,353,0.374,354,0.399,355,0.425,356,0.978,357,0.976,358,0.425,359,0.374,360,0.425,361,0.399,362,0.799,363,0.425,364,0.374,365,0.425,366,0.374,367,0.425,368,0.399,369,0.425,370,0.374,371,0.425,372,0.374,373,0.425,374,0.425,375,0.374,376,0.425,377,0.374,378,0.399,379,0.399,380,0.399,381,0.425,382,0.399,383,0.425,384,0.374,385,0.425,386,0.399,387,0.399,388,0.302,389,0.374,390,0.349,391,0.425,392,0.425,393,0.011,394,0.011,406,2.071,413,2.895,414,2.612,415,2.383,416,3.283,417,2.413,430,1.7,437,2.191,438,2.191,444,2.191,450,2.191,456,2.171,457,2.171,461,2.483,481,3.338,482,3.946,483,2.318,496,2.229,503,3.946,533,1.61,543,1.61,544,1.61,552,1.208,556,1.29,589,2.229,590,1.943,607,1.758,608,3.759,610,1.599,623,0.678,691,3.614,744,2.574,915,1.758,928,1.61,976,2.894,1020,3.283,1031,2.912,1047,2.673,1055,1.61,1101,1.599,1239,1.943,1276,2.171,1291,1.208,1293,4.091,1342,2.912,1355,2.673,1367,2.912,1475,2.071,1660,2.912,1781,3.283,1887,1.758,1891,6.045,1892,5.362,1893,2.191,1894,3.846,1895,2.912,1896,3.937,1897,3.846,1898,3.846,1899,4.613,1900,3.946,1901,5.488,1902,4.684,1903,4.613,1904,4.613,1905,4.613,1906,4.613,1907,3.846,1908,5.123,1909,5.123,1910,3.846,1911,3.846,1912,3.846,1913,5.761,1914,5.761,1915,5.123,1916,5.123,1917,3.283,1918,4.613,1919,2.191,1920,3.18,1921,3.846,1922,3.492,1923,2.634,1924,3.937,1925,3.937,1926,3.283,1927,2.567,1928,5.761,1929,2.567,1930,2.567,1931,2.567,1932,3.937,1933,2.567,1934,3.846,1935,2.567,1936,2.567,1937,4.361,1938,3.846,1939,2.567,1940,2.567,1941,3.846,1942,2.567,1943,4.613,1944,3.846,1945,2.567,1946,3.846,1947,2.567,1948,2.567,1949,2.567,1950,3.846,1951,3.846,1952,2.567,1953,2.567,1954,2.567,1955,2.567,1956,2.567,1957,2.567,1958,3.846,1959,4.613,1960,2.567,1961,2.567,1962,3.283,1963,1.943,1964,1.943,1965,2.191,1966,2.191,1967,2.191,1968,2.567,1969,2.567,1970,2.567,1971,2.567,1972,2.567,1973,2.567,1974,2.567,1975,2.567,1976,2.567,1977,4.613,1978,2.567,1979,3.846,1980,2.567,1981,2.567,1982,3.846,1983,2.567,1984,2.567,1985,2.567,1986,2.567,1987,3.846,1988,5.123,1989,2.567,1990,4.613,1991,2.567,1992,2.567,1993,2.567,1994,2.567,1995,3.846,1996,3.283,1997,3.283,1998,3.846,1999,3.846,2000,5.761,2001,3.283,2002,3.846,2003,3.846,2004,3.846,2005,3.283,2006,3.846,2007,3.846]],["title/components/PrivacyComponent.html",[0,0.14,359,0.516]],["body/components/PrivacyComponent.html",[0,0.174,1,0.345,2,0.493,3,0.113,4,0.097,5,0.393,6,0.393,7,0.393,8,0.097,12,0.393,13,1.197,14,1.197,15,0.527,16,0.534,17,0.6,18,0.459,19,0.6,20,1.099,22,0.6,24,0.679,26,0.097,40,0.278,52,0.219,58,0.224,60,0.182,61,0.021,62,0.24,63,0.113,64,0.182,81,0.182,93,0.306,104,0.2,142,0.259,176,1.951,219,0.269,220,0.53,221,0.2,226,0.345,232,0.097,233,0.036,250,3.602,287,4.431,291,3.726,302,2.1,304,2.482,309,0.393,310,0.6,311,0.6,312,0.393,313,0.816,314,0.393,315,0.6,316,0.345,317,0.369,318,0.6,319,0.345,320,0.6,321,0.345,322,0.393,323,0.369,324,0.6,325,0.345,326,0.393,327,0.345,328,0.729,329,0.345,330,0.393,331,0.345,332,0.369,333,0.345,334,0.323,335,0.393,336,0.369,337,0.493,338,0.369,339,0.219,340,0.345,341,0.393,342,0.345,343,0.393,344,0.345,345,0.393,346,0.345,347,0.393,348,0.345,349,0.393,350,0.345,351,0.369,352,0.393,353,0.345,354,0.369,355,0.393,356,0.345,357,0.369,358,0.393,359,0.716,360,0.393,361,0.369,362,0.64,363,0.393,364,0.345,365,0.393,366,0.345,367,0.393,368,0.369,369,0.393,370,0.345,371,0.393,372,0.345,373,0.393,374,0.393,375,0.345,376,0.393,377,0.345,378,0.369,379,0.683,380,0.369,381,0.393,382,0.369,383,0.393,384,0.345,385,0.393,386,0.369,387,0.369,388,0.279,389,0.345,390,0.323,391,0.393,392,0.393,393,0.011,394,0.011,623,0.627,661,1.82,725,3.726,936,2.743,1027,3.506,1084,2.743,1087,2.482,1088,3.093,1106,3.093,1276,2.069,1277,3.328,1278,3.328,1281,4.201,1282,2.025,1283,4.231,1291,1.116,1292,1.375,1294,2.025,1295,2.273,1300,2.743,1301,3.093,1302,3.093,1303,3.093,1304,3.093,1305,3.093,1306,3.093,1307,3.093,1308,3.093,1309,3.093,1310,3.093,1312,3.093,1319,5.118,1324,4.539,1325,4.589,1331,4.53,1332,3.093,1335,3.093,1338,3.093,1339,4.771,1342,3.726,1343,3.093,1344,3.762,1345,3.093,1348,3.093,1349,3.093,1350,3.093,1351,3.506,1405,5.519,1410,1.821,1416,3.239,1417,2.65,1424,5.646,1536,4.201,1996,4.201,1997,3.093,2001,3.093,2005,4.201,2008,2.025,2009,3.093,2010,3.624,2011,3.624,2012,2.372,2013,2.372,2014,5.351,2015,3.624,2016,4.922,2017,4.922,2018,3.624,2019,3.624,2020,3.624,2021,3.624,2022,6.963,2023,3.624,2024,5.519,2025,3.624,2026,4.922,2027,6.615,2028,3.624,2029,3.624,2030,3.624,2031,4.922,2032,5.351,2033,5.996,2034,4.922,2035,4.922,2036,3.624,2037,3.624,2038,6.823,2039,4.922,2040,7.139,2041,5.519,2042,3.624,2043,6.615,2044,6.963,2045,3.624,2046,3.624,2047,3.624,2048,4.922,2049,3.624,2050,3.624,2051,6.615,2052,3.624,2053,3.624,2054,5.59,2055,5.59,2056,4.922,2057,3.624,2058,3.624,2059,4.201,2060,3.624,2061,3.624,2062,5.59,2063,4.922,2064,4.201,2065,3.624,2066,3.624,2067,6.27,2068,3.624,2069,3.624,2070,3.093,2071,5.351,2072,5.996,2073,3.624,2074,3.624,2075,6.963,2076,3.624,2077,3.624,2078,5.59,2079,3.624,2080,4.922,2081,4.922,2082,4.201,2083,4.201,2084,4.922,2085,4.922,2086,3.624,2087,3.624,2088,3.624,2089,4.922,2090,3.624,2091,3.624,2092,3.624,2093,3.624,2094,3.624,2095,3.624,2096,3.624,2097,3.624,2098,6.27,2099,6.731,2100,6.615,2101,3.624,2102,3.624,2103,3.624,2104,3.624,2105,3.624,2106,3.624,2107,6.27,2108,3.624,2109,3.624,2110,3.624,2111,3.624,2112,3.624,2113,4.922,2114,4.922,2115,4.922,2116,3.624,2117,3.624,2118,5.59,2119,4.922,2120,3.624,2121,4.922,2122,4.922,2123,4.922,2124,3.624,2125,3.624,2126,3.624,2127,3.624,2128,3.624,2129,3.624,2130,3.624,2131,3.624,2132,3.624,2133,3.624,2134,3.624,2135,3.624,2136,4.922,2137,3.624,2138,5.59,2139,3.624,2140,5.59,2141,3.624,2142,3.624,2143,3.624,2144,3.624,2145,3.093,2146,3.624,2147,3.624,2148,3.624,2149,3.624,2150,3.624,2151,4.922,2152,3.624,2153,4.201,2154,3.624,2155,3.624,2156,3.624,2157,4.922,2158,3.624,2159,3.624,2160,3.624,2161,3.624,2162,3.093,2163,4.922,2164,3.624,2165,3.624,2166,3.624,2167,3.624,2168,3.624,2169,3.624,2170,3.624,2171,3.624,2172,3.624,2173,3.624,2174,3.624,2175,3.624,2176,4.922,2177,3.624,2178,3.371,2179,3.624,2180,3.624,2181,3.624,2182,3.624,2183,3.624,2184,3.624,2185,3.624,2186,3.624,2187,3.624,2188,3.624,2189,3.624,2190,3.624,2191,3.624,2192,3.624,2193,3.624,2194,3.624,2195,3.624,2196,3.624,2197,3.624,2198,3.624,2199,3.624,2200,3.624,2201,3.624,2202,3.624,2203,3.624,2204,3.624,2205,3.624,2206,3.624,2207,3.624,2208,3.624,2209,3.624,2210,3.624,2211,3.624,2212,3.624,2213,3.624,2214,3.624,2215,3.624,2216,3.624,2217,3.624,2218,3.624,2219,3.624,2220,4.922,2221,3.624,2222,3.093,2223,3.624,2224,3.093,2225,3.624,2226,3.624,2227,3.624,2228,3.624,2229,3.624,2230,2.743,2231,3.624,2232,3.624,2233,3.093]],["title/components/ProfileViewComponent.html",[0,0.14,364,0.516]],["body/components/ProfileViewComponent.html",[0,0.248,1,0.526,2,0.668,3,0.172,4,0.148,5,0.599,6,0.599,7,0.599,8,0.148,12,0.599,13,1.232,14,1.232,15,0.715,16,0.631,17,0.814,18,0.623,19,0.599,22,0.814,24,0.921,26,0.148,27,0.377,38,1.122,39,3.824,40,0.377,47,3.758,52,0.334,56,2.47,57,2.647,58,0.416,60,0.428,61,0.022,62,0.342,63,0.299,64,0.481,81,0.46,86,0.623,93,0.614,96,4.103,104,0.305,115,1.046,119,1.416,136,3.083,142,0.683,156,3.366,197,2.044,206,0.562,207,0.492,218,3.235,219,0.342,221,0.305,226,0.526,229,1.337,230,1.263,231,1.947,232,0.148,233,0.054,235,3.366,254,0.495,279,2.477,309,0.599,310,0.814,311,0.814,312,0.599,313,0.993,314,0.599,315,0.814,316,0.526,317,0.562,318,0.814,319,0.526,320,0.814,321,0.526,322,0.599,323,0.562,324,0.814,325,0.526,326,0.599,327,0.526,328,0.925,329,0.526,330,0.599,331,0.526,332,0.974,333,0.526,334,0.492,335,0.599,336,0.562,337,0.668,338,0.562,339,0.334,340,0.526,341,0.599,342,0.526,343,0.599,344,0.526,345,0.599,346,0.526,347,0.599,348,0.526,349,0.599,350,0.526,351,0.562,352,0.599,353,0.526,354,0.562,355,0.599,356,0.526,357,0.562,358,0.599,359,0.526,360,0.599,361,0.562,362,1.013,363,0.599,364,0.872,365,0.599,366,0.526,367,0.599,368,0.562,369,0.599,370,0.526,371,0.599,372,0.526,373,0.599,374,0.599,375,0.526,376,0.599,377,0.526,378,0.562,379,0.868,380,0.562,381,0.599,382,0.562,383,0.599,384,0.526,385,0.599,386,0.562,387,0.562,388,0.426,389,0.526,390,0.899,391,0.599,392,0.599,393,0.014,394,0.014,415,2.48,513,2.848,600,3.083,759,3.083,760,2.044,935,3.721,1005,3.083,1035,4.195,1167,3.087,1169,4.766,1170,3.758,1178,4.535,1207,5.163,1209,3.087,1210,3.087,1229,3.087,1236,3.087,1237,2.738,1238,3.087,1239,3.721,1243,3.366,1251,3.721,1292,2.095,1410,2.47,1411,2.646,1685,4.195,1917,4.195,1932,4.766,1962,4.195,2059,4.195,2234,5.821,2235,3.087,2236,4.915,2237,4.915,2238,4.915,2239,4.915,2240,5.113,2241,5.584,2242,4.915,2243,3.616,2244,4.915,2245,3.616,2246,5.991,2247,4.915,2248,3.616,2249,3.616,2250,4.915,2251,3.616,2252,3.616,2253,3.087,2254,6.463,2255,3.366,2256,4.915,2257,4.915,2258,3.721,2259,4.915,2260,4.195]],["title/components/ReAuthenticateUserComponent.html",[0,0.14,366,0.516]],["body/components/ReAuthenticateUserComponent.html",[0,0.229,1,0.565,2,0.701,3,0.185,4,0.158,5,0.643,6,0.643,7,0.643,8,0.158,12,0.643,13,1.237,14,1.237,15,0.75,16,0.646,17,0.854,18,0.653,19,0.854,20,1.446,22,0.854,24,0.965,26,0.158,27,0.395,32,2.021,33,2.277,38,0.965,40,0.395,52,0.476,58,0.381,60,0.298,61,0.022,62,0.316,63,0.276,64,0.298,81,0.444,93,0.521,104,0.328,119,1.516,142,0.423,154,3.529,182,2.901,197,2.142,207,0.701,219,0.368,220,0.866,221,0.328,222,1.434,223,1.714,226,0.565,232,0.158,233,0.058,287,3.232,296,3.9,302,3.571,309,0.643,310,0.854,311,0.854,312,0.643,313,1.021,314,0.643,315,0.854,316,0.565,317,0.603,318,0.854,319,0.565,320,0.854,321,0.565,322,0.643,323,0.603,324,0.854,325,0.565,326,0.643,327,0.565,328,0.959,329,0.565,330,0.643,331,0.565,332,0.603,333,0.565,334,0.528,335,0.643,336,0.603,337,0.701,338,0.603,339,0.359,340,0.565,341,0.643,342,0.565,343,0.643,344,0.565,345,0.643,346,0.565,347,0.643,348,0.565,349,0.643,350,0.565,351,0.603,352,0.643,353,0.565,354,0.801,355,0.643,356,0.565,357,0.603,358,0.643,359,0.565,360,0.643,361,0.603,362,0.842,363,0.643,364,0.565,365,0.643,366,0.897,367,1.115,368,1.127,369,0.643,370,0.565,371,0.643,372,0.565,373,0.643,374,0.643,375,0.565,376,0.643,377,0.565,378,0.603,379,0.997,380,0.603,381,0.643,382,0.603,383,0.643,384,0.565,385,0.643,386,0.603,387,0.603,388,0.457,389,0.565,390,0.528,391,0.643,392,0.643,393,0.015,394,0.015,430,1.714,456,2.722,457,2.722,461,3.115,481,3.352,482,4.222,533,3.232,543,2.433,544,2.433,552,1.825,556,1.949,1027,3.232,1291,1.825,1325,3.232,1344,3.232,1354,3.318,1355,3.352,1362,2.433,1363,4.138,1373,2.248,1375,2.433,1410,2.589,1411,2.774,1416,2.985,1417,2.774,1418,3.9,1419,3.232,1422,3.232,1857,4.379,1866,2.657,1876,3.529,2153,4.397,2178,4.222,2261,5.476,2262,4.857,2263,3.311,2264,5.152,2265,5.152,2266,5.785,2267,6.164,2268,5.152,2269,3.879,2270,3.879,2271,3.879,2272,2.936,2273,3.311,2274,3.879,2275,3.879,2276,5.152,2277,5.152,2278,5.152,2279,5.152,2280,5.152,2281,5.152,2282,5.152,2283,4.397,2284,3.9,2285,4.397]],["title/components/RegisterComponent.html",[0,0.14,370,0.516]],["body/components/RegisterComponent.html",[0,0.229,1,0.381,2,0.53,3,0.125,4,0.107,5,0.433,6,0.433,7,0.433,8,0.107,12,0.433,13,1.206,14,1.206,15,0.568,16,0.557,17,0.646,18,0.494,19,0.646,20,1.166,22,0.646,26,0.159,27,0.299,38,0.874,40,0.299,42,1.54,52,0.361,57,1.155,58,0.32,60,0.201,61,0.022,62,0.283,63,0.222,64,0.201,66,0.308,81,0.201,86,0.494,87,1.64,93,0.49,104,0.221,106,1.025,118,1.723,120,2.145,122,3.329,138,1.288,170,3.658,180,3.531,182,2.73,206,0.606,207,0.356,219,0.361,220,0.584,221,0.221,222,0.967,226,0.381,231,1.408,232,0.107,233,0.039,241,2.702,250,1.96,254,0.469,255,0.433,270,2.952,276,1.64,281,3.329,287,3.244,296,2.952,302,2.996,304,2.671,307,1.979,308,1.979,309,0.433,310,0.646,311,0.646,312,0.433,313,0.857,314,0.433,315,0.646,316,0.381,317,0.406,318,0.646,319,0.381,320,0.646,321,0.381,322,0.433,323,0.406,324,0.646,325,0.381,326,0.433,327,0.381,328,0.773,329,0.381,330,0.433,331,0.381,332,0.406,333,0.381,334,0.356,335,0.433,336,0.406,337,0.53,338,0.406,339,0.242,340,0.381,341,0.433,342,0.381,343,0.433,344,0.381,345,0.433,346,0.381,347,0.433,348,0.381,349,0.433,350,0.381,351,0.406,352,0.433,353,0.381,354,0.606,355,0.433,356,0.381,357,0.406,358,0.433,359,0.381,360,0.433,361,0.406,362,0.679,363,0.433,364,0.381,365,0.433,366,0.381,367,0.433,368,0.406,369,0.433,370,0.899,371,0.433,372,0.381,373,1.046,374,0.433,375,0.381,376,0.433,377,0.381,378,0.406,379,0.934,380,0.406,381,0.433,382,0.406,383,0.433,384,0.381,385,0.433,386,0.406,387,0.406,388,0.308,389,0.381,390,0.356,391,0.433,392,0.433,393,0.011,394,0.011,413,1.96,414,2.499,456,2.195,457,2.195,461,2.511,514,2.447,524,2.996,552,1.23,555,2.447,556,1.314,589,2.702,610,2.625,621,2.671,623,0.691,661,0.967,816,2.671,976,2.926,1027,2.447,1055,1.64,1087,2.671,1151,3.329,1168,2.828,1276,2.195,1283,1.979,1286,1.791,1291,1.23,1293,1.791,1295,2.447,1300,2.952,1344,3.244,1351,2.447,1354,2.1,1355,2.702,1362,1.64,1363,3.875,1373,1.515,1375,1.64,1406,4.413,1410,2.598,1411,2.784,1416,2.26,1417,2.1,1418,2.952,1419,2.447,1422,2.447,1428,2.232,1430,3.329,1431,3.329,1453,3.541,1462,4.092,1474,3.531,1478,2.232,1495,2.232,1506,3.329,1507,1.64,1508,3.981,1512,4.721,1515,1.979,1547,4.402,1551,4.721,1553,5.752,1555,2.232,1557,4.951,1558,5.969,1563,3.194,1566,4.721,1567,2.232,1569,3.329,1570,5.969,1571,3.329,1572,4.721,1573,3.541,1574,5.129,1575,2.232,1576,2.232,1578,5.272,1580,5.272,1582,4.951,1583,3.981,1584,3.981,1662,2.232,1708,2.232,1855,2.952,1857,3.531,1866,1.791,1876,3.194,1896,3.981,1920,3.205,1922,3.914,1923,3.973,1926,3.329,1963,1.979,1964,1.979,1965,2.232,2009,3.981,2014,3.329,2041,3.329,2082,3.981,2178,3.541,2222,3.329,2224,3.329,2272,1.979,2273,2.232,2283,3.329,2284,2.952,2285,3.329,2286,2.232,2287,4.664,2288,3.9,2289,4.664,2290,5.171,2291,3.9,2292,2.615,2293,2.952,2294,2.615,2295,2.615,2296,2.615,2297,3.9,2298,2.615,2299,2.615,2300,2.615,2301,2.615,2302,2.615,2303,2.615,2304,5.171,2305,3.9,2306,3.9,2307,3.9,2308,3.9,2309,3.9,2310,3.9,2311,3.9,2312,3.9,2313,3.9,2314,6.01,2315,5.531,2316,5.129,2317,2.615,2318,2.615,2319,3.9,2320,5.531,2321,5.171,2322,2.615,2323,2.615,2324,2.615,2325,3.9,2326,2.615,2327,6.01,2328,5.171,2329,2.615,2330,5.801,2331,5.801,2332,3.9,2333,4.664,2334,3.9,2335,3.9,2336,5.171,2337,3.9,2338,2.615,2339,5.171,2340,2.615,2341,5.171,2342,5.171,2343,4.664,2344,5.531,2345,2.615,2346,3.9,2347,2.232,2348,6.926,2349,5.171,2350,5.171,2351,5.171,2352,5.171,2353,3.9,2354,5.389,2355,5.171,2356,3.9,2357,4.664,2358,4.664,2359,3.9,2360,5.531,2361,2.615,2362,2.615,2363,5.531,2364,3.9,2365,2.615,2366,4.664,2367,2.615,2368,5.801,2369,4.664,2370,4.664,2371,3.9,2372,3.9,2373,2.615,2374,2.615,2375,5.171,2376,3.9,2377,2.615,2378,3.9,2379,2.615,2380,2.615,2381,2.615,2382,2.615,2383,2.615,2384,2.615,2385,3.9,2386,2.615,2387,2.615,2388,2.615,2389,2.615,2390,3.9,2391,3.9,2392,2.615,2393,3.9,2394,3.9,2395,5.171,2396,2.615,2397,2.615,2398,2.615,2399,2.615]],["title/components/RegisterNextComponent.html",[0,0.14,372,0.516]],["body/components/RegisterNextComponent.html",[0,0.272,1,0.522,2,0.665,3,0.171,4,0.146,5,0.594,6,0.594,7,0.594,8,0.297,12,0.594,13,1.232,14,1.232,15,0.711,16,0.629,17,0.81,18,0.619,19,0.81,22,0.81,24,0.915,26,0.146,27,0.375,40,0.375,42,1.835,52,0.331,58,0.386,60,0.427,61,0.022,62,0.341,63,0.284,64,0.427,66,0.802,81,0.427,86,0.757,93,0.575,104,0.303,106,1.915,118,2.159,120,1.807,138,1.613,142,0.533,187,3.699,206,0.557,207,0.488,210,4.044,219,0.36,220,0.8,221,0.303,226,0.522,232,0.146,233,0.054,239,1.491,254,0.559,264,1.802,268,1.687,309,0.594,310,0.81,311,0.81,312,0.594,313,0.989,314,0.594,315,0.81,316,0.522,317,0.557,318,0.81,319,0.522,320,0.81,321,0.522,322,0.594,323,0.557,324,0.81,325,0.522,326,0.594,327,0.522,328,0.921,329,0.522,330,0.594,331,0.522,332,0.557,333,0.522,334,0.488,335,0.594,336,0.557,337,0.665,338,0.557,339,0.331,340,0.522,341,0.594,342,0.522,343,0.594,344,0.522,345,0.594,346,0.522,347,0.594,348,0.522,349,0.594,350,0.522,351,0.557,352,0.594,353,0.522,354,0.557,355,0.594,356,0.869,357,1.044,358,0.594,359,0.522,360,0.594,361,0.557,362,0.809,363,0.594,364,0.522,365,0.594,366,0.522,367,0.594,368,0.557,369,0.594,370,0.522,371,0.594,372,1.002,373,1.093,374,0.594,375,0.522,376,0.594,377,0.522,378,0.557,379,0.557,380,0.557,381,0.594,382,0.557,383,0.594,384,0.522,385,0.594,386,0.557,387,0.557,388,0.422,389,0.522,390,0.488,391,0.594,392,0.594,393,0.014,394,0.014,413,3.239,417,4.212,418,3.214,522,4.171,523,2.714,524,3.459,556,1.802,589,3.459,623,0.948,691,4.044,928,2.249,977,3.807,1066,3.06,1277,4.208,1278,4.208,1291,1.687,1292,2.077,1293,3.807,1295,3.066,1351,3.066,1475,2.631,1892,2.714,1919,3.06,1920,3.619,1922,4.208,1923,4.598,1963,2.714,1964,2.714,2255,2.456,2293,3.699,2400,5.502,2401,5.502,2402,3.06,2403,5.559,2404,5.559,2405,5.559,2406,4.887,2407,4.887,2408,5.559,2409,4.887,2410,4.887,2411,5.97,2412,4.887,2413,4.887,2414,3.586,2415,4.887,2416,3.586,2417,5.559,2418,3.586,2419,4.887,2420,3.586,2421,6.247,2422,5.97,2423,3.06,2424,3.586,2425,2.714,2426,3.586,2427,3.586,2428,3.586,2429,3.586,2430,3.06]],["title/components/SearchComponent.html",[0,0.14,375,0.516]],["body/components/SearchComponent.html",[0,0.193,1,0.34,2,0.664,3,0.111,4,0.095,5,0.387,6,0.387,7,0.387,8,0.095,12,0.387,13,1.195,14,1.195,15,0.521,16,0.689,17,0.593,18,0.454,19,0.593,20,1.088,22,0.593,24,0.671,26,0.215,27,0.334,31,2.628,32,1.94,33,2.555,37,3.345,38,0.671,40,0.275,42,1.612,52,0.331,54,2.645,55,2.703,56,2.188,57,2.157,58,0.434,60,0.426,61,0.022,62,0.326,63,0.32,64,0.426,66,0.735,69,2.711,72,3.917,74,3.696,75,4.026,76,3.056,80,1.928,81,0.522,82,3.696,85,1.524,86,0.667,89,1.251,93,0.589,101,2.438,104,0.197,106,0.915,110,3.293,115,0.915,116,3.313,119,1.244,120,0.864,125,2.711,131,1.799,132,3.469,133,1.524,136,3.743,140,1.768,142,0.681,164,2.711,169,1.928,170,2.075,176,2.344,182,1.685,189,3.113,190,2.206,195,2.628,197,1.489,206,0.818,207,0.949,219,0.357,220,0.521,221,0.197,222,0.864,223,1.032,224,1.174,225,1.257,226,0.34,229,0.864,230,0.816,231,1.257,232,0.095,233,0.035,237,2.711,241,1.353,254,0.491,255,0.722,260,1.291,268,1.099,309,0.387,310,0.593,311,0.809,312,0.387,313,0.809,314,0.387,315,0.593,316,0.34,317,0.363,318,0.593,319,0.34,320,0.593,321,0.34,322,0.387,323,0.363,324,0.593,325,0.34,326,0.387,327,0.34,328,0.722,329,0.34,330,0.387,331,0.34,332,0.363,333,0.34,334,0.318,335,0.387,336,0.363,337,0.487,338,0.363,339,0.216,340,0.34,341,0.387,342,0.34,343,0.387,344,0.34,345,0.387,346,0.34,347,0.387,348,0.34,349,0.387,350,0.34,351,0.363,352,0.387,353,0.34,354,0.363,355,0.387,356,0.34,357,0.363,358,0.387,359,0.34,360,0.387,361,0.363,362,0.842,363,0.387,364,0.34,365,0.387,366,0.34,367,0.387,368,0.363,369,0.387,370,0.34,371,0.387,372,0.34,373,0.387,374,0.387,375,0.711,376,0.387,377,0.34,378,0.363,379,0.363,380,0.363,381,0.387,382,0.363,383,0.387,384,0.34,385,0.387,386,0.363,387,0.363,388,0.275,389,0.521,390,0.716,391,0.387,392,0.387,393,0.011,394,0.011,413,2.188,415,2.084,427,1.6,429,3.296,430,1.924,434,1.768,456,2.049,462,3.296,466,4.517,467,3.296,472,3.696,481,1.353,491,2.711,495,1.6,498,4.726,500,3.78,515,2.452,531,4.938,541,3.296,546,1.768,547,3.296,557,1.768,562,1.768,564,2.711,565,1.768,566,2.711,567,2.711,569,1.768,623,0.617,690,2.452,691,2.246,702,1.993,728,3.344,744,2.188,759,3.063,760,2.03,770,2.829,788,1.768,789,1.465,790,1.768,811,1.768,997,1.768,1005,2.246,1012,1.582,1031,2.711,1033,1.928,1037,3.344,1041,3.056,1101,2.03,1158,3.545,1161,3.056,1216,1.768,1248,1.6,1276,2.049,1446,3.717,1449,2.711,1450,3.717,1454,1.768,1461,4.205,1462,4.176,1470,1.993,1472,3.717,1474,4.517,1494,1.768,1547,3.344,1554,4.276,1660,3.985,1707,5.628,1819,2.452,2431,1.993,2432,3.581,2433,3.581,2434,4.355,2435,5.967,2436,6.524,2437,4.355,2438,4.882,2439,4.882,2440,5.265,2441,5.265,2442,4.882,2443,4.167,2444,4.882,2445,3.581,2446,3.581,2447,4.882,2448,3.581,2449,3.581,2450,3.581,2451,4.882,2452,4.167,2453,2.336,2454,4.205,2455,3.581,2456,3.056,2457,2.711,2458,3.696,2459,3.056,2460,3.581,2461,3.581,2462,3.581,2463,3.581,2464,2.336,2465,5.555,2466,3.696,2467,5.967,2468,4.882,2469,2.336,2470,2.336,2471,4.882,2472,4.882,2473,4.882,2474,4.882,2475,4.882,2476,4.882,2477,2.336,2478,2.336,2479,2.336,2480,2.336,2481,2.336,2482,2.336,2483,1.993,2484,3.581,2485,4.882,2486,2.336,2487,2.336,2488,2.336,2489,2.336,2490,3.581,2491,3.581,2492,3.581,2493,3.581,2494,3.581,2495,2.336,2496,2.336,2497,3.581,2498,3.581,2499,2.336,2500,3.056,2501,3.581,2502,3.581,2503,3.581,2504,3.581,2505,4.355,2506,3.581,2507,2.336,2508,2.336,2509,2.336,2510,2.336,2511,2.336,2512,2.336,2513,2.336,2514,2.336,2515,2.336,2516,3.056,2517,3.581,2518,3.581,2519,3.581,2520,2.336,2521,2.336,2522,2.336,2523,2.336,2524,2.336,2525,2.336,2526,2.336,2527,2.336,2528,2.336,2529,2.336,2530,2.336,2531,3.581,2532,3.056,2533,2.336,2534,3.581,2535,2.336,2536,3.581,2537,2.336,2538,2.336,2539,2.336,2540,3.581,2541,2.336,2542,2.336,2543,3.581,2544,3.581,2545,3.581,2546,3.581,2547,2.336,2548,4.882,2549,3.581,2550,3.581]],["title/components/SendMailToResetPasswordComponent.html",[0,0.14,377,0.516]],["body/components/SendMailToResetPasswordComponent.html",[0,0.216,1,0.505,2,0.65,3,0.165,4,0.142,5,0.575,6,0.575,7,0.575,8,0.142,12,0.575,13,1.229,14,1.229,15,0.696,16,0.622,17,0.792,18,0.606,19,0.792,20,1.366,22,0.792,24,0.895,26,0.142,27,0.367,38,0.895,40,0.367,42,1.805,52,0.442,56,1.744,58,0.382,60,0.266,61,0.022,62,0.299,63,0.26,64,0.266,66,0.563,81,0.266,85,1.492,86,0.44,89,1.669,93,0.404,104,0.293,118,2.112,120,2.178,138,1.578,182,2.249,206,0.85,207,0.743,219,0.364,220,0.775,221,0.293,222,1.284,226,0.505,232,0.142,233,0.052,251,2.769,254,0.481,255,0.976,276,2.178,287,3.694,302,2.769,309,0.575,310,0.792,311,0.792,312,0.575,313,0.976,314,0.575,315,0.792,316,0.505,317,0.54,318,0.792,319,0.505,320,0.792,321,0.505,322,0.575,323,0.54,324,0.792,325,0.505,326,0.575,327,0.505,328,0.906,329,0.505,330,0.575,331,0.505,332,0.54,333,0.505,334,0.472,335,0.575,336,0.54,337,0.65,338,0.54,339,0.321,340,0.505,341,0.575,342,0.505,343,0.575,344,0.505,345,0.575,346,0.505,347,0.575,348,0.505,349,0.575,350,0.505,351,0.54,352,0.575,353,0.505,354,0.96,355,0.575,356,0.505,357,0.54,358,0.575,359,0.505,360,0.575,361,0.54,362,0.796,363,0.575,364,0.505,365,0.575,366,0.505,367,0.575,368,0.54,369,0.575,370,0.505,371,0.575,372,0.505,373,0.575,374,0.575,375,0.505,376,0.575,377,0.929,378,1.051,379,1.144,380,1.127,381,0.575,382,0.54,383,0.575,384,0.505,385,0.575,386,0.54,387,0.54,388,0.409,389,0.505,390,0.472,391,0.575,392,0.575,393,0.014,394,0.014,456,2.572,457,2.572,516,2.011,552,1.633,623,0.917,661,1.767,679,2.401,686,3.273,876,3.273,925,1.869,1012,1.534,1168,3.22,1211,2.377,1212,3.744,1213,2.377,1214,2.178,1217,2.377,1220,3.273,1246,2.377,1276,2.572,1286,3.273,1291,1.633,1324,3.618,1325,2.998,1331,3.273,1354,2.573,1355,3.167,1359,4.665,1362,2.178,1363,4.103,1373,3.698,1375,2.998,1377,3.618,1379,2.963,1410,3.438,1411,3.17,1415,4.079,1416,2.769,1417,2.573,1419,2.998,1422,3.694,1497,2.628,1507,2.178,1563,2.377,1849,4.665,1855,3.618,1863,4.079,1864,3.618,1866,2.377,1868,2.963,1869,2.963,1870,4.079,1871,2.963,1872,2.963,1873,4.079,1874,2.963,1876,3.273,1886,4.079,1887,2.377,1888,4.079,1889,3.618,2024,4.079,2032,4.079,2071,4.079,2145,4.079,2162,4.079,2178,3.273,2272,3.618,2284,3.618,2551,5.448,2552,5.448,2553,2.963,2554,4.779,2555,4.779,2556,5.466,2557,5.889,2558,4.779,2559,3.471,2560,3.471,2561,3.471,2562,3.471,2563,3.471,2564,3.471,2565,3.471,2566,3.471,2567,3.471,2568,2.963,2569,3.471,2570,3.471,2571,5.889,2572,4.779]],["title/injectables/SidenavService.html",[1090,1.047,1158,2.054]],["body/injectables/SidenavService.html",[0,0.249,2,0.727,3,0.196,4,0.168,8,0.168,18,0.886,26,0.168,27,0.41,38,1.255,40,0.41,52,0.55,58,0.432,60,0.41,61,0.022,62,0.292,63,0.325,64,0.41,66,0.815,68,3.166,72,4.28,75,3.882,77,4.048,80,3.392,81,0.456,84,3.107,85,1.857,86,0.678,89,2.416,96,3.662,98,4.073,101,2.199,103,4.502,116,3.476,125,5.237,131,2.687,136,2.575,142,0.649,149,3.354,154,3.662,173,4.073,187,4.048,190,1.977,198,2.516,200,2.811,206,1.016,207,0.989,219,0.224,221,0.347,232,0.168,233,0.062,254,0.538,393,0.016,394,0.016,617,1.931,760,1.706,773,3.354,774,4.048,846,3.503,1010,4.77,1012,2.784,1037,4.073,1090,1.579,1092,1.931,1101,2.223,1115,2.062,1158,3.098,1369,3.107,1461,5.072,1462,4.203,1524,4.048,1527,5.577,1547,4.073,1554,4.073,1556,4.564,1674,5.076,1700,4.564,2443,5.076,2452,5.076,2454,5.467,2456,4.564,2457,4.502,2458,4.502,2459,5.378,2500,5.076,2573,3.503,2574,6.535,2575,5.948,2576,5.948,2577,6.301,2578,5.948,2579,5.347,2580,5.347,2581,4.104,2582,5.347,2583,5.347,2584,5.948,2585,3.953,2586,6.7,2587,5.347,2588,4.104,2589,5.347,2590,5.347,2591,5.347,2592,5.347,2593,4.104,2594,4.104,2595,4.104,2596,4.104,2597,4.104,2598,4.104,2599,4.104,2600,4.104,2601,5.347,2602,5.347,2603,5.347,2604,4.104]],["title/injectables/SnackBarService.html",[1090,1.047,2605,2.427]],["body/injectables/SnackBarService.html",[3,0.238,4,0.204,8,0.204,26,0.204,40,0.464,52,0.461,58,0.374,60,0.464,61,0.022,62,0.33,63,0.288,64,0.519,66,0.829,81,0.383,86,0.633,96,4.957,104,0.595,142,0.544,170,3.918,206,1.011,207,0.679,219,0.33,221,0.422,232,0.204,233,0.075,254,0.655,295,3.918,393,0.018,394,0.018,419,4.578,433,3.729,617,2.349,1090,1.786,1092,2.349,1101,2.705,1115,2.508,1292,2.892,1887,3.419,2605,4.142,2606,5.553,2607,4.26,2608,6.048,2609,4.992,2610,6.763,2611,4.992,2612,6.048,2613,6.048,2614,7.238,2615,4.992,2616,6.135,2617,7.238,2618,6.048,2619,6.048,2620,6.506,2621,4.992,2622,4.992]],["title/injectables/StorageService.html",[1090,1.047,2623,2.223]],["body/injectables/StorageService.html",[3,0.229,4,0.196,8,0.303,26,0.196,40,0.453,42,2.112,58,0.365,60,0.453,61,0.022,62,0.323,63,0.281,64,0.453,66,0.753,81,0.491,86,0.749,106,2.615,115,0.9,142,0.524,219,0.365,221,0.406,232,0.196,233,0.072,239,2.456,254,0.594,255,1.135,260,1.319,264,2.413,268,2.26,393,0.017,394,0.017,617,2.26,679,2.968,680,3.422,871,4.571,872,3.593,873,4.042,897,3.289,898,4.013,899,3.289,900,3.289,921,3.289,922,4.045,925,2.585,927,4.099,928,3.013,1090,1.744,1092,2.26,1115,2.413,1475,3.593,1807,4.045,1895,3.635,1900,3.289,1937,5.052,1966,4.099,1967,4.099,2623,3.705,2624,4.099,2625,5.907,2626,5.46,2627,5.907,2628,4.802,2629,6.397,2630,5.041,2631,4.802,2632,5.041,2633,3.635,2634,5.907,2635,4.802,2636,4.802,2637,4.802,2638,4.802,2639,3.635,2640,4.802,2641,4.802,2642,4.802,2643,4.802,2644,4.802,2645,5.041,2646,4.099,2647,4.802,2648,4.802,2649,4.802,2650,4.802,2651,4.802]],["title/components/TestComponent.html",[0,0.14,384,0.516]],["body/components/TestComponent.html",[0,0.177,1,0.356,2,0.505,3,0.117,4,0.183,5,0.405,6,0.405,7,0.405,8,0.1,12,0.405,13,1.2,14,1.2,15,0.652,16,0.541,17,0.615,18,0.568,19,0.615,20,1.12,21,2.811,22,0.615,24,0.695,26,0.24,27,0.285,32,1.565,33,2.375,36,4.588,37,3.344,38,1.134,39,3.069,40,0.285,42,2.264,47,3.137,52,0.343,54,2.701,56,3.176,57,2.5,58,0.434,60,0.384,61,0.022,62,0.339,63,0.31,64,0.384,66,0.832,80,1.997,81,0.515,87,3.137,92,1.543,93,0.612,98,2.541,101,1.849,102,1.852,104,0.207,106,2.582,110,2.692,111,2.088,115,1.101,119,1.059,126,2.808,131,2.252,133,1.399,138,0.808,142,0.641,156,1.676,182,1.746,190,0.905,198,1.746,206,0.836,207,0.799,210,2.327,218,3.592,219,0.339,220,0.546,221,0.207,222,0.905,223,1.081,226,0.356,229,0.905,230,0.855,231,1.317,232,0.1,233,0.056,235,2.541,237,1.852,239,2.707,242,2.088,254,0.451,255,0.829,257,3.167,260,1,264,2.843,268,2.662,279,1.676,295,2.15,309,0.405,310,0.615,311,0.615,312,0.405,313,0.829,314,0.405,315,0.615,316,0.356,317,0.38,318,0.615,319,0.356,320,0.615,321,0.356,322,0.405,323,0.38,324,0.615,325,0.356,326,0.405,327,0.356,328,0.742,329,0.356,330,0.405,331,0.356,332,0.38,333,0.356,334,0.333,335,0.405,336,0.38,337,0.505,338,0.38,339,0.226,340,0.356,341,0.405,342,0.356,343,0.405,344,0.356,345,0.405,346,0.356,347,0.405,348,0.356,349,0.405,350,0.356,351,0.38,352,0.405,353,0.356,354,1.034,355,0.405,356,0.356,357,0.38,358,0.405,359,0.356,360,0.405,361,0.38,362,0.652,363,0.405,364,0.356,365,0.405,366,0.54,367,0.405,368,0.777,369,0.405,370,0.356,371,0.405,372,0.356,373,0.405,374,0.405,375,0.356,376,0.405,377,0.356,378,0.38,379,0.577,380,0.38,381,0.405,382,0.38,383,0.405,384,0.728,385,0.405,386,0.38,387,0.38,388,0.288,389,0.356,390,0.333,391,0.405,392,0.405,393,0.011,394,0.011,414,1.017,415,2.115,418,2.692,422,1.535,424,1.852,425,2.898,430,1.081,433,2.692,480,3.338,481,1.418,495,2.541,499,1.418,500,1.418,514,2.327,524,2.15,589,2.15,600,2.327,610,1.543,623,0.647,661,2.092,679,2.513,686,3.069,728,3.069,744,2.513,760,1.543,773,1.535,851,3.406,863,4.693,865,1.852,871,1.676,872,1.997,915,3.069,936,1.852,1013,4.268,1033,3.403,1101,1.543,1160,4.268,1168,2.766,1180,3.167,1237,2.808,1242,4.282,1243,3.425,1244,3.167,1246,1.676,1247,3.786,1248,2.541,1276,2.109,1354,2.692,1373,4.015,1449,2.808,1454,1.852,1494,1.852,1577,2.088,1617,1.852,1701,4.268,1779,4.268,1807,2.541,1889,1.852,1902,5.167,2240,4.268,2253,2.088,2255,1.676,2258,3.786,2260,3.167,2262,1.852,2293,4.785,2646,2.088,2652,2.088,2653,2.808,2654,4.481,2655,4.481,2656,3.71,2657,3.71,2658,4.481,2659,4.481,2660,4.481,2661,5.001,2662,5.001,2663,5.001,2664,5.001,2665,5.001,2666,5.001,2667,3.71,2668,3.71,2669,4.481,2670,2.447,2671,2.447,2672,3.71,2673,4.481,2674,3.825,2675,4.481,2676,2.447,2677,5.001,2678,3.167,2679,5.001,2680,3.71,2681,3.71,2682,5.375,2683,2.447,2684,5.657,2685,3.71,2686,2.447,2687,3.71,2688,3.71,2689,2.447,2690,2.447,2691,2.447,2692,2.447,2693,2.447,2694,2.447,2695,3.71,2696,3.71,2697,2.447,2698,3.71,2699,3.71,2700,3.71,2701,2.447,2702,3.71,2703,3.71,2704,3.71,2705,2.447,2706,2.447,2707,2.447,2708,2.447,2709,2.447,2710,2.447,2711,2.447,2712,2.447,2713,2.447,2714,2.447,2715,2.447,2716,2.447,2717,3.71,2718,2.447,2719,4.481,2720,2.447,2721,2.447,2722,2.447,2723,2.447,2724,2.447,2725,2.447,2726,2.447,2727,2.447,2728,4.268,2729,2.447,2730,3.71,2731,2.447,2732,2.447,2733,2.447,2734,2.447,2735,2.447,2736,2.447,2737,2.447,2738,2.447,2739,2.447,2740,5.001,2741,2.447,2742,3.71,2743,3.71,2744,1.852,2745,4.481,2746,2.447,2747,2.447,2748,3.71,2749,2.447,2750,2.447,2751,3.71,2752,2.447,2753,1.852,2754,3.71,2755,2.447,2756,2.447,2757,2.447,2758,2.447,2759,2.447,2760,2.088,2761,2.447,2762,2.447,2763,5.001,2764,5.001,2765,5.657,2766,3.71,2767,3.71,2768,3.71,2769,2.447]],["title/classes/Thread.html",[233,0.053,339,0.328]],["body/classes/Thread.html",[3,0.157,4,0.135,8,0.135,16,0.536,26,0.135,27,0.354,38,0.865,40,0.354,52,0.305,58,0.43,60,0.442,61,0.022,62,0.315,63,0.323,64,0.442,66,0.845,81,0.541,86,0.769,104,0.588,114,2.897,115,1.209,118,2.04,119,1.362,133,2.157,138,2.281,139,2.486,142,0.36,149,4.396,190,1.969,219,0.18,232,0.135,233,0.05,254,0.682,255,1.188,260,1.469,273,3.242,339,0.682,393,0.014,394,0.014,483,2.32,532,2.897,610,1.92,624,1.914,626,2.897,630,3.616,631,2.897,633,2.675,644,3.642,645,4.444,646,2.675,648,3.941,653,3.941,757,3.941,863,5.183,865,4.364,1047,2.675,1101,2.872,1109,3.925,1127,5.506,1188,4.364,1595,4.544,1596,3.941,1608,3.941,1616,3.941,1630,2.819,1664,3.162,2083,2.819,2425,2.5,2585,2.897,2770,2.819,2771,2.897,2772,4.617,2773,4.617,2774,5.765,2775,5.765,2776,5.765,2777,5.765,2778,4.617,2779,3.495,2780,3.303,2781,3.303,2782,3.303,2783,4.617,2784,3.303,2785,5.324,2786,4.617,2787,4.617,2788,6.847,2789,6.909,2790,3.303,2791,4.617,2792,5.324,2793,5.324,2794,4.617,2795,5.765,2796,6.774,2797,3.303,2798,3.303,2799,6.582,2800,3.303,2801,3.303,2802,3.941,2803,3.303,2804,4.617,2805,4.617,2806,3.303,2807,2.819,2808,4.617,2809,5.324,2810,4.617,2811,4.617,2812,5.324,2813,3.303,2814,4.617,2815,3.303,2816,3.303,2817,3.303,2818,3.303,2819,4.617,2820,3.303,2821,4.617,2822,3.303,2823,4.617,2824,3.303,2825,3.303,2826,3.303,2827,3.303,2828,3.303,2829,3.303,2830,3.303,2831,3.303,2832,3.303,2833,3.303,2834,3.303,2835,3.303,2836,3.303,2837,3.303,2838,3.303,2839,3.303,2840,3.303,2841,3.303,2842,3.303,2843,3.303,2844,3.303,2845,3.303,2846,3.303,2847,3.303,2848,4.617,2849,3.303,2850,4.617,2851,3.303,2852,4.617,2853,3.303,2854,3.303,2855,3.303,2856,3.303,2857,4.617,2858,3.303,2859,3.303,2860,4.617,2861,3.303,2862,3.303,2863,5.765,2864,3.303,2865,4.617,2866,3.303,2867,3.303,2868,3.303,2869,3.303,2870,3.303,2871,3.303,2872,3.303,2873,3.303,2874,3.303,2875,3.303,2876,3.303,2877,3.303,2878,3.303,2879,3.303,2880,3.303,2881,3.303,2882,3.303,2883,3.303,2884,3.303]],["title/injectables/ThreadService.html",[831,2.054,1090,1.047]],["body/injectables/ThreadService.html",[3,0.152,4,0.13,8,0.244,16,0.642,26,0.261,27,0.345,31,3.22,38,1.296,40,0.345,52,0.416,55,2.743,58,0.438,60,0.509,61,0.022,62,0.362,63,0.316,64,0.509,66,0.768,81,0.516,86,0.826,89,1.98,92,1.869,93,0.598,101,2.296,104,0.524,115,1.286,134,3.403,142,0.677,149,3.556,169,2.42,175,3.079,197,1.869,198,2.115,206,1.013,207,0.887,219,0.349,221,0.269,225,1.712,229,1.176,230,1.111,232,0.13,233,0.048,254,0.696,255,0.939,260,1.164,337,0.771,339,0.695,388,0.731,390,0.771,393,0.013,394,0.013,418,2.42,425,2.605,433,3.51,490,3.079,530,2.605,559,3.752,617,1.496,644,2.605,679,3.377,680,3.284,719,3.403,722,3.403,760,2.357,770,3.284,831,2.605,851,2.605,872,3.51,873,3.022,889,2.178,897,2.178,898,2.82,899,2.178,900,2.178,921,2.178,922,2.178,923,2.407,925,1.712,960,3.948,997,2.407,1005,2.82,1033,3.751,1047,2.605,1090,1.328,1092,1.496,1101,2.357,1112,5.018,1115,1.598,1197,3.403,1268,2.714,1657,3.752,1664,3.079,1688,3.948,1703,4.838,1731,2.407,1786,4.451,1787,4.451,1788,4.451,1789,4.451,1790,4.451,1791,4.838,1792,3.837,1793,3.837,1794,3.837,1795,3.837,1796,3.837,1798,3.837,1799,5.104,1801,3.837,1802,3.837,1803,3.837,1804,4.838,1805,3.837,1807,3.079,1808,4.451,1809,3.837,1810,3.837,1812,4.291,1813,4.838,1814,3.837,1816,3.837,1818,3.837,1819,3.079,1820,3.837,1822,3.837,1825,3.837,1829,3.837,1831,2.714,1832,2.714,1833,2.714,1834,2.714,2645,3.837,2728,3.837,2753,3.403,2802,3.837,2885,2.714,2886,4.495,2887,4.495,2888,4.495,2889,4.495,2890,3.18,2891,4.495,2892,3.18,2893,3.837,2894,4.495,2895,4.495,2896,3.18,2897,6.209,2898,5.669,2899,4.838,2900,4.495,2901,3.18,2902,3.18,2903,3.18,2904,3.18,2905,3.18,2906,3.18,2907,3.18,2908,3.18,2909,3.18,2910,3.18,2911,3.18,2912,3.18,2913,3.18,2914,4.495,2915,4.495,2916,4.495,2917,4.495,2918,3.18,2919,4.495,2920,4.495,2921,4.495,2922,3.18,2923,3.18,2924,3.18,2925,3.18,2926,3.18,2927,3.18]],["title/classes/User.html",[93,0.299,233,0.053]],["body/classes/User.html",[3,0.129,4,0.111,8,0.275,16,0.738,18,0.344,26,0.195,27,0.308,37,2.015,40,0.308,42,1.942,52,0.251,58,0.428,60,0.479,61,0.022,62,0.374,63,0.332,64,0.528,66,0.874,75,3.408,81,0.505,85,0.848,86,0.808,92,2.735,93,0.623,104,0.619,115,1.327,119,1.245,133,1.95,135,5.02,138,1.942,142,0.707,180,3.987,189,2.836,190,1.483,219,0.307,232,0.111,233,0.041,239,1.667,254,0.725,255,0.873,260,1.254,273,2.823,334,0.8,339,0.615,362,0.395,378,0.623,388,0.716,393,0.012,394,0.012,403,4.91,418,3.025,420,1.887,433,2.836,483,2.015,486,3.166,489,1.364,505,4.452,514,3.918,532,1.703,624,1.573,626,2.516,630,3.304,631,2.516,633,2.324,644,2.324,645,3.304,646,2.324,661,1.483,679,3.138,680,3.052,690,1.86,761,3.423,770,2.324,873,2.324,992,3.423,1021,3.423,1099,3.689,1108,3.61,1109,2.763,1242,4.452,1243,4.367,1275,3.036,1373,3.525,1475,1.462,1573,4.028,1591,5.33,1617,3.61,1642,4.495,1663,3.423,1812,3.987,1819,2.747,2255,4.647,2258,4.827,2483,2.317,2532,3.423,2585,1.703,2623,3.525,2633,2.055,2678,2.317,2771,4.069,2779,3.036,2807,2.317,2928,2.317,2929,5.881,2930,4.011,2931,4.011,2932,4.011,2933,4.011,2934,4.011,2935,4.011,2936,4.011,2937,2.715,2938,2.715,2939,2.715,2940,2.715,2941,2.715,2942,2.715,2943,2.715,2944,4.011,2945,5.267,2946,2.715,2947,4.011,2948,4.011,2949,5.619,2950,2.715,2951,6.486,2952,4.011,2953,2.715,2954,4.011,2955,2.715,2956,4.011,2957,4.011,2958,4.011,2959,2.715,2960,4.011,2961,4.011,2962,6.658,2963,5.619,2964,2.715,2965,4.011,2966,6.084,2967,2.715,2968,5.267,2969,3.423,2970,5.267,2971,4.011,2972,2.715,2973,2.715,2974,2.715,2975,2.317,2976,4.011,2977,3.423,2978,3.423,2979,3.423,2980,4.011,2981,4.011,2982,4.011,2983,2.317,2984,2.715,2985,4.011,2986,2.715,2987,2.715,2988,4.769,2989,4.011,2990,4.011,2991,4.769,2992,4.011,2993,4.011,2994,4.011,2995,2.715,2996,2.715,2997,2.715,2998,2.715,2999,2.715,3000,2.715,3001,5.267,3002,4.011,3003,5.619,3004,5.267,3005,2.715,3006,5.267,3007,2.715,3008,2.715,3009,2.715,3010,4.011,3011,4.011,3012,4.011,3013,2.715,3014,2.715,3015,2.715,3016,2.715,3017,2.715,3018,2.715,3019,2.715,3020,2.715]],["title/classes/UserChat.html",[233,0.053,2771,2.223]],["body/classes/UserChat.html",[3,0.218,4,0.186,8,0.186,26,0.186,27,0.439,38,1.072,40,0.439,52,0.422,58,0.426,60,0.439,61,0.022,62,0.313,63,0.337,64,0.439,66,0.846,81,0.48,86,0.792,93,0.591,115,1.291,119,1.549,133,2.047,138,2.274,142,0.624,189,2.458,190,2.116,193,4.333,219,0.249,232,0.186,233,0.069,254,0.679,260,1.019,339,0.676,388,0.832,393,0.017,394,0.017,483,3.142,486,3.081,489,3.392,532,2.864,624,2.645,626,3.591,630,4.112,631,3.591,633,3.316,644,3.316,645,4.112,646,3.316,650,4.885,655,4.885,1657,4.235,1759,4.885,2425,3.456,2585,2.864,2771,4.435,2779,4.333,2969,4.885,2975,3.896,2983,3.896,3021,5.966,3022,3.896,3023,5.88,3024,5.724,3025,5.724,3026,4.565,3027,4.565,3028,5.724,3029,4.565,3030,4.565,3031,5.724,3032,5.724,3033,3.896,3034,4.565,3035,4.565,3036,4.565,3037,4.565,3038,4.565,3039,4.565,3040,4.565]],["title/interfaces/UserChatJson.html",[3041,2.427,3042,2.683]],["body/interfaces/UserChatJson.html",[3,0.265,4,0.227,8,0.227,26,0.227,27,0.494,61,0.022,63,0.334,66,0.875,232,0.227,388,0.654,393,0.019,394,0.019,489,3.518,1657,4.392,3023,5.976,3033,5.976,3041,3.802,3042,4.876,3043,5.551,3044,4.738,3045,4.738]],["title/injectables/UserRegistrationService.html",[1090,1.047,1920,2.054]],["body/injectables/UserRegistrationService.html",[3,0.165,4,0.142,8,0.29,26,0.142,27,0.366,38,1.225,40,0.366,42,2.232,52,0.441,56,2.399,57,2.889,58,0.427,60,0.474,61,0.022,62,0.369,63,0.304,64,0.474,66,0.814,70,2.767,81,0.538,86,0.746,92,1.441,93,0.629,97,5.945,106,2.649,115,1.023,118,2.11,119,1.732,133,2.136,139,1.866,141,2.374,142,0.696,160,4.031,207,0.649,219,0.349,221,0.293,229,1.282,232,0.142,233,0.052,239,2.447,241,2.767,246,2.624,251,2.009,254,0.621,255,0.905,260,1.314,264,2.399,268,2.247,337,0.8,354,0.742,393,0.014,394,0.014,420,2.247,428,4.076,480,3.435,515,3.27,523,3.615,524,2.767,550,2.624,617,1.631,623,0.916,679,3.206,680,3.697,684,4.83,686,2.374,760,1.985,851,2.009,872,3.52,873,2.767,915,3.27,925,1.866,928,2.175,955,3.27,1033,1.866,1090,1.41,1092,1.631,1115,1.742,1168,3.076,1188,3.615,1247,2.624,1288,3.615,1397,2.959,1398,2.959,1475,2.571,1657,2.175,1895,4.135,1920,2.767,1923,3.27,1937,3.615,2423,2.959,2430,2.959,2466,3.615,2568,2.959,2605,4.031,2616,5.024,2623,4.003,2626,4.076,2630,4.076,2632,4.076,2633,2.624,2639,3.615,2674,2.959,2744,2.624,2753,4.455,3046,5.945,3047,2.959,3048,5.462,3049,5.886,3050,5.886,3051,5.886,3052,5.886,3053,4.775,3054,4.775,3055,5.886,3056,4.775,3057,3.467,3058,4.775,3059,3.467,3060,3.467,3061,3.467,3062,3.467,3063,4.775,3064,3.467,3065,4.775,3066,3.467,3067,3.467,3068,4.775,3069,4.775,3070,4.775,3071,3.467,3072,6.538,3073,4.775,3074,3.467,3075,3.467,3076,3.467,3077,3.467,3078,6.381,3079,3.467,3080,3.467,3081,3.467,3082,3.467,3083,5.462,3084,3.467,3085,3.467,3086,3.467,3087,3.467,3088,3.467,3089,3.467,3090,3.467,3091,3.467,3092,3.467,3093,3.467,3094,3.467,3095,3.467,3096,3.467,3097,3.467,3098,3.467,3099,3.467,3100,3.467,3101,3.467,3102,3.467]],["title/components/ViewProfileComponent.html",[0,0.14,389,0.516]],["body/components/ViewProfileComponent.html",[0,0.231,1,0.578,2,0.711,3,0.189,4,0.162,5,0.658,6,0.658,7,0.658,8,0.162,12,0.658,13,1.239,14,1.239,15,0.761,16,0.651,17,0.867,18,0.663,19,0.867,22,0.867,24,0.98,26,0.162,27,0.401,32,2.319,33,3.162,38,0.744,40,0.401,52,0.575,54,3.452,58,0.385,60,0.305,61,0.022,62,0.32,63,0.279,64,0.305,81,0.305,86,0.503,93,0.442,104,0.335,119,1.658,120,2.503,142,0.433,197,2.175,219,0.34,221,0.335,223,1.754,226,0.578,232,0.162,233,0.06,254,0.589,309,0.658,310,0.867,311,0.867,312,0.658,313,1.031,314,0.658,315,0.867,316,0.578,317,0.617,318,0.867,319,0.578,320,0.867,321,0.578,322,0.658,323,0.617,324,0.867,325,0.578,326,0.658,327,0.578,328,0.97,329,0.578,330,0.658,331,0.578,332,0.617,333,0.578,334,0.54,335,0.658,336,0.617,337,0.711,338,0.617,339,0.367,340,0.578,341,0.658,342,0.578,343,0.658,344,0.578,345,0.658,346,0.578,347,0.658,348,0.578,349,0.658,350,0.578,351,0.617,352,0.658,353,0.578,354,0.617,355,0.658,356,0.578,357,0.617,358,0.658,359,0.578,360,0.658,361,0.617,362,0.985,363,0.658,364,0.578,365,0.658,366,0.578,367,0.658,368,0.617,369,0.658,370,0.578,371,0.658,372,0.578,373,0.658,374,0.658,375,0.578,376,0.658,377,0.578,378,0.617,379,0.91,380,0.617,381,0.658,382,0.617,383,0.658,384,0.578,385,0.658,386,0.617,387,0.617,388,0.467,389,0.905,390,0.92,391,0.658,392,0.658,393,0.015,394,0.015,430,1.754,533,3.282,543,2.49,544,2.49,623,1.049,631,2.49,789,4.055,844,4.994,934,4.465,961,5.517,977,4.008,1010,3.96,1012,2.312,1037,3.583,1158,4.097,1159,5.309,1216,3.005,1251,3.96,1410,2.629,1411,2.816,1462,3.282,1524,3.005,1554,3.583,1925,4.994,2454,4.709,2457,3.96,2458,3.96,2977,4.465,2978,4.465,2979,4.465,3103,5.517,3104,3.388,3105,5.852,3106,5.232,3107,5.232,3108,3.97,3109,5.232,3110,3.97,3111,3.97,3112,3.97,3113,3.97]],["title/coverage.html",[3114,4.138]],["body/coverage.html",[0,0.296,1,0.594,8,0.167,9,4.034,10,3.484,11,4.034,16,0.411,55,1.804,57,1.804,61,0.022,63,0.195,93,0.345,104,0.345,115,0.765,226,0.594,227,3.09,233,0.098,316,0.594,317,0.828,319,0.594,321,0.594,323,0.635,325,0.594,327,0.594,329,0.594,331,0.594,333,0.594,336,0.635,338,0.635,339,0.548,340,0.594,342,0.594,344,0.594,346,0.594,348,0.594,350,0.594,353,0.594,356,0.594,359,0.594,361,0.635,364,0.594,366,0.594,368,0.828,370,0.594,372,0.594,375,0.594,377,0.594,379,0.828,380,0.828,382,0.635,384,0.594,386,0.635,387,0.635,388,0.699,389,0.594,393,0.016,394,0.016,395,3.484,396,3.484,397,4.548,453,3.09,454,3.484,610,2.833,616,3.484,625,3.484,663,3.484,664,3.484,733,4.092,734,4.063,735,3.484,736,3.484,789,2.561,821,3.484,822,5.063,831,2.366,890,3.09,893,3.09,954,3.484,964,4.548,967,4.548,972,3.484,973,3.484,1090,2.082,1091,2.561,1093,3.484,1094,3.484,1117,3.484,1118,3.484,1150,3.484,1158,2.366,1170,2.561,1205,3.484,1207,3.09,1252,3.484,1253,3.484,1273,3.484,1353,3.484,1429,3.484,1507,3.722,1586,3.484,1640,3.484,1641,3.484,1784,3.09,1785,3.484,1835,3.484,1836,3.484,1837,3.484,1843,3.484,1844,3.484,1845,3.484,1891,3.484,1892,3.09,1893,3.484,1900,2.796,1920,2.366,2008,3.484,2064,3.484,2070,3.484,2233,4.548,2234,4.548,2235,3.484,2261,3.484,2262,3.09,2263,3.484,2286,3.484,2316,4.548,2400,3.484,2401,3.484,2402,3.484,2431,3.484,2551,3.484,2552,3.484,2553,3.484,2573,3.484,2585,2.561,2605,2.796,2606,3.484,2607,3.484,2623,2.561,2624,3.484,2652,3.484,2770,3.484,2771,2.561,2885,3.484,2928,3.484,3021,3.484,3022,3.484,3041,2.796,3042,3.09,3044,3.484,3045,3.484,3046,3.484,3047,3.484,3103,3.484,3104,3.484,3114,3.484,3115,4.083,3116,4.083,3117,4.083,3118,4.083,3119,3.484,3120,6.289,3121,3.484,3122,6.289,3123,3.484,3124,3.484,3125,3.484,3126,3.484,3127,4.083,3128,4.083,3129,4.083,3130,5.329,3131,4.083,3132,4.083,3133,5.329,3134,4.083,3135,4.083,3136,4.083,3137,4.083,3138,5.329,3139,4.083,3140,4.083,3141,4.083,3142,4.083,3143,5.329,3144,4.083,3145,4.083,3146,4.083,3147,4.083,3148,4.083,3149,5.329,3150,5.329,3151,4.083,3152,4.083,3153,4.083,3154,4.083,3155,4.083,3156,5.329,3157,4.083,3158,6.289,3159,4.083,3160,5.329,3161,4.083,3162,5.932,3163,5.329,3164,4.083,3165,4.083,3166,4.083,3167,4.083,3168,4.083,3169,4.083,3170,5.329,3171,5.329,3172,4.083,3173,4.083,3174,4.083,3175,5.329,3176,4.083,3177,4.083,3178,4.083,3179,4.083,3180,4.083,3181,4.083,3182,4.083,3183,4.083,3184,4.083,3185,4.083,3186,4.083,3187,4.083,3188,4.083,3189,4.083,3190,4.083,3191,4.083,3192,4.083,3193,4.083,3194,4.083,3195,4.083,3196,4.083,3197,4.083,3198,4.083,3199,4.083,3200,4.083,3201,4.083,3202,4.083,3203,4.083,3204,4.083,3205,4.083,3206,4.083,3207,4.083,3208,3.09,3209,3.09,3210,4.083,3211,4.083]],["title/dependencies.html",[3212,2.236,3213,3.641]],["body/dependencies.html",[61,0.022,220,1.237,221,0.468,222,2.048,230,1.935,334,0.753,393,0.019,394,0.019,623,1.464,1119,4.728,1143,4.728,1214,3.475,1289,5.491,1459,4.728,3213,4.728,3214,7.386,3215,5.54,3216,5.54,3217,5.54,3218,4.728,3219,5.54,3220,6.433,3221,5.54,3222,5.54,3223,5.54,3224,5.54,3225,5.54,3226,5.54,3227,5.54,3228,5.54]],["title/index.html",[26,0.121,3229,2.955,3230,2.955]],["body/index.html",[0,0.26,4,0.209,15,0.744,61,0.02,62,0.279,87,3.208,114,3.208,115,0.958,232,0.209,255,0.847,351,0.795,393,0.018,394,0.018,425,2.963,480,3.539,496,3.555,499,2.963,621,3.502,1275,4.645,1369,3.871,1515,5.359,1864,3.871,1924,4.364,2230,3.871,2466,4.977,2516,5.237,2653,4.645,2744,3.871,2760,4.364,2893,4.364,2899,4.364,3208,3.871,3209,3.871,3212,3.871,3218,4.364,3231,6.136,3232,5.114,3233,6.574,3234,6.574,3235,5.114,3236,5.114,3237,5.114,3238,4.364,3239,5.114,3240,5.114,3241,5.114,3242,4.364,3243,5.114,3244,4.364,3245,5.114,3246,4.364,3247,5.114,3248,4.364,3249,5.114,3250,4.364,3251,5.114,3252,4.364,3253,5.114,3254,5.114,3255,6.136,3256,6.973,3257,7.159,3258,5.114,3259,5.114,3260,5.114,3261,5.114,3262,5.114,3263,5.114,3264,5.114,3265,6.574,3266,5.114,3267,6.818,3268,5.114,3269,5.114,3270,5.114,3271,5.114,3272,6.136,3273,6.136,3274,6.818,3275,6.136,3276,5.114,3277,5.114,3278,5.114,3279,5.114,3280,6.136,3281,5.114,3282,5.114,3283,5.114,3284,6.574,3285,5.114,3286,5.114,3287,3.871]],["title/modules.html",[3288,4.138]],["body/modules.html",[61,0.02,393,0.02,394,0.02,3288,4.998]],["title/overview.html",[3287,3.67]],["body/overview.html",[2,0.789,61,0.019,393,0.019,394,0.019,624,3.364,661,2.147,1092,2.732,1298,4.955,2347,4.955,3041,3.976,3287,4.395,3289,5.806]],["title/properties.html",[27,0.327,3212,2.236]],["body/properties.html",[27,0.448,61,0.02,393,0.02,394,0.02,2230,4.418,3290,5.837]],["title/miscellaneous/variables.html",[3291,2.522,3292,3.641]],["body/miscellaneous/variables.html",[18,0.618,26,0.199,57,2.156,61,0.022,63,0.32,66,0.575,98,3.342,132,2.627,133,1.524,206,1.07,207,0.913,255,1.067,260,1.498,357,0.759,393,0.018,394,0.018,480,3.211,503,3.342,524,2.827,691,3.061,898,3.061,1012,2.156,1168,2.296,1377,3.694,1453,3.342,1900,4.085,2354,4.165,2639,3.694,2653,3.694,3119,4.165,3121,5.091,3123,4.165,3124,5.091,3125,4.165,3126,5.091,3208,3.694,3209,4.515,3238,4.165,3242,4.165,3244,4.165,3246,4.165,3248,4.165,3250,4.165,3252,4.165,3291,4.165,3292,4.165,3293,4.88,3294,4.88,3295,4.88,3296,4.88,3297,4.88,3298,4.88,3299,4.88,3300,4.88,3301,4.88,3302,4.88,3303,4.88,3304,4.88,3305,5.965,3306,4.88,3307,4.88,3308,4.88,3309,4.88,3310,4.88,3311,4.88,3312,4.88,3313,4.88,3314,4.88,3315,4.88,3316,4.88,3317,4.88,3318,4.88,3319,7.003,3320,7.212,3321,4.88,3322,4.88,3323,4.88,3324,4.88,3325,4.88,3326,4.88,3327,4.88,3328,4.88,3329,4.88,3330,4.88,3331,4.88,3332,4.88,3333,4.88,3334,4.88,3335,4.88,3336,4.88,3337,4.88,3338,4.88,3339,4.88,3340,4.88,3341,4.88,3342,4.88,3343,4.88,3344,4.88,3345,4.88,3346,4.88,3347,4.88,3348,4.88,3349,4.88,3350,4.88,3351,4.88,3352,4.88,3353,4.88,3354,6.442,3355,4.88,3356,4.88,3357,4.88,3358,4.88,3359,4.88]]],"invertedIndex":[["",{"_index":61,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":610,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"coverage.html":{}}}],["0.0.0",{"_index":3290,"title":{},"body":{"properties.html":{}}}],["0.12",{"_index":2380,"title":{},"body":{"components/RegisterComponent.html":{}}}],["0.14.3",{"_index":3228,"title":{},"body":{"dependencies.html":{}}}],["0.38",{"_index":2379,"title":{},"body":{"components/RegisterComponent.html":{}}}],["0.5",{"_index":1534,"title":{},"body":{"components/LogoComponent.html":{}}}],["0.6",{"_index":1535,"title":{},"body":{"components/LogoComponent.html":{}}}],["0/1",{"_index":3122,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3118,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3185,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3169,"title":{},"body":{"coverage.html":{}}}],["061209269386e",{"_index":1315,"title":{},"body":{"components/ImprintComponent.html":{}}}],["09",{"_index":2232,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["0px",{"_index":1503,"title":{},"body":{"components/LogoComponent.html":{}}}],["1",{"_index":661,"title":{},"body":{"classes/Channel.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{},"overview.html":{}}}],["1\">und",{"_index":1775,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["1/1",{"_index":3127,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3200,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3197,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3165,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":3142,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2347,"title":{},"body":{"components/RegisterComponent.html":{},"overview.html":{}}}],["10/14",{"_index":3180,"title":{},"body":{"coverage.html":{}}}],["10/18",{"_index":3150,"title":{},"body":{"coverage.html":{}}}],["10/22",{"_index":3163,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":2316,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["1000",{"_index":1887,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SnackBarService.html":{}}}],["100px",{"_index":2362,"title":{},"body":{"components/RegisterComponent.html":{}}}],["100vh",{"_index":1559,"title":{},"body":{"components/LogoComponent.html":{}}}],["100vw",{"_index":1560,"title":{},"body":{"components/LogoComponent.html":{}}}],["11/24",{"_index":3184,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3141,"title":{},"body":{"coverage.html":{}}}],["12/20",{"_index":3139,"title":{},"body":{"coverage.html":{}}}],["12/26",{"_index":3152,"title":{},"body":{"coverage.html":{}}}],["12/29",{"_index":3137,"title":{},"body":{"coverage.html":{}}}],["1200",{"_index":1528,"title":{},"body":{"components/LogoComponent.html":{}}}],["123456",{"_index":1392,"title":{},"body":{"components/LoginComponent.html":{}}}],["12px",{"_index":2375,"title":{},"body":{"components/RegisterComponent.html":{}}}],["13/25",{"_index":3146,"title":{},"body":{"coverage.html":{}}}],["14px",{"_index":2384,"title":{},"body":{"components/RegisterComponent.html":{}}}],["15",{"_index":2045,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["15/23",{"_index":3174,"title":{},"body":{"coverage.html":{}}}],["15/24",{"_index":3136,"title":{},"body":{"coverage.html":{}}}],["1500",{"_index":3093,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["15px",{"_index":2399,"title":{},"body":{"components/RegisterComponent.html":{}}}],["16",{"_index":2049,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["16px",{"_index":2336,"title":{},"body":{"components/RegisterComponent.html":{}}}],["17",{"_index":2052,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["17px",{"_index":2398,"title":{},"body":{"components/RegisterComponent.html":{}}}],["18",{"_index":2061,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["18.0.0",{"_index":3214,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":3218,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["18/32",{"_index":3155,"title":{},"body":{"coverage.html":{}}}],["187px",{"_index":1483,"title":{},"body":{"components/LogoComponent.html":{}}}],["18px",{"_index":2331,"title":{},"body":{"components/RegisterComponent.html":{}}}],["19/50",{"_index":3132,"title":{},"body":{"coverage.html":{}}}],["1:554696271521:web:3320570cc3b6bf304032e0",{"_index":3359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1a4f",{"_index":3337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1px",{"_index":2371,"title":{},"body":{"components/RegisterComponent.html":{}}}],["2",{"_index":1779,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/TestComponent.html":{}}}],["2.3.0",{"_index":3226,"title":{},"body":{"dependencies.html":{}}}],["2.513",{"_index":1526,"title":{},"body":{"components/LogoComponent.html":{}}}],["2/3",{"_index":3202,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3140,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":3189,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":3129,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":2070,"title":{},"body":{"components/PrivacyComponent.html":{},"coverage.html":{}}}],["2020",{"_index":2231,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["20px",{"_index":2359,"title":{},"body":{"components/RegisterComponent.html":{}}}],["21",{"_index":2064,"title":{},"body":{"components/PrivacyComponent.html":{},"coverage.html":{}}}],["22/25",{"_index":3192,"title":{},"body":{"coverage.html":{}}}],["22/43",{"_index":3148,"title":{},"body":{"coverage.html":{}}}],["22/52",{"_index":3161,"title":{},"body":{"coverage.html":{}}}],["22px",{"_index":2386,"title":{},"body":{"components/RegisterComponent.html":{}}}],["24px",{"_index":2363,"title":{},"body":{"components/RegisterComponent.html":{}}}],["25",{"_index":3196,"title":{},"body":{"coverage.html":{}}}],["25px",{"_index":2376,"title":{},"body":{"components/RegisterComponent.html":{}}}],["28",{"_index":3128,"title":{},"body":{"coverage.html":{}}}],["29",{"_index":3206,"title":{},"body":{"coverage.html":{}}}],["29fd",{"_index":3332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":295,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{}}}],["3/10",{"_index":3199,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3168,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3188,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":3183,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":3171,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2233,"title":{},"body":{"components/PrivacyComponent.html":{},"coverage.html":{}}}],["30px",{"_index":2329,"title":{},"body":{"components/RegisterComponent.html":{}}}],["313ae5",{"_index":1565,"title":{},"body":{"components/LogoComponent.html":{}}}],["32px",{"_index":1512,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["33",{"_index":3158,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":3289,"title":{},"body":{"overview.html":{}}}],["354",{"_index":1490,"title":{},"body":{"components/LogoComponent.html":{}}}],["36",{"_index":1320,"title":{},"body":{"components/ImprintComponent.html":{}}}],["37",{"_index":3170,"title":{},"body":{"coverage.html":{}}}],["38",{"_index":3131,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1536,"title":{},"body":{"components/LogoComponent.html":{},"components/PrivacyComponent.html":{}}}],["4/13",{"_index":3178,"title":{},"body":{"coverage.html":{}}}],["4/19",{"_index":3117,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3167,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":3182,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":3176,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2396,"title":{},"body":{"components/RegisterComponent.html":{}}}],["400",{"_index":2361,"title":{},"body":{"components/RegisterComponent.html":{}}}],["40px",{"_index":2337,"title":{},"body":{"components/RegisterComponent.html":{}}}],["41",{"_index":3133,"title":{},"body":{"coverage.html":{}}}],["41/53",{"_index":3195,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":3160,"title":{},"body":{"coverage.html":{}}}],["42526e",{"_index":2387,"title":{},"body":{"components/RegisterComponent.html":{}}}],["42e7",{"_index":3338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["435a6edf761a",{"_index":3335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["44",{"_index":3175,"title":{},"body":{"coverage.html":{}}}],["444df2",{"_index":2357,"title":{},"body":{"components/RegisterComponent.html":{}}}],["45",{"_index":3162,"title":{},"body":{"coverage.html":{}}}],["450px",{"_index":2394,"title":{},"body":{"components/RegisterComponent.html":{}}}],["4591",{"_index":3323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["46",{"_index":3151,"title":{},"body":{"coverage.html":{}}}],["46px",{"_index":2353,"title":{},"body":{"components/RegisterComponent.html":{}}}],["470px",{"_index":1488,"title":{},"body":{"components/LogoComponent.html":{}}}],["47c4",{"_index":3343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["48px",{"_index":2332,"title":{},"body":{"components/RegisterComponent.html":{}}}],["49f6",{"_index":3327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a",{"_index":3356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com",{"_index":3357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_1.png?alt=media&token=76a558f3",{"_index":3321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_2.png?alt=media&token=c11604f5",{"_index":3326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_3.png?alt=media&token=8e57bc9d",{"_index":3331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_4.png?alt=media&token=b088c163",{"_index":3336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_5.png?alt=media&token=27617a09",{"_index":3341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.appspot.com/o/avatar_6.png?alt=media&token=c4962f78",{"_index":3346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4a31a.firebaseapp.com",{"_index":3355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4d28",{"_index":3348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e99",{"_index":3333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4faf",{"_index":3328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1298,"title":{},"body":{"components/ImprintComponent.html":{},"overview.html":{}}}],["5/10",{"_index":3177,"title":{},"body":{"coverage.html":{}}}],["5/15",{"_index":3198,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3187,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1507,"title":{},"body":{"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"coverage.html":{}}}],["500",{"_index":276,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["500kb",{"_index":2006,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["51",{"_index":3147,"title":{},"body":{"coverage.html":{}}}],["52",{"_index":3145,"title":{},"body":{"coverage.html":{}}}],["535af1",{"_index":2373,"title":{},"body":{"components/RegisterComponent.html":{}}}],["55",{"_index":3149,"title":{},"body":{"coverage.html":{}}}],["554696271521",{"_index":3358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["55px",{"_index":2317,"title":{},"body":{"components/RegisterComponent.html":{}}}],["56",{"_index":3154,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":3181,"title":{},"body":{"coverage.html":{}}}],["5e1795c67e12",{"_index":3330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1027,"title":{},"body":{"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["6.1.0",{"_index":3223,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":3138,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":253,"title":{},"body":{"components/AddChannelComponent.html":{},"components/LogoComponent.html":{}}}],["606px",{"_index":2323,"title":{},"body":{"components/RegisterComponent.html":{}}}],["62",{"_index":3135,"title":{},"body":{"coverage.html":{}}}],["65",{"_index":3173,"title":{},"body":{"coverage.html":{}}}],["650",{"_index":2457,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["651",{"_index":2502,"title":{},"body":{"components/SearchComponent.html":{}}}],["65329",{"_index":2023,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["66",{"_index":3201,"title":{},"body":{"coverage.html":{}}}],["665329",{"_index":1311,"title":{},"body":{"components/ImprintComponent.html":{}}}],["686868",{"_index":2366,"title":{},"body":{"components/RegisterComponent.html":{}}}],["689px",{"_index":1579,"title":{},"body":{"components/LogoComponent.html":{}}}],["6px",{"_index":2385,"title":{},"body":{"components/RegisterComponent.html":{}}}],["7.8.0",{"_index":3224,"title":{},"body":{"dependencies.html":{}}}],["7/17",{"_index":3134,"title":{},"body":{"coverage.html":{}}}],["7/24",{"_index":3207,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":2356,"title":{},"body":{"components/RegisterComponent.html":{}}}],["70vh",{"_index":2326,"title":{},"body":{"components/RegisterComponent.html":{}}}],["71",{"_index":3179,"title":{},"body":{"coverage.html":{}}}],["7364",{"_index":3322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":3204,"title":{},"body":{"coverage.html":{}}}],["75px",{"_index":2319,"title":{},"body":{"components/RegisterComponent.html":{}}}],["769px",{"_index":2324,"title":{},"body":{"components/RegisterComponent.html":{}}}],["77",{"_index":3194,"title":{},"body":{"coverage.html":{}}}],["787df3",{"_index":1564,"title":{},"body":{"components/LogoComponent.html":{}}}],["797df36e",{"_index":2340,"title":{},"body":{"components/RegisterComponent.html":{}}}],["797ef3",{"_index":2388,"title":{},"body":{"components/RegisterComponent.html":{}}}],["8/18",{"_index":3203,"title":{},"body":{"coverage.html":{}}}],["8/19",{"_index":3164,"title":{},"body":{"coverage.html":{}}}],["8/24",{"_index":3159,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3166,"title":{},"body":{"coverage.html":{}}}],["800",{"_index":1522,"title":{},"body":{"components/LogoComponent.html":{}}}],["80vh",{"_index":2397,"title":{},"body":{"components/RegisterComponent.html":{}}}],["81e1",{"_index":3339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["83",{"_index":3186,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3191,"title":{},"body":{"coverage.html":{}}}],["8b0d",{"_index":3324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.2.0",{"_index":3221,"title":{},"body":{"dependencies.html":{}}}],["9/12",{"_index":3205,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":2322,"title":{},"body":{"components/RegisterComponent.html":{}}}],["9084a608438d",{"_index":3325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["956f",{"_index":3342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["964b",{"_index":3349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["99",{"_index":2338,"title":{},"body":{"components/RegisterComponent.html":{}}}],["_snackbar",{"_index":2612,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["_userdata",{"_index":3048,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["a.timestamp",{"_index":2880,"title":{},"body":{"classes/Thread.html":{}}}],["abbrechen",{"_index":947,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["abgeschlossen",{"_index":2069,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["above",{"_index":3308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abrufen",{"_index":249,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["abs",{"_index":2121,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["absolute",{"_index":1584,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["access",{"_index":2497,"title":{},"body":{"components/SearchComponent.html":{}}}],["accordingly",{"_index":1002,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["account",{"_index":1403,"title":{},"body":{"components/LoginComponent.html":{}}}],["action",{"_index":96,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ProfileViewComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{}}}],["actioncode",{"_index":1884,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["actions",{"_index":126,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/TestComponent.html":{}}}],["activatedroute",{"_index":1853,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["activation",{"_index":1011,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["active",{"_index":1183,"title":{},"body":{"components/HeaderComponent.html":{}}}],["activemind",{"_index":1348,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["actual",{"_index":2765,"title":{},"body":{"components/TestComponent.html":{}}}],["actual_component",{"_index":392,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["add",{"_index":15,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"index.html":{}}}],["addchannelcomponent",{"_index":1,"title":{"components/AddChannelComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["addchanneltoallusers",{"_index":525,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["addchanneltospecificusers",{"_index":471,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["added",{"_index":193,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/UserChat.html":{}}}],["addemoji",{"_index":1123,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["addemoji(event",{"_index":1135,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["addimgtomessagecomponent",{"_index":316,"title":{"components/AddImgToMessageComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["adding",{"_index":689,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/MessageReactionComponent.html":{}}}],["addition",{"_index":677,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/EmojiMartComponent.html":{}}}],["additionmethod",{"_index":715,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["additionmethod.subscribe",{"_index":721,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["addparticipant",{"_index":628,"title":{},"body":{"classes/Channel.html":{}}}],["addparticipant(user",{"_index":638,"title":{},"body":{"classes/Channel.html":{}}}],["addreaction",{"_index":2930,"title":{},"body":{"classes/User.html":{}}}],["addreaction(message",{"_index":2944,"title":{},"body":{"classes/User.html":{}}}],["addreply",{"_index":2931,"title":{},"body":{"classes/User.html":{}}}],["addreply(message",{"_index":2948,"title":{},"body":{"classes/User.html":{}}}],["address",{"_index":2678,"title":{},"body":{"components/TestComponent.html":{},"classes/User.html":{}}}],["adds",{"_index":486,"title":{},"body":{"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/MessageReactionComponent.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["addthread",{"_index":3024,"title":{},"body":{"classes/UserChat.html":{}}}],["addthread(thread",{"_index":3028,"title":{},"body":{"classes/UserChat.html":{}}}],["adduserscomponent",{"_index":319,"title":{"components/AddUsersComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["adjust",{"_index":2594,"title":{},"body":{"injectables/SidenavService.html":{}}}],["adjustediconwidth",{"_index":1537,"title":{},"body":{"components/LogoComponent.html":{}}}],["adjustediconwidth}px",{"_index":1540,"title":{},"body":{"components/LogoComponent.html":{}}}],["adjustedtextwidth",{"_index":1538,"title":{},"body":{"components/LogoComponent.html":{}}}],["adjustedtextwidth}px",{"_index":1539,"title":{},"body":{"components/LogoComponent.html":{}}}],["adjustedwidth",{"_index":1533,"title":{},"body":{"components/LogoComponent.html":{}}}],["adjustments",{"_index":2592,"title":{},"body":{"injectables/SidenavService.html":{}}}],["adress",{"_index":2763,"title":{},"body":{"components/TestComponent.html":{}}}],["adresse",{"_index":1411,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/ViewProfileComponent.html":{}}}],["aece",{"_index":3334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ag",{"_index":1349,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["again",{"_index":1713,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["aizasyccr",{"_index":3352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aktion",{"_index":2280,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["aktiv",{"_index":2256,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["aktuellen",{"_index":2157,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["align",{"_index":1574,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["alle",{"_index":723,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["allein",{"_index":2142,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["allows",{"_index":1020,"title":{},"body":{"components/EditChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["allusers",{"_index":465,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["already",{"_index":70,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["als",{"_index":2005,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{}}}],["alt",{"_index":941,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["alternative",{"_index":1326,"title":{},"body":{"components/ImprintComponent.html":{}}}],["anderen",{"_index":305,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["anforderungen",{"_index":2208,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angaben",{"_index":1296,"title":{},"body":{"components/ImprintComponent.html":{}}}],["angebotenen",{"_index":2149,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angegebenen",{"_index":2028,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["angemeldet",{"_index":245,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["angular",{"_index":3233,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1214,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"dependencies.html":{}}}],["angular/cdk",{"_index":3215,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":220,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3216,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":221,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":3217,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":1379,"title":{},"body":{"components/LoginComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["angular/fire/firestore",{"_index":551,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/LoginComponent.html":{}}}],["angular/fire/storage",{"_index":900,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["angular/forms",{"_index":222,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":3219,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":557,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["angular/material/button",{"_index":556,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["angular/material/card",{"_index":1291,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["angular/material/checkbox",{"_index":1965,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/chips",{"_index":553,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["angular/material/dialog",{"_index":223,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["angular/material/form",{"_index":554,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{}}}],["angular/material/icon",{"_index":552,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["angular/material/input",{"_index":1055,"title":{},"body":{"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{}}}],["angular/material/menu",{"_index":435,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{}}}],["angular/material/radio",{"_index":545,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["angular/material/select",{"_index":558,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["angular/material/snack",{"_index":2621,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["angular/platform",{"_index":3220,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":623,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"dependencies.html":{}}}],["animate",{"_index":1211,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["animate('0.1s",{"_index":1871,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["animate('0.3s",{"_index":1874,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["animate('0ms",{"_index":1225,"title":{},"body":{"components/HeaderComponent.html":{}}}],["animate('1s",{"_index":1516,"title":{},"body":{"components/LogoComponent.html":{}}}],["animate('400ms",{"_index":1222,"title":{},"body":{"components/HeaderComponent.html":{}}}],["animate(2000",{"_index":1498,"title":{},"body":{"components/LogoComponent.html":{}}}],["animate(400",{"_index":1501,"title":{},"body":{"components/LogoComponent.html":{}}}],["animating",{"_index":1520,"title":{},"body":{"components/LogoComponent.html":{}}}],["animation",{"_index":1467,"title":{},"body":{"components/LogoComponent.html":{}}}],["animations",{"_index":1217,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["anmelden",{"_index":1425,"title":{},"body":{"components/LoginComponent.html":{}}}],["anmeldung",{"_index":1407,"title":{},"body":{"components/LoginComponent.html":{}}}],["anonymous",{"_index":1399,"title":{},"body":{"components/LoginComponent.html":{}}}],["anonymoususerlogin",{"_index":1360,"title":{},"body":{"components/LoginComponent.html":{}}}],["another",{"_index":2969,"title":{},"body":{"classes/User.html":{},"classes/UserChat.html":{}}}],["anschrift",{"_index":2095,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["antwort",{"_index":950,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["antworten",{"_index":952,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["anzupassen",{"_index":2204,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["api_key",{"_index":3249,"title":{},"body":{"index.html":{}}}],["apikey",{"_index":3248,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":14,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["app.component.html",{"_index":619,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":620,"title":{},"body":{"components/AppComponent.html":{}}}],["app_id",{"_index":3245,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":321,"title":{"components/AppComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":3121,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appid",{"_index":3244,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":1275,"title":{},"body":{"components/ImprintComponent.html":{},"classes/User.html":{},"index.html":{}}}],["applicationconfig",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applies",{"_index":2474,"title":{},"body":{"components/SearchComponent.html":{}}}],["appropriate",{"_index":2460,"title":{},"body":{"components/SearchComponent.html":{}}}],["april",{"_index":2839,"title":{},"body":{"classes/Thread.html":{}}}],["arbeit",{"_index":1413,"title":{},"body":{"components/LoginComponent.html":{}}}],["arguments",{"_index":1454,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["array",{"_index":132,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{},"miscellaneous/variables.html":{}}}],["array.filter((participant",{"_index":809,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["arraybuffer",{"_index":1958,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["arrayunion",{"_index":549,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["arrayunion(docsnapshot.id",{"_index":711,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["arrayunion(this.data.channelid",{"_index":581,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["arrayunion(userid",{"_index":583,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["arrow",{"_index":2334,"title":{},"body":{"components/RegisterComponent.html":{}}}],["art",{"_index":2044,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["artifacts",{"_index":3268,"title":{},"body":{"index.html":{}}}],["assets/img/dabubble_header_logo.png",{"_index":1481,"title":{},"body":{"components/LogoComponent.html":{}}}],["assets/img/logo",{"_index":1485,"title":{},"body":{"components/LogoComponent.html":{}}}],["assets/img/profile",{"_index":1950,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["assigned",{"_index":2476,"title":{},"body":{"components/SearchComponent.html":{}}}],["assigningcomponent",{"_index":1124,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["assigns",{"_index":2250,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["associated",{"_index":530,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/EmojiCommunicationService.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["assumed",{"_index":2485,"title":{},"body":{"components/SearchComponent.html":{}}}],["assumes",{"_index":1039,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["async",{"_index":42,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["asynchronously",{"_index":94,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["attempts",{"_index":113,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["auch",{"_index":2177,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auf",{"_index":2099,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufgrund",{"_index":2056,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufsichtsbehörde",{"_index":2080,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aufsichtsbehörden",{"_index":2092,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auftragsverarbeiter",{"_index":2129,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["august",{"_index":2843,"title":{},"body":{"classes/Thread.html":{}}}],["aus",{"_index":1996,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{}}}],["auskunft",{"_index":2037,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["aussicht",{"_index":1310,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["ausüben",{"_index":2036,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ausübung",{"_index":2198,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["auth",{"_index":56,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["auth.service",{"_index":3076,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["auth/email",{"_index":3090,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["auth_domain",{"_index":3251,"title":{},"body":{"index.html":{}}}],["authdomain",{"_index":3250,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["authenticate",{"_index":368,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["authenticated",{"_index":2483,"title":{},"body":{"components/SearchComponent.html":{},"classes/User.html":{}}}],["authentication",{"_index":91,"title":{},"body":{"components/AddChannelComponent.html":{},"components/LoginComponent.html":{}}}],["authguard",{"_index":3124,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authid",{"_index":137,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["author",{"_index":857,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["authservice",{"_index":57,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice.isauthenticated().pipe",{"_index":3314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authuserid",{"_index":135,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/User.html":{}}}],["auto",{"_index":1583,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["autocompletetrigger",{"_index":2434,"title":{},"body":{"components/SearchComponent.html":{}}}],["automatically",{"_index":3261,"title":{},"body":{"index.html":{}}}],["available",{"_index":76,"title":{},"body":{"components/AddChannelComponent.html":{},"components/SearchComponent.html":{}}}],["avatar",{"_index":503,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"miscellaneous/variables.html":{}}}],["avatars",{"_index":1967,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"injectables/StorageService.html":{}}}],["avatars.ts",{"_index":3126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["avatarurl",{"_index":1943,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["avoid",{"_index":165,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["await",{"_index":239,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["away",{"_index":2258,"title":{},"body":{"components/ProfileViewComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["b",{"_index":2083,"title":{},"body":{"components/PrivacyComponent.html":{},"classes/Thread.html":{}}}],["b.timestamp",{"_index":2881,"title":{},"body":{"classes/Thread.html":{}}}],["b7c7",{"_index":3329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b96a",{"_index":3344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["back",{"_index":1286,"title":{},"body":{"components/ImprintComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["background",{"_index":1551,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["banner",{"_index":1863,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["bannerstate",{"_index":1849,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["bar",{"_index":2617,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["bar.service",{"_index":3077,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["bar.service.ts",{"_index":2607,"title":{},"body":{"injectables/SnackBarService.html":{},"coverage.html":{}}}],["bar.service.ts:17",{"_index":2615,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["bar.service.ts:7",{"_index":2611,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["based",{"_index":116,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["basis",{"_index":2143,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["batch",{"_index":572,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["batch.update(channeldocref",{"_index":582,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["batch.update(userdocref",{"_index":580,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["beaa11df5ccb",{"_index":3340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearbeiten",{"_index":935,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/ProfileViewComponent.html":{}}}],["bedd411f6da1",{"_index":3345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":422,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/TestComponent.html":{}}}],["behalten",{"_index":2203,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["behaviorsubject",{"_index":1268,"title":{},"body":{"injectables/HeaderProfileService.html":{},"injectables/ThreadService.html":{}}}],["behaviorsubject(false",{"_index":1261,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["behörde",{"_index":2091,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bei",{"_index":1405,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyComponent.html":{}}}],["beim",{"_index":248,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["beispiel",{"_index":292,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["below",{"_index":3238,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["benutzer",{"_index":244,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["benötigen",{"_index":2102,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ber",{"_index":1324,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["bereich",{"_index":2094,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bereit",{"_index":1334,"title":{},"body":{"components/ImprintComponent.html":{}}}],["bereithalten",{"_index":2111,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bereits",{"_index":300,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["bereitstellung",{"_index":2138,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["berichtigung",{"_index":2046,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bermittelt",{"_index":2106,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bertragung",{"_index":2155,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["berwiegen",{"_index":2195,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["beschreibung",{"_index":306,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["beschwerde",{"_index":2079,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["besonderen",{"_index":2168,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["besten",{"_index":285,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["bestimmte",{"_index":727,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["bestimmter",{"_index":2112,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["bestimmung",{"_index":2179,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["besuch",{"_index":2217,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betreffender",{"_index":2171,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betreiber",{"_index":1330,"title":{},"body":{"components/ImprintComponent.html":{}}}],["betrieb",{"_index":2127,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["betroffenenrechte",{"_index":2025,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["between",{"_index":2971,"title":{},"body":{"classes/User.html":{}}}],["bild",{"_index":2000,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["bitte",{"_index":302,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["black",{"_index":1548,"title":{},"body":{"components/LogoComponent.html":{}}}],["black.png",{"_index":1545,"title":{},"body":{"components/LogoComponent.html":{}}}],["boolean",{"_index":89,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/ThreadService.html":{}}}],["border",{"_index":2327,"title":{},"body":{"components/RegisterComponent.html":{}}}],["both",{"_index":1022,"title":{},"body":{"components/EditChannelComponent.html":{},"injectables/HeaderProfileService.html":{}}}],["bottom",{"_index":1563,"title":{},"body":{"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["box",{"_index":2364,"title":{},"body":{"components/RegisterComponent.html":{}}}],["boxes",{"_index":199,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["browser",{"_index":1289,"title":{},"body":{"components/ImprintComponent.html":{},"dependencies.html":{}}}],["bsp",{"_index":2309,"title":{},"body":{"components/RegisterComponent.html":{}}}],["btn",{"_index":307,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/RegisterComponent.html":{}}}],["bubble",{"_index":3320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":3267,"title":{},"body":{"index.html":{}}}],["builder",{"_index":1855,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["bundeslands",{"_index":2086,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["buttontext",{"_index":1913,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["c6cf",{"_index":3347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatedynamicvalues",{"_index":1444,"title":{},"body":{"components/LogoComponent.html":{}}}],["calculates",{"_index":1458,"title":{},"body":{"components/LogoComponent.html":{}}}],["called",{"_index":111,"title":{},"body":{"components/AddChannelComponent.html":{},"components/TestComponent.html":{}}}],["calling",{"_index":2450,"title":{},"body":{"components/SearchComponent.html":{}}}],["calls",{"_index":1031,"title":{},"body":{"components/EditChannelComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{}}}],["canactivatefn",{"_index":3311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canceleditmessage",{"_index":833,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["canceling",{"_index":163,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["capabilities",{"_index":3282,"title":{},"body":{"index.html":{}}}],["card",{"_index":2321,"title":{},"body":{"components/RegisterComponent.html":{}}}],["care",{"_index":158,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["case",{"_index":1367,"title":{},"body":{"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["catch",{"_index":268,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["catch((error",{"_index":925,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/LoginComponent.html":{},"injectables/MessageService.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["catch(err",{"_index":2920,"title":{},"body":{"injectables/ThreadService.html":{}}}],["catch(error",{"_index":246,"title":{},"body":{"components/AddChannelComponent.html":{},"components/LoginComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["center",{"_index":1571,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["centering",{"_index":1581,"title":{},"body":{"components/LogoComponent.html":{}}}],["change",{"_index":425,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/LogoComponent.html":{},"injectables/MessageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"index.html":{}}}],["changed",{"_index":2758,"title":{},"body":{"components/TestComponent.html":{}}}],["changeemail",{"_index":2661,"title":{},"body":{"components/TestComponent.html":{}}}],["changefullname",{"_index":2662,"title":{},"body":{"components/TestComponent.html":{}}}],["changes",{"_index":770,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{}}}],["changes['currentchannel",{"_index":796,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["changestatus",{"_index":2932,"title":{},"body":{"classes/User.html":{}}}],["changestatus(status",{"_index":2952,"title":{},"body":{"classes/User.html":{}}}],["changethread",{"_index":1792,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["changethread(thread",{"_index":1798,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["channel",{"_index":16,"title":{"classes/Channel.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["channel's",{"_index":777,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel'},{'name",{"_index":315,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["channel.addparticipant(this",{"_index":2997,"title":{},"body":{"classes/User.html":{}}}],["channel.channelid",{"_index":3007,"title":{},"body":{"classes/User.html":{}}}],["channel.class",{"_index":2974,"title":{},"body":{"classes/User.html":{}}}],["channel.component.html",{"_index":23,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.scss",{"_index":25,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts",{"_index":11,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"coverage.html":{}}}],["channel.component.ts:102",{"_index":144,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:108",{"_index":1015,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:117",{"_index":1009,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:121",{"_index":185,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:129",{"_index":1049,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:135",{"_index":178,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:145",{"_index":194,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:146",{"_index":1042,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:157",{"_index":168,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:164",{"_index":1045,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:180",{"_index":67,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:181",{"_index":1025,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:189",{"_index":155,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:198",{"_index":1019,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:20",{"_index":998,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:22",{"_index":1053,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:24",{"_index":209,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:25",{"_index":208,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:26",{"_index":211,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:27",{"_index":215,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:28",{"_index":217,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:29",{"_index":216,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:30",{"_index":212,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:31",{"_index":214,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:32",{"_index":59,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:33",{"_index":1054,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:34",{"_index":213,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["channel.component.ts:35",{"_index":1050,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:36",{"_index":1051,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:37",{"_index":1052,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:40",{"_index":1024,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:46",{"_index":90,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:52",{"_index":1023,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:66",{"_index":1016,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:69",{"_index":130,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:77",{"_index":1006,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:82",{"_index":112,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.component.ts:88",{"_index":999,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.component.ts:97",{"_index":1003,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channel.removeparticipant(this",{"_index":3000,"title":{},"body":{"classes/User.html":{}}}],["channel.title",{"_index":278,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channel.title.tolowercase().includes(filtervalue",{"_index":2541,"title":{},"body":{"components/SearchComponent.html":{}}}],["channel/add",{"_index":10,"title":{},"body":{"components/AddChannelComponent.html":{},"coverage.html":{}}}],["channel/edit",{"_index":973,"title":{},"body":{"components/EditChannelComponent.html":{},"coverage.html":{}}}],["channelchat",{"_index":825,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["channelchatcomponent",{"_index":323,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["channelchatcomponent(parant",{"_index":843,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["channelcreator",{"_index":978,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channelcreatoriscurrentuser",{"_index":979,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["channeldescription",{"_index":28,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channeldocref",{"_index":574,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["channelid",{"_index":273,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"classes/Thread.html":{},"classes/User.html":{}}}],["channelmemberscomponent",{"_index":226,"title":{"components/ChannelMembersComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["channelname",{"_index":29,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channelname.length",{"_index":271,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["channelparticipants",{"_index":739,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["channelparticipantscomponent",{"_index":325,"title":{"components/ChannelParticipantsComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["channelparticipantssub",{"_index":740,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["channels",{"_index":75,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"classes/User.html":{}}}],["channels.filter((channel",{"_index":2533,"title":{},"body":{"components/SearchComponent.html":{}}}],["channels/${this.data.channelid",{"_index":576,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["channelthreadcomponent",{"_index":327,"title":{"components/ChannelThreadComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["channel´s",{"_index":488,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["characters",{"_index":1028,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["chat",{"_index":388,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["chat'},{'name",{"_index":324,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["chat.component",{"_index":892,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{}}}],["chat.component.ts",{"_index":3130,"title":{},"body":{"coverage.html":{}}}],["chat.ts",{"_index":3022,"title":{},"body":{"classes/UserChat.html":{},"coverage.html":{}}}],["chat.ts:38",{"_index":3029,"title":{},"body":{"classes/UserChat.html":{}}}],["chat.ts:48",{"_index":3030,"title":{},"body":{"classes/UserChat.html":{}}}],["chat.ts:7",{"_index":3027,"title":{},"body":{"classes/UserChat.html":{}}}],["chat.ts:8",{"_index":3026,"title":{},"body":{"classes/UserChat.html":{}}}],["chat.ts:9",{"_index":3025,"title":{},"body":{"classes/UserChat.html":{}}}],["chat/channel",{"_index":734,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"coverage.html":{}}}],["chat/edit",{"_index":972,"title":{},"body":{"components/EditChannelComponent.html":{},"coverage.html":{}}}],["chat/message",{"_index":1640,"title":{},"body":{"components/MessageReactionComponent.html":{},"coverage.html":{}}}],["chat/user",{"_index":964,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["chatid",{"_index":3033,"title":{},"body":{"classes/UserChat.html":{},"interfaces/UserChatJson.html":{}}}],["chatreaction",{"_index":1682,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreaction.count",{"_index":1763,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreaction.reaction",{"_index":1751,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreaction.users.findindex((u",{"_index":1761,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreaction.users.push(this.currentuser",{"_index":1767,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreaction.users.splice(userindex",{"_index":1764,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreactions",{"_index":1718,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreactions.foreach((chatreaction",{"_index":1750,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreactions.indexof(chatreaction",{"_index":1765,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chatreactions.splice(index",{"_index":1766,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["chats",{"_index":2986,"title":{},"body":{"classes/User.html":{}}}],["check",{"_index":87,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/RegisterComponent.html":{},"components/TestComponent.html":{},"index.html":{}}}],["checkchannelnameexists",{"_index":41,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["checkchannelnameexists(channelname",{"_index":65,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["checkifdevteamchannel",{"_index":986,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["checking",{"_index":145,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["checks",{"_index":68,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"injectables/SidenavService.html":{}}}],["checkuserauthid",{"_index":43,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["choice",{"_index":3279,"title":{},"body":{"index.html":{}}}],["class",{"_index":233,"title":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["classes",{"_index":624,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"overview.html":{}}}],["cleaning",{"_index":159,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["cleans",{"_index":1684,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["clears",{"_index":428,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["clearuserdata",{"_index":3049,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["cli",{"_index":3234,"title":{},"body":{"index.html":{}}}],["click)=\"openthread(this.thread",{"_index":951,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["click)=\"save()\">erstellen",{"_index":732,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["click)=\"save()\">hinzufügen",{"_index":615,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["clicking",{"_index":2492,"title":{},"body":{"components/SearchComponent.html":{}}}],["close",{"_index":1005,"title":{},"body":{"components/EditChannelComponent.html":{},"injectables/MessageService.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{}}}],["closedialog",{"_index":1907,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["closedialog(event",{"_index":1934,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["closemenu",{"_index":987,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["closeprofile",{"_index":1159,"title":{},"body":{"components/HeaderComponent.html":{},"components/ViewProfileComponent.html":{}}}],["closeprofile(event",{"_index":1176,"title":{},"body":{"components/HeaderComponent.html":{}}}],["closes",{"_index":197,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"injectables/MessageService.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{},"components/ViewProfileComponent.html":{}}}],["closesidenav",{"_index":2438,"title":{},"body":{"components/SearchComponent.html":{}}}],["closeview",{"_index":2238,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["closeview(event",{"_index":2244,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["code",{"_index":2516,"title":{},"body":{"components/SearchComponent.html":{},"index.html":{}}}],["collection",{"_index":703,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["collection(this.firestore",{"_index":706,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["color",{"_index":1553,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["column",{"_index":2315,"title":{},"body":{"components/RegisterComponent.html":{}}}],["command",{"_index":3280,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":20,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["communication",{"_index":627,"title":{},"body":{"classes/Channel.html":{},"components/MessageReactionComponent.html":{}}}],["communication.service",{"_index":1145,"title":{},"body":{"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{}}}],["communication.service.ts",{"_index":1094,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"coverage.html":{}}}],["communication.service.ts:10",{"_index":1113,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["communication.service.ts:11",{"_index":1111,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["communication.service.ts:22",{"_index":1102,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["comparechannelcreatorwithcurrentuser",{"_index":988,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["compares",{"_index":1007,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["comparing",{"_index":1000,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["complete",{"_index":1804,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["completed",{"_index":681,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["completes",{"_index":2419,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["completion",{"_index":1465,"title":{},"body":{"components/LogoComponent.html":{}}}],["component",{"_index":0,"title":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{},"index.html":{}}}],["component's",{"_index":774,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/SidenavService.html":{}}}],["component_template",{"_index":314,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"overview.html":{}}}],["conditionally",{"_index":2590,"title":{},"body":{"injectables/SidenavService.html":{}}}],["config",{"_index":3240,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":3237,"title":{},"body":{"index.html":{}}}],["configuration/default",{"_index":1966,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"injectables/StorageService.html":{}}}],["connect",{"_index":3095,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["console.error(\"fehler",{"_index":247,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["console.error(\"upload",{"_index":2644,"title":{},"body":{"injectables/StorageService.html":{}}}],["console.error('an",{"_index":2430,"title":{},"body":{"components/RegisterNextComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["console.error('could",{"_index":1402,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.error('error",{"_index":915,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["console.error('failed",{"_index":2733,"title":{},"body":{"components/TestComponent.html":{}}}],["console.error('falied",{"_index":2729,"title":{},"body":{"components/TestComponent.html":{}}}],["console.error('fehler",{"_index":591,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["console.error('image",{"_index":3081,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["console.error('keine",{"_index":586,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["console.error('update",{"_index":2921,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.error(error",{"_index":1248,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["console.log(\"kein",{"_index":243,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["console.log('anmeldung",{"_index":1389,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.log('file",{"_index":2650,"title":{},"body":{"injectables/StorageService.html":{}}}],["console.log('form",{"_index":2748,"title":{},"body":{"components/TestComponent.html":{}}}],["console.log('guest",{"_index":1393,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.log('name",{"_index":2756,"title":{},"body":{"components/TestComponent.html":{}}}],["console.log('thread",{"_index":2919,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.log('uh",{"_index":2651,"title":{},"body":{"injectables/StorageService.html":{}}}],["console.log('user",{"_index":1247,"title":{},"body":{"components/HeaderComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["console.log(error",{"_index":2925,"title":{},"body":{"injectables/ThreadService.html":{}}}],["console.warn('could",{"_index":1396,"title":{},"body":{"components/LoginComponent.html":{}}}],["console.warn('fehler",{"_index":269,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["const",{"_index":255,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":52,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["constructor(_snackbar",{"_index":2609,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["constructor(auth",{"_index":1167,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["constructor(authservice",{"_index":2670,"title":{},"body":{"components/TestComponent.html":{}}}],["constructor(channelchat",{"_index":841,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["constructor(data",{"_index":631,"title":{},"body":{"classes/Channel.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"components/ViewProfileComponent.html":{}}}],["constructor(dataservice",{"_index":997,"title":{},"body":{"components/EditChannelComponent.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{}}}],["constructor(dialog",{"_index":53,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{}}}],["constructor(emojiservice",{"_index":1128,"title":{},"body":{"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{}}}],["constructor(firestore",{"_index":479,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["constructor(formbuilder",{"_index":1362,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["constructor(location",{"_index":1282,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["constructor(private",{"_index":1292,"title":{},"body":{"components/ImprintComponent.html":{},"components/LogoComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/SnackBarService.html":{}}}],["constructor(public",{"_index":234,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{}}}],["constructor(route",{"_index":1451,"title":{},"body":{"components/LogoComponent.html":{}}}],["constructor(sender",{"_index":1597,"title":{},"body":{"classes/Message.html":{}}}],["constructor(storageservice",{"_index":3057,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["constructor(threadservice",{"_index":958,"title":{},"body":{"components/DashboardComponent.html":{}}}],["constructor(userregservice",{"_index":1919,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{}}}],["constructs",{"_index":633,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["container",{"_index":1557,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["containerstate",{"_index":1434,"title":{},"body":{"components/LogoComponent.html":{}}}],["containing",{"_index":1047,"title":{},"body":{"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"injectables/MessageService.html":{},"components/PhotoSelectionComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{}}}],["content",{"_index":1573,"title":{},"body":{"components/LogoComponent.html":{},"classes/Message.html":{},"components/RegisterComponent.html":{},"classes/User.html":{}}}],["control",{"_index":531,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["control's",{"_index":2472,"title":{},"body":{"components/SearchComponent.html":{}}}],["controls",{"_index":517,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["convert",{"_index":2786,"title":{},"body":{"classes/Thread.html":{}}}],["converted",{"_index":2894,"title":{},"body":{"injectables/ThreadService.html":{}}}],["convertmessagetoobject",{"_index":2772,"title":{},"body":{"classes/Thread.html":{}}}],["convertmessagetoobject(jsonmessage",{"_index":2783,"title":{},"body":{"classes/Thread.html":{}}}],["converts",{"_index":644,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["convertthreadmessagestostring",{"_index":2886,"title":{},"body":{"injectables/ThreadService.html":{}}}],["convertthreadmessagestostring(thread",{"_index":2891,"title":{},"body":{"injectables/ThreadService.html":{}}}],["copies",{"_index":1703,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/ThreadService.html":{}}}],["copy",{"_index":2899,"title":{},"body":{"injectables/ThreadService.html":{},"index.html":{}}}],["copythreadforfirebase",{"_index":2887,"title":{},"body":{"injectables/ThreadService.html":{}}}],["copythreadforfirebase(originthread",{"_index":2895,"title":{},"body":{"injectables/ThreadService.html":{}}}],["copyuserchatthreadforfirebase",{"_index":2888,"title":{},"body":{"injectables/ThreadService.html":{}}}],["copyuserchatthreadforfirebase(originthread",{"_index":2900,"title":{},"body":{"injectables/ThreadService.html":{}}}],["corner",{"_index":1550,"title":{},"body":{"components/LogoComponent.html":{}}}],["cornerchange",{"_index":1585,"title":{},"body":{"components/LogoComponent.html":{}}}],["corresponding",{"_index":103,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/SidenavService.html":{}}}],["count",{"_index":1697,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["coverage",{"_index":3114,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":114,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/Message.html":{},"components/PasswordResetComponent.html":{},"classes/Thread.html":{},"index.html":{}}}],["createchannel",{"_index":44,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["created",{"_index":139,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"classes/Message.html":{},"classes/Thread.html":{},"injectables/UserRegistrationService.html":{}}}],["createdby",{"_index":274,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{}}}],["createdchannelid",{"_index":30,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["creates",{"_index":118,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{},"components/ImprintComponent.html":{},"classes/Message.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"classes/Thread.html":{},"injectables/UserRegistrationService.html":{}}}],["creating",{"_index":763,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["creation",{"_index":124,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["creator",{"_index":191,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["creator.name",{"_index":1063,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["creatorid",{"_index":1060,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["criteria",{"_index":2468,"title":{},"body":{"components/SearchComponent.html":{}}}],["ctrl/ngx",{"_index":1143,"title":{},"body":{"components/EmojiMartComponent.html":{},"dependencies.html":{}}}],["current",{"_index":101,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{}}}],["currentchannel",{"_index":559,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["currentchannel.description",{"_index":1030,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["currentchannel.title",{"_index":1043,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["currentchannelisdevteamchannel",{"_index":980,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["currently",{"_index":427,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["currentmessages",{"_index":1688,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["currentthread",{"_index":1786,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["currentuser",{"_index":31,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{}}}],["currentuser.id",{"_index":1773,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["currentuser.name",{"_index":815,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["currentuserchat",{"_index":2966,"title":{},"body":{"classes/User.html":{}}}],["currentuserchat.addthread(newthread",{"_index":3011,"title":{},"body":{"classes/User.html":{}}}],["currentuserid",{"_index":782,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{}}}],["cursor",{"_index":2341,"title":{},"body":{"components/RegisterComponent.html":{}}}],["da",{"_index":3354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dabubble",{"_index":621,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["damit",{"_index":2205,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["daniel",{"_index":1306,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["dann",{"_index":2218,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["das",{"_index":1342,"title":{},"body":{"components/ImprintComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{}}}],["dashboard",{"_index":955,"title":{},"body":{"components/DashboardComponent.html":{},"components/LogoComponent.html":{},"components/PageNotFoundComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["dashboard'},{'name",{"_index":330,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["dashboard.component",{"_index":895,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["dashboard.component.html",{"_index":956,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.scss",{"_index":957,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboardcomponent",{"_index":329,"title":{"components/DashboardComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["data",{"_index":119,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["data.authuserid",{"_index":2980,"title":{},"body":{"classes/User.html":{}}}],["data.channelid",{"_index":648,"title":{},"body":{"classes/Channel.html":{},"classes/Thread.html":{}}}],["data.channels",{"_index":2982,"title":{},"body":{"classes/User.html":{}}}],["data.createdby",{"_index":652,"title":{},"body":{"classes/Channel.html":{}}}],["data.currentchannel.title",{"_index":614,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["data.description",{"_index":651,"title":{},"body":{"classes/Channel.html":{}}}],["data.email",{"_index":2978,"title":{},"body":{"classes/User.html":{},"components/ViewProfileComponent.html":{}}}],["data.from",{"_index":2281,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["data.id",{"_index":2976,"title":{},"body":{"classes/User.html":{}}}],["data.imageurl",{"_index":2981,"title":{},"body":{"classes/User.html":{}}}],["data.messages",{"_index":2809,"title":{},"body":{"classes/Thread.html":{}}}],["data.name",{"_index":2977,"title":{},"body":{"classes/User.html":{},"components/ViewProfileComponent.html":{}}}],["data.onlinestatus",{"_index":2979,"title":{},"body":{"classes/User.html":{},"components/ViewProfileComponent.html":{}}}],["data.participants",{"_index":650,"title":{},"body":{"classes/Channel.html":{},"classes/UserChat.html":{}}}],["data.service",{"_index":2913,"title":{},"body":{"injectables/ThreadService.html":{}}}],["data.threadid",{"_index":2808,"title":{},"body":{"classes/Thread.html":{}}}],["data.threads",{"_index":3032,"title":{},"body":{"classes/UserChat.html":{}}}],["data.timestamp",{"_index":2810,"title":{},"body":{"classes/Thread.html":{}}}],["data.title",{"_index":649,"title":{},"body":{"classes/Channel.html":{}}}],["data.userchatid",{"_index":3031,"title":{},"body":{"classes/UserChat.html":{}}}],["data.userchats",{"_index":2985,"title":{},"body":{"classes/User.html":{}}}],["database",{"_index":3236,"title":{},"body":{"index.html":{}}}],["dataservice",{"_index":55,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["dataservice.updatechannel",{"_index":1032,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["date",{"_index":863,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{}}}],["date().gettime",{"_index":1617,"title":{},"body":{"classes/Message.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["date(this.timestamp",{"_index":2814,"title":{},"body":{"classes/Thread.html":{}}}],["date.getdate",{"_index":2817,"title":{},"body":{"classes/Thread.html":{}}}],["date.getday",{"_index":2816,"title":{},"body":{"classes/Thread.html":{}}}],["date.getfullyear",{"_index":2818,"title":{},"body":{"classes/Thread.html":{}}}],["date.gethours().tostring().padstart(2",{"_index":2854,"title":{},"body":{"classes/Thread.html":{}}}],["date.getminutes().tostring().padstart(2",{"_index":2856,"title":{},"body":{"classes/Thread.html":{}}}],["date.getmonth",{"_index":2815,"title":{},"body":{"classes/Thread.html":{}}}],["datei",{"_index":2002,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["dateisnottoday",{"_index":2773,"title":{},"body":{"classes/Thread.html":{}}}],["dateisnottoday(weekday",{"_index":2787,"title":{},"body":{"classes/Thread.html":{}}}],["daten",{"_index":2040,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutz",{"_index":1351,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["datenschutzbeauftragte",{"_index":2229,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzbeauftragten",{"_index":2031,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzbestimmungen",{"_index":2202,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzerklärung",{"_index":2014,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["datenschutzgesetze",{"_index":2018,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenschutzgrundverordnung",{"_index":2021,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenverarbeitung",{"_index":2054,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["datenübertragbarkeit",{"_index":2065,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["day",{"_index":2789,"title":{},"body":{"classes/Thread.html":{}}}],["deactivates",{"_index":1034,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["decoration",{"_index":2389,"title":{},"body":{"components/RegisterComponent.html":{}}}],["decorators",{"_index":430,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/LogoComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["decreases",{"_index":1714,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["default",{"_index":206,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"miscellaneous/variables.html":{}}}],["default_img_src_url",{"_index":1899,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["defaultavatars",{"_index":1900,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultavatars.includes(fileurl",{"_index":2648,"title":{},"body":{"injectables/StorageService.html":{}}}],["defaultbackground",{"_index":1435,"title":{},"body":{"components/LogoComponent.html":{}}}],["defaultbg",{"_index":1568,"title":{},"body":{"components/LogoComponent.html":{}}}],["defer",{"_index":931,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["defined",{"_index":58,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["dein",{"_index":2307,"title":{},"body":{"components/RegisterComponent.html":{}}}],["deinem",{"_index":281,"title":{},"body":{"components/AddChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["deinen",{"_index":1995,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["deiner",{"_index":2305,"title":{},"body":{"components/RegisterComponent.html":{}}}],["delay",{"_index":109,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["delegates",{"_index":2589,"title":{},"body":{"injectables/SidenavService.html":{}}}],["delete",{"_index":851,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["deleted",{"_index":871,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/LoginComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{}}}],["deletefile",{"_index":2625,"title":{},"body":{"injectables/StorageService.html":{}}}],["deletefile(fileurl",{"_index":2627,"title":{},"body":{"injectables/StorageService.html":{}}}],["deleteimg",{"_index":834,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["deleteimg(obj",{"_index":849,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["deleteobject",{"_index":897,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["deleteobject(desertref",{"_index":2649,"title":{},"body":{"injectables/StorageService.html":{}}}],["deleteobject(desertref).then",{"_index":923,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["deletes",{"_index":1807,"title":{},"body":{"injectables/MessageService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{}}}],["deleteuser",{"_index":2663,"title":{},"body":{"components/TestComponent.html":{}}}],["deletfileofmessage",{"_index":1793,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["deletfileofmessage(imgfilelink",{"_index":1805,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["deletion",{"_index":2749,"title":{},"body":{"components/TestComponent.html":{}}}],["dem",{"_index":1345,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["den",{"_index":2027,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["denn",{"_index":2188,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dependencies",{"_index":3213,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":2501,"title":{},"body":{"components/SearchComponent.html":{}}}],["der",{"_index":250,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["deren",{"_index":2042,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["des",{"_index":2085,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["description",{"_index":86,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/ImprintComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["desertref",{"_index":921,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["design",{"_index":846,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/SidenavService.html":{}}}],["destroy",{"_index":1182,"title":{},"body":{"components/HeaderComponent.html":{}}}],["destroyed",{"_index":156,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["details",{"_index":1104,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["determine",{"_index":77,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"injectables/SidenavService.html":{}}}],["dev",{"_index":3259,"title":{},"body":{"index.html":{}}}],["development",{"_index":3254,"title":{},"body":{"index.html":{}}}],["devteam",{"_index":726,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{}}}],["devtools",{"_index":2318,"title":{},"body":{"components/RegisterComponent.html":{}}}],["dezember",{"_index":2847,"title":{},"body":{"classes/Thread.html":{}}}],["dialog",{"_index":33,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["dialog/add",{"_index":791,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["dialog/re",{"_index":2714,"title":{},"body":{"components/TestComponent.html":{}}}],["dialog/view",{"_index":788,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{}}}],["dialogref",{"_index":481,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["dialogref.afterclosed().subscribe",{"_index":2542,"title":{},"body":{"components/SearchComponent.html":{}}}],["dialogs",{"_index":844,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/ViewProfileComponent.html":{}}}],["dich",{"_index":2277,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["die",{"_index":1325,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["dienen",{"_index":280,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["dienstag",{"_index":2830,"title":{},"body":{"classes/Thread.html":{}}}],["dienstleister",{"_index":2126,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dient",{"_index":2196,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["dies",{"_index":2175,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["diese",{"_index":1416,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["diesem",{"_index":1088,"title":{},"body":{"components/EditChannelComponent.html":{},"components/PrivacyComponent.html":{}}}],["dieser",{"_index":298,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ImprintComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["dieses",{"_index":1421,"title":{},"body":{"components/LoginComponent.html":{}}}],["different",{"_index":2500,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["dimensions",{"_index":1460,"title":{},"body":{"components/LogoComponent.html":{}}}],["dir",{"_index":1409,"title":{},"body":{"components/LoginComponent.html":{}}}],["direct",{"_index":2968,"title":{},"body":{"classes/User.html":{}}}],["direction",{"_index":2314,"title":{},"body":{"components/RegisterComponent.html":{}}}],["directive",{"_index":312,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["directives",{"_index":391,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":3266,"title":{},"body":{"index.html":{}}}],["directory",{"_index":3271,"title":{},"body":{"index.html":{}}}],["direkt",{"_index":2223,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["disabled",{"_index":308,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/RegisterComponent.html":{}}}],["disabled]=\"!(selectedoption",{"_index":731,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["display",{"_index":170,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/LogoComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"injectables/SnackBarService.html":{}}}],["displayed",{"_index":105,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{}}}],["displaying",{"_index":423,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["displays",{"_index":419,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ImprintComponent.html":{},"injectables/SnackBarService.html":{}}}],["dist",{"_index":3270,"title":{},"body":{"index.html":{}}}],["div",{"_index":2367,"title":{},"body":{"components/RegisterComponent.html":{}}}],["doc",{"_index":550,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["doc(this.firestore",{"_index":575,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["doc.hidden",{"_index":2675,"title":{},"body":{"components/TestComponent.html":{}}}],["docsnapshot.ref",{"_index":710,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["document",{"_index":3069,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["document.createelement('img",{"_index":442,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["document.visibilitystate",{"_index":2717,"title":{},"body":{"components/TestComponent.html":{}}}],["document:visibilitychange",{"_index":2669,"title":{},"body":{"components/TestComponent.html":{}}}],["documentation",{"_index":3115,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["donnerstag",{"_index":2832,"title":{},"body":{"classes/Thread.html":{}}}],["download",{"_index":2634,"title":{},"body":{"injectables/StorageService.html":{}}}],["download=\"\">open",{"_index":944,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["dsgvo",{"_index":2022,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["du",{"_index":816,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"components/RegisterComponent.html":{}}}],["duration",{"_index":2620,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["durchsuchen",{"_index":2518,"title":{},"body":{"components/SearchComponent.html":{}}}],["durchzuführen",{"_index":2282,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["during",{"_index":495,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["dynamic",{"_index":1459,"title":{},"body":{"components/LogoComponent.html":{},"dependencies.html":{}}}],["dürfen",{"_index":2060,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["e",{"_index":1410,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/ViewProfileComponent.html":{}}}],["e.g",{"_index":2491,"title":{},"body":{"components/SearchComponent.html":{}}}],["e2e",{"_index":3277,"title":{},"body":{"index.html":{}}}],["each",{"_index":1674,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/SidenavService.html":{}}}],["ease",{"_index":1223,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{}}}],["eceefe",{"_index":1569,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["ed104548d2da",{"_index":3350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ed1e79",{"_index":2383,"title":{},"body":{"components/RegisterComponent.html":{}}}],["edit",{"_index":332,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["edit'},{'name",{"_index":363,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["edit.component",{"_index":1206,"title":{},"body":{"components/HeaderComponent.html":{}}}],["edit.component.ts",{"_index":3172,"title":{},"body":{"coverage.html":{}}}],["edit/profile",{"_index":1205,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["editchannelcomponent",{"_index":331,"title":{"components/EditChannelComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["editchanneldescription",{"_index":989,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["editchanneldescription_activated",{"_index":981,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["editchannelname",{"_index":990,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["editchannelname_activated",{"_index":982,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["editclicked",{"_index":2241,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["editing",{"_index":1013,"title":{},"body":{"components/EditChannelComponent.html":{},"components/TestComponent.html":{}}}],["editmessage",{"_index":826,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["editmessagebox",{"_index":827,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["editmode",{"_index":1588,"title":{},"body":{"classes/Message.html":{}}}],["editthreadmessage",{"_index":835,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["edituser",{"_index":2239,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["edituser(event",{"_index":2247,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["eigenes",{"_index":1999,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["ein",{"_index":2178,"title":{},"body":{"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["eine",{"_index":2071,"title":{},"body":{"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["einen",{"_index":304,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["einer",{"_index":1339,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["einführung",{"_index":2213,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eingabemaske",{"_index":2105,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eingegebenen",{"_index":2117,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eingewilligt",{"_index":2066,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einige",{"_index":2103,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einschränkung",{"_index":2053,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einwilligung",{"_index":2072,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einzelfallbezogenes",{"_index":2165,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["einzulegen",{"_index":2174,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["element",{"_index":311,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["element.files",{"_index":1980,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["element.files[0",{"_index":1981,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["element.value",{"_index":1987,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["elementref",{"_index":429,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{}}}],["elements",{"_index":1527,"title":{},"body":{"components/LogoComponent.html":{},"injectables/SidenavService.html":{}}}],["email",{"_index":1373,"title":{},"body":{"components/LoginComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["emaildata",{"_index":2556,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["emitemojievent",{"_index":1097,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["emitemojievent(emoji",{"_index":1098,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["emits",{"_index":1103,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{}}}],["emitted",{"_index":1107,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["emoji",{"_index":334,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{},"dependencies.html":{}}}],["emoji's",{"_index":1140,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["emojicommunicationservice",{"_index":1091,"title":{"injectables/EmojiCommunicationService.html":{}},"body":{"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{},"coverage.html":{}}}],["emojievent",{"_index":1095,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["emojieventsource",{"_index":1096,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["emojiimg",{"_index":1125,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["emojiimghover",{"_index":1126,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["emojimartcomponent",{"_index":333,"title":{"components/EmojiMartComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["emojireaction",{"_index":1705,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["emojireaction.users.foreach((reactionuserid",{"_index":1739,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["emojireaction.usersdetail",{"_index":1742,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["emojireaction.usersdetail.push(user",{"_index":1743,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["emojireactions",{"_index":1589,"title":{},"body":{"classes/Message.html":{}}}],["emojiservice",{"_index":1130,"title":{},"body":{"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{}}}],["emojiservice.emitemojievent",{"_index":1137,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["emojisubscription",{"_index":1645,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["empfehlen",{"_index":1408,"title":{},"body":{"components/LoginComponent.html":{}}}],["empfänger",{"_index":2123,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["empty",{"_index":515,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["empty.png",{"_index":1951,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["enableindexeddbpersistence(firestore",{"_index":3310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":1515,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{},"index.html":{}}}],["ensure",{"_index":204,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["ensures",{"_index":2451,"title":{},"body":{"components/SearchComponent.html":{}}}],["ensuring",{"_index":2591,"title":{},"body":{"injectables/SidenavService.html":{}}}],["entire",{"_index":1715,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["entries",{"_index":203,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["entsprechende",{"_index":2136,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["entspricht",{"_index":2209,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erfolgt",{"_index":2118,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erforderlich",{"_index":2115,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ergeben",{"_index":2170,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erhoben",{"_index":2110,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["erklärt",{"_index":1329,"title":{},"body":{"components/ImprintComponent.html":{}}}],["erneuten",{"_index":2216,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["err",{"_index":2728,"title":{},"body":{"components/TestComponent.html":{},"injectables/ThreadService.html":{}}}],["error",{"_index":106,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["error(\"upload",{"_index":2647,"title":{},"body":{"injectables/StorageService.html":{}}}],["error('couldnt",{"_index":2739,"title":{},"body":{"components/TestComponent.html":{}}}],["error.code",{"_index":2568,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["error.message",{"_index":2570,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["errorcode",{"_index":2567,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["errormessage",{"_index":2569,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["errors",{"_index":2487,"title":{},"body":{"components/SearchComponent.html":{}}}],["erstellen",{"_index":270,"title":{},"body":{"components/AddChannelComponent.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["ersteller",{"_index":1018,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["erstellt",{"_index":1084,"title":{},"body":{"components/EditChannelComponent.html":{},"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["erteilt",{"_index":2073,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["es",{"_index":2186,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["eu",{"_index":2020,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["evenly",{"_index":2381,"title":{},"body":{"components/RegisterComponent.html":{}}}],["event",{"_index":415,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["event.emoji",{"_index":1727,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["event.messagetimestamp",{"_index":1724,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["event.preventdefault",{"_index":1384,"title":{},"body":{"components/LoginComponent.html":{}}}],["event.sender",{"_index":1723,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["event.stoppropagation",{"_index":1239,"title":{},"body":{"components/HeaderComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{}}}],["event.target",{"_index":607,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["event.target.files[0",{"_index":436,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["event.thread",{"_index":1732,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["event.update",{"_index":1730,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["eventemitter",{"_index":1932,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{}}}],["events",{"_index":1662,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/RegisterComponent.html":{}}}],["example",{"_index":1369,"title":{},"body":{"components/LoginComponent.html":{},"injectables/SidenavService.html":{},"index.html":{}}}],["execute",{"_index":3275,"title":{},"body":{"index.html":{}}}],["executes",{"_index":179,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{}}}],["existence",{"_index":88,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["existing",{"_index":761,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"classes/User.html":{}}}],["exists",{"_index":71,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["experten",{"_index":2227,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["export",{"_index":232,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"index.html":{}}}],["externe",{"_index":2228,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["f",{"_index":2172,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["factor",{"_index":1518,"title":{},"body":{"components/LogoComponent.html":{}}}],["fadeup",{"_index":1873,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["fail",{"_index":152,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["failed",{"_index":2645,"title":{},"body":{"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["fails",{"_index":2639,"title":{},"body":{"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["fallback",{"_index":1366,"title":{},"body":{"components/LoginComponent.html":{}}}],["false",{"_index":85,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"classes/User.html":{}}}],["family",{"_index":2349,"title":{},"body":{"components/RegisterComponent.html":{}}}],["februar",{"_index":2837,"title":{},"body":{"classes/Thread.html":{}}}],["feedback",{"_index":2382,"title":{},"body":{"components/RegisterComponent.html":{}}}],["fehlgeschlagen",{"_index":1390,"title":{},"body":{"components/LoginComponent.html":{}}}],["fetch",{"_index":2730,"title":{},"body":{"components/TestComponent.html":{}}}],["fetches",{"_index":2480,"title":{},"body":{"components/SearchComponent.html":{}}}],["fetching",{"_index":2488,"title":{},"body":{"components/SearchComponent.html":{}}}],["field",{"_index":555,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterComponent.html":{}}}],["fields",{"_index":196,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["file.name",{"_index":2641,"title":{},"body":{"injectables/StorageService.html":{}}}],["fileinput",{"_index":402,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["fileorurl",{"_index":2417,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["filereader",{"_index":438,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["files",{"_index":3263,"title":{},"body":{"index.html":{}}}],["filesize",{"_index":1901,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["filetoobig",{"_index":1908,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["fileurl",{"_index":2629,"title":{},"body":{"injectables/StorageService.html":{}}}],["filter",{"_index":493,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["filterchannels",{"_index":2439,"title":{},"body":{"components/SearchComponent.html":{}}}],["filterchannels(value",{"_index":2463,"title":{},"body":{"components/SearchComponent.html":{}}}],["filtered",{"_index":498,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["filteredchannels",{"_index":2435,"title":{},"body":{"components/SearchComponent.html":{}}}],["filteredusers",{"_index":466,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["filtering",{"_index":2467,"title":{},"body":{"components/SearchComponent.html":{}}}],["filters",{"_index":2465,"title":{},"body":{"components/SearchComponent.html":{}}}],["filterusers",{"_index":472,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["filterusers(value",{"_index":491,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["filtervalue",{"_index":566,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["final",{"_index":522,"title":{},"body":{"components/AddUsersComponent.html":{},"components/RegisterNextComponent.html":{}}}],["findcurrentuser",{"_index":45,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["findcurrentuser(authid",{"_index":129,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["finden",{"_index":2096,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["findthreaduser",{"_index":836,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["findthreaduser(messageownerid",{"_index":854,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["firebase",{"_index":872,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["firebase/auth",{"_index":1381,"title":{},"body":{"components/LoginComponent.html":{}}}],["firebase/storage",{"_index":2637,"title":{},"body":{"injectables/StorageService.html":{}}}],["firebaseconfig",{"_index":3209,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["firebaseui",{"_index":3222,"title":{},"body":{"dependencies.html":{}}}],["fired",{"_index":1190,"title":{},"body":{"components/HeaderComponent.html":{}}}],["firestore",{"_index":480,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/LoginComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["first",{"_index":2744,"title":{},"body":{"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"index.html":{}}}],["firstvaluefrom",{"_index":2716,"title":{},"body":{"components/TestComponent.html":{}}}],["firstvaluefrom(dialogref.afterclosed",{"_index":2736,"title":{},"body":{"components/TestComponent.html":{}}}],["flag",{"_index":1001,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["flags",{"_index":150,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["flex",{"_index":1570,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["focus",{"_index":2369,"title":{},"body":{"components/RegisterComponent.html":{}}}],["folgende",{"_index":2034,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["following",{"_index":2482,"title":{},"body":{"components/SearchComponent.html":{}}}],["font",{"_index":2348,"title":{},"body":{"components/RegisterComponent.html":{}}}],["footer",{"_index":2390,"title":{},"body":{"components/RegisterComponent.html":{}}}],["for(participant",{"_index":817,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["form",{"_index":182,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["formats",{"_index":2791,"title":{},"body":{"classes/Thread.html":{}}}],["formatted",{"_index":2796,"title":{},"body":{"classes/Thread.html":{}}}],["formatteddate",{"_index":2852,"title":{},"body":{"classes/Thread.html":{}}}],["formatteddatestamp",{"_index":837,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["formattedtime",{"_index":2857,"title":{},"body":{"classes/Thread.html":{}}}],["formattedtimestamp",{"_index":838,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["formbuilder",{"_index":1363,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["formcontrol",{"_index":541,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["formdata",{"_index":2740,"title":{},"body":{"components/TestComponent.html":{}}}],["formdata.password",{"_index":2743,"title":{},"body":{"components/TestComponent.html":{}}}],["formgroup",{"_index":1857,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["formsmodule",{"_index":21,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/TestComponent.html":{}}}],["found",{"_index":83,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["found'},{'name",{"_index":352,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["found.component.html",{"_index":1838,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.scss",{"_index":1839,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["found.component.ts",{"_index":1837,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["found/page",{"_index":1836,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["fragen",{"_index":2220,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["freiheiten",{"_index":2194,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["freitag",{"_index":2833,"title":{},"body":{"classes/Thread.html":{}}}],["freiwillig",{"_index":2141,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["from(batch.commit",{"_index":584,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["from(getdocs(userscollection)).pipe",{"_index":707,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["fromjson",{"_index":1596,"title":{},"body":{"classes/Message.html":{},"classes/Thread.html":{}}}],["fromjson(json",{"_index":1608,"title":{},"body":{"classes/Message.html":{},"classes/Thread.html":{}}}],["full",{"_index":337,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["fulllogoblackurl",{"_index":1436,"title":{},"body":{"components/LogoComponent.html":{}}}],["fullname",{"_index":1902,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/TestComponent.html":{}}}],["fullthreadcomponent",{"_index":336,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["fullthreadmessagecomponent",{"_index":338,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["function",{"_index":110,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["further",{"_index":3283,"title":{},"body":{"index.html":{}}}],["future",{"_index":202,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["für",{"_index":2075,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gap",{"_index":1580,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["geben",{"_index":2284,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["gegen",{"_index":2063,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["geltendmachung",{"_index":2197,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gem",{"_index":1297,"title":{},"body":{"components/ImprintComponent.html":{}}}],["generate",{"_index":3265,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3232,"title":{},"body":{"index.html":{}}}],["generator",{"_index":1347,"title":{},"body":{"components/ImprintComponent.html":{}}}],["gesendet",{"_index":2572,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["gesetz",{"_index":1323,"title":{},"body":{"components/ImprintComponent.html":{}}}],["gesetzlicher",{"_index":2057,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gespeicherten",{"_index":2039,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gestütztes",{"_index":2180,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["getauth",{"_index":1377,"title":{},"body":{"components/LoginComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"miscellaneous/variables.html":{}}}],["getchannelcreator",{"_index":991,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["getchannelparticipants",{"_index":741,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["getdocs",{"_index":704,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["getdownloadurl",{"_index":2636,"title":{},"body":{"injectables/StorageService.html":{}}}],["getdownloadurl(uploadfile.ref",{"_index":2643,"title":{},"body":{"injectables/StorageService.html":{}}}],["getemojireactions",{"_index":1647,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["getemojireactions(user",{"_index":1672,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["getfirestore",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getformatteddatestamp",{"_index":2774,"title":{},"body":{"classes/Thread.html":{}}}],["getformattedtimestamp",{"_index":2775,"title":{},"body":{"classes/Thread.html":{}}}],["getnewreactiontomessage",{"_index":1648,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["getnewreactiontomessage(threadmessage",{"_index":1677,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["getparticipantinfossub",{"_index":742,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["getreactionsformessage",{"_index":1794,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["getreactionsformessage(thread",{"_index":1810,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["gets",{"_index":1188,"title":{},"body":{"components/HeaderComponent.html":{},"classes/Thread.html":{},"injectables/UserRegistrationService.html":{}}}],["getstorage",{"_index":898,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"miscellaneous/variables.html":{}}}],["getter",{"_index":2720,"title":{},"body":{"components/TestComponent.html":{}}}],["getthreadchanges",{"_index":1795,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["getthreadchanges(thread",{"_index":1814,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["getting",{"_index":3229,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":2240,"title":{},"body":{"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["getuserauthid",{"_index":2664,"title":{},"body":{"components/TestComponent.html":{}}}],["getuserfullname",{"_index":3050,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["getuserimg",{"_index":473,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["getuserimg(userid",{"_index":501,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["getusername",{"_index":474,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["getusername(userid",{"_index":507,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["getusers",{"_index":2665,"title":{},"body":{"components/TestComponent.html":{}}}],["gewähren",{"_index":2150,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gewünschte",{"_index":2279,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["geändert",{"_index":1890,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["ggf",{"_index":2124,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gib",{"_index":1082,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["gilt",{"_index":2176,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["given",{"_index":69,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/SearchComponent.html":{}}}],["go",{"_index":3286,"title":{},"body":{"index.html":{}}}],["goback",{"_index":1281,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["google",{"_index":1426,"title":{},"body":{"components/LoginComponent.html":{}}}],["gradient(to",{"_index":1562,"title":{},"body":{"components/LogoComponent.html":{}}}],["group",{"_index":1860,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["group.get('password')!.value",{"_index":1879,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["group.get('passwordrepeat')!.value",{"_index":1880,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["grow",{"_index":1466,"title":{},"body":{"components/LogoComponent.html":{}}}],["growdone",{"_index":1445,"title":{},"body":{"components/LogoComponent.html":{}}}],["grundlage",{"_index":2119,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gründe",{"_index":2191,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gründen",{"_index":2167,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["gssddcnlunq2yxzl0evqv_ch4wyzk",{"_index":3353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guest",{"_index":1368,"title":{},"body":{"components/LoginComponent.html":{}}}],["guestlogin",{"_index":1361,"title":{},"body":{"components/LoginComponent.html":{}}}],["gäste",{"_index":1427,"title":{},"body":{"components/LoginComponent.html":{}}}],["h1",{"_index":2343,"title":{},"body":{"components/RegisterComponent.html":{}}}],["haben",{"_index":2067,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["handle",{"_index":1719,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["handlefile",{"_index":2409,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["handlefile(file",{"_index":2413,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["handlefileinput",{"_index":404,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["handlefileinput(event",{"_index":411,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["handleimage",{"_index":2410,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["handleimage(fileorurl",{"_index":2415,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["handlenext",{"_index":1909,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["handler",{"_index":1464,"title":{},"body":{"components/LogoComponent.html":{}}}],["handles",{"_index":413,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{}}}],["hannes",{"_index":1300,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["hast",{"_index":2306,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hat",{"_index":1781,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["header",{"_index":1151,"title":{},"body":{"components/HeaderComponent.html":{},"components/RegisterComponent.html":{}}}],["header'},{'name",{"_index":341,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["header.component.html",{"_index":1152,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header.component.scss",{"_index":1153,"title":{},"body":{"components/HeaderComponent.html":{}}}],["header/header.component",{"_index":965,"title":{},"body":{"components/DashboardComponent.html":{}}}],["headercomponent",{"_index":340,"title":{"components/HeaderComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["headerprofileservice",{"_index":1170,"title":{"injectables/HeaderProfileService.html":{}},"body":{"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ProfileViewComponent.html":{},"coverage.html":{}}}],["headline",{"_index":2333,"title":{},"body":{"components/RegisterComponent.html":{}}}],["height",{"_index":1558,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["help",{"_index":3284,"title":{},"body":{"index.html":{}}}],["helps",{"_index":2503,"title":{},"body":{"components/SearchComponent.html":{}}}],["here",{"_index":3096,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["heupgen",{"_index":1305,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["heute",{"_index":2825,"title":{},"body":{"classes/Thread.html":{}}}],["hidden",{"_index":1577,"title":{},"body":{"components/LogoComponent.html":{},"components/TestComponent.html":{}}}],["hinweise",{"_index":1318,"title":{},"body":{"components/ImprintComponent.html":{}}}],["hinzufügen",{"_index":592,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{}}}],["history",{"_index":1290,"title":{},"body":{"components/ImprintComponent.html":{}}}],["hochladen",{"_index":2003,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["hohenstein",{"_index":1312,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["holds",{"_index":771,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["home",{"_index":1350,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["hope",{"_index":2685,"title":{},"body":{"components/TestComponent.html":{}}}],["horstmann",{"_index":1303,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["hostlistener",{"_index":1494,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["hostlistener('document:visibilitychange",{"_index":2695,"title":{},"body":{"components/TestComponent.html":{}}}],["hostlistener('window:resize",{"_index":1470,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{}}}],["hostlisteners",{"_index":1449,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["hours",{"_index":2853,"title":{},"body":{"classes/Thread.html":{}}}],["hours}:${minutes",{"_index":2858,"title":{},"body":{"classes/Thread.html":{}}}],["hover",{"_index":2339,"title":{},"body":{"components/RegisterComponent.html":{}}}],["hoverreactionbar",{"_index":1590,"title":{},"body":{"classes/Message.html":{}}}],["href",{"_index":942,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["html",{"_index":310,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["htmldivelement",{"_index":409,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["htmlinputelement",{"_index":608,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["http://localhost:4200",{"_index":3260,"title":{},"body":{"index.html":{}}}],["https",{"_index":2161,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["https://firebasestorage.googleapis.com/v0/b/da",{"_index":3319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.bfdi.bund.de",{"_index":2097,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ich",{"_index":2311,"title":{},"body":{"components/RegisterComponent.html":{}}}],["icon",{"_index":1495,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["iconlogowidth",{"_index":1437,"title":{},"body":{"components/LogoComponent.html":{}}}],["id",{"_index":92,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"classes/Message.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["identifier",{"_index":2585,"title":{},"body":{"injectables/SidenavService.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"coverage.html":{}}}],["identify",{"_index":100,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["idle",{"_index":932,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["ids",{"_index":2983,"title":{},"body":{"classes/User.html":{},"classes/UserChat.html":{}}}],["if(currentuserchat",{"_index":3009,"title":{},"body":{"classes/User.html":{}}}],["if(participant",{"_index":802,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["if(this.isimgfileedited",{"_index":920,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["ihnen",{"_index":2145,"title":{},"body":{"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["ihr",{"_index":2162,"title":{},"body":{"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["ihre",{"_index":2024,"title":{},"body":{"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["ihren",{"_index":2215,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ihrer",{"_index":2051,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["ihres",{"_index":2087,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["im",{"_index":2016,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["image",{"_index":418,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"classes/Message.html":{},"injectables/MessageService.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{}}}],["imageasfileorurl",{"_index":2408,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["imageselected",{"_index":1903,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["imageurl",{"_index":505,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"classes/User.html":{}}}],["img",{"_index":317,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["imgelement",{"_index":441,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["imgelement.addeventlistener('click",{"_index":448,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["imgelement.classlist.add('img",{"_index":445,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["imgelement.src",{"_index":443,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["imgfile",{"_index":403,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelThreadComponent.html":{},"classes/User.html":{}}}],["imgfilelink",{"_index":1808,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["imgfileurl",{"_index":1591,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["imgsrcurl",{"_index":1904,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["imgurl",{"_index":3001,"title":{},"body":{"classes/User.html":{}}}],["implementation",{"_index":2484,"title":{},"body":{"components/SearchComponent.html":{}}}],["implements",{"_index":2760,"title":{},"body":{"components/TestComponent.html":{},"index.html":{}}}],["import",{"_index":219,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["important",{"_index":2344,"title":{},"body":{"components/RegisterComponent.html":{}}}],["importprovidersfrom(providefirestore",{"_index":3309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":19,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["impressum",{"_index":1295,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["impressums",{"_index":1346,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint",{"_index":1274,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint'},{'name",{"_index":343,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["imprint.component.html",{"_index":1279,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.component.scss",{"_index":1280,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprintcomponent",{"_index":342,"title":{"components/ImprintComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["inaktiv",{"_index":2257,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["include",{"_index":180,"title":{},"body":{"components/AddChannelComponent.html":{},"components/RegisterComponent.html":{},"classes/User.html":{}}}],["included",{"_index":529,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["includes",{"_index":1139,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["including",{"_index":187,"title":{},"body":{"components/AddChannelComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/SidenavService.html":{}}}],["increases",{"_index":1696,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"miscellaneous/variables.html":{}}}],["index).then",{"_index":2927,"title":{},"body":{"injectables/ThreadService.html":{}}}],["indicates",{"_index":174,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["information",{"_index":176,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EmojiMartComponent.html":{},"components/ImprintComponent.html":{},"components/PasswordResetComponent.html":{},"components/PrivacyComponent.html":{},"components/SearchComponent.html":{}}}],["infos",{"_index":1086,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["inhalte",{"_index":2113,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["init",{"_index":1172,"title":{},"body":{"components/HeaderComponent.html":{}}}],["initfilteredchannel",{"_index":2440,"title":{},"body":{"components/SearchComponent.html":{}}}],["initfilteredusers",{"_index":2441,"title":{},"body":{"components/SearchComponent.html":{}}}],["initial",{"_index":188,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["initialize",{"_index":2779,"title":{},"body":{"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["initializeapp(firebaseconfig",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializes",{"_index":1660,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{}}}],["inject",{"_index":543,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/ViewProfileComponent.html":{}}}],["inject(authservice",{"_index":3312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject(mat_dialog_data",{"_index":533,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/ViewProfileComponent.html":{}}}],["inject(router",{"_index":3313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":1090,"title":{"injectables/EmojiCommunicationService.html":{},"injectables/HeaderProfileService.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}},"body":{"injectables/EmojiCommunicationService.html":{},"injectables/HeaderProfileService.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["injectables",{"_index":1092,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"injectables/HeaderProfileService.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{},"overview.html":{}}}],["injects",{"_index":3109,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["input",{"_index":414,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/TestComponent.html":{}}}],["input.value",{"_index":1071,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["inputelement",{"_index":606,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["inputelement.value.length",{"_index":609,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["inputs",{"_index":406,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["insbesondere",{"_index":2019,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["insert",{"_index":3239,"title":{},"body":{"index.html":{}}}],["instance",{"_index":138,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/Channel.html":{},"components/ChannelThreadComponent.html":{},"components/ImprintComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["instanceof",{"_index":2423,"title":{},"body":{"components/RegisterNextComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["instances",{"_index":1661,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["interaction",{"_index":2490,"title":{},"body":{"components/SearchComponent.html":{}}}],["interessen",{"_index":2193,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["interessenabwägung",{"_index":2173,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["interface",{"_index":3041,"title":{"interfaces/UserChatJson.html":{}},"body":{"interfaces/UserChatJson.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":3043,"title":{},"body":{"interfaces/UserChatJson.html":{}}}],["isauthenticated",{"_index":3317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iscurrentuser",{"_index":828,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["isimgfileedited",{"_index":829,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["isnew",{"_index":3012,"title":{},"body":{"classes/User.html":{}}}],["ispanelopen",{"_index":467,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["isprofileeditview",{"_index":1154,"title":{},"body":{"components/HeaderComponent.html":{}}}],["isprofileview",{"_index":1155,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ist",{"_index":1417,"title":{},"body":{"components/LoginComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["isuserinreaction",{"_index":1649,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["isuserinreaction(chatreaction",{"_index":1680,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["isvalidchannelname",{"_index":46,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["isvalidchannelname(channelname",{"_index":143,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["item",{"_index":2493,"title":{},"body":{"components/SearchComponent.html":{}}}],["items",{"_index":1575,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["iterates",{"_index":755,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/MessageReactionComponent.html":{}}}],["itself",{"_index":1142,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["jan",{"_index":1302,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["januar",{"_index":2836,"title":{},"body":{"classes/Thread.html":{}}}],["jederzeit",{"_index":2033,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["join",{"_index":2957,"title":{},"body":{"classes/User.html":{}}}],["joinchannel",{"_index":2933,"title":{},"body":{"classes/User.html":{}}}],["joinchannel(channelid",{"_index":2954,"title":{},"body":{"classes/User.html":{}}}],["joined",{"_index":2984,"title":{},"body":{"classes/User.html":{}}}],["joins",{"_index":2956,"title":{},"body":{"classes/User.html":{}}}],["json",{"_index":645,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["json.channelid",{"_index":2883,"title":{},"body":{"classes/Thread.html":{}}}],["json.content",{"_index":1627,"title":{},"body":{"classes/Message.html":{}}}],["json.editmode",{"_index":1637,"title":{},"body":{"classes/Message.html":{}}}],["json.emojireactions",{"_index":1635,"title":{},"body":{"classes/Message.html":{}}}],["json.hoverreactionbar",{"_index":1639,"title":{},"body":{"classes/Message.html":{}}}],["json.imgfileurl",{"_index":1628,"title":{},"body":{"classes/Message.html":{}}}],["json.interface.ts",{"_index":3045,"title":{},"body":{"interfaces/UserChatJson.html":{},"coverage.html":{}}}],["json.messages",{"_index":2884,"title":{},"body":{"classes/Thread.html":{}}}],["json.parse(message",{"_index":2862,"title":{},"body":{"classes/Thread.html":{}}}],["json.replies.map((reply",{"_index":1632,"title":{},"body":{"classes/Message.html":{}}}],["json.senderid",{"_index":1625,"title":{},"body":{"classes/Message.html":{}}}],["json.sendername",{"_index":1626,"title":{},"body":{"classes/Message.html":{}}}],["json.stringify(message",{"_index":2924,"title":{},"body":{"injectables/ThreadService.html":{}}}],["json.threadid",{"_index":2882,"title":{},"body":{"classes/Thread.html":{}}}],["json.timestamp",{"_index":1630,"title":{},"body":{"classes/Message.html":{},"classes/Thread.html":{}}}],["jsonmessage",{"_index":2785,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.content",{"_index":2869,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.emojireactions",{"_index":2878,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.imgfileurl",{"_index":2870,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.replies",{"_index":2876,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.senderid",{"_index":2872,"title":{},"body":{"classes/Thread.html":{}}}],["jsonmessage.timestamp",{"_index":2874,"title":{},"body":{"classes/Thread.html":{}}}],["juli",{"_index":2842,"title":{},"body":{"classes/Thread.html":{}}}],["julian",{"_index":1304,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["juni",{"_index":2841,"title":{},"body":{"classes/Thread.html":{}}}],["justify",{"_index":1572,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["kanal",{"_index":593,"title":{},"body":{"components/AddUsersComponent.html":{},"components/PageNotFoundComponent.html":{}}}],["karma",{"_index":3276,"title":{},"body":{"index.html":{}}}],["kb",{"_index":2007,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["keinen",{"_index":2146,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["key",{"_index":3072,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["keyboard",{"_index":497,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["keyboardevent",{"_index":511,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["keys",{"_index":3241,"title":{},"body":{"index.html":{}}}],["kleiner",{"_index":2004,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["kommunikation",{"_index":284,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["kontakt",{"_index":1313,"title":{},"body":{"components/ImprintComponent.html":{}}}],["kontaktdaten",{"_index":2029,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["konto",{"_index":1406,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["können",{"_index":2032,"title":{},"body":{"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["label",{"_index":2619,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["lang",{"_index":297,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["large",{"_index":1938,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["later",{"_index":99,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["leaks",{"_index":167,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["learning",{"_index":2517,"title":{},"body":{"components/SearchComponent.html":{}}}],["leave",{"_index":1021,"title":{},"body":{"components/EditChannelComponent.html":{},"classes/User.html":{}}}],["leavechannel",{"_index":992,"title":{},"body":{"components/EditChannelComponent.html":{},"classes/User.html":{}}}],["leavechannel(channelid",{"_index":2958,"title":{},"body":{"classes/User.html":{}}}],["leaves",{"_index":2960,"title":{},"body":{"classes/User.html":{}}}],["left",{"_index":1508,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["legen",{"_index":2183,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["legend",{"_index":309,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["leider",{"_index":1418,"title":{},"body":{"components/LoginComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["leistungen",{"_index":2114,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["length",{"_index":146,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["less",{"_index":1037,"title":{},"body":{"components/EditChannelComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["leute",{"_index":613,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["line",{"_index":2354,"title":{},"body":{"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["linear",{"_index":1561,"title":{},"body":{"components/LogoComponent.html":{}}}],["link",{"_index":1809,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["links",{"_index":2391,"title":{},"body":{"components/RegisterComponent.html":{}}}],["list",{"_index":190,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["liste",{"_index":1997,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{}}}],["listen",{"_index":1689,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["listener",{"_index":2673,"title":{},"body":{"components/TestComponent.html":{}}}],["lit",{"_index":2122,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["literal",{"_index":483,"title":{},"body":{"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"classes/Message.html":{},"components/PhotoSelectionComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["loaded",{"_index":2479,"title":{},"body":{"components/SearchComponent.html":{}}}],["location",{"_index":1283,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["lock",{"_index":2283,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["lock_outline",{"_index":1420,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{}}}],["log",{"_index":2684,"title":{},"body":{"components/TestComponent.html":{}}}],["logged",{"_index":102,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/TestComponent.html":{}}}],["logic",{"_index":2475,"title":{},"body":{"components/SearchComponent.html":{}}}],["login",{"_index":1354,"title":{},"body":{"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["login'},{'name",{"_index":345,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["login(event",{"_index":1371,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.html",{"_index":1356,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":1357,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":344,"title":{"components/LoginComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["logindata",{"_index":1358,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginfalse",{"_index":1359,"title":{},"body":{"components/LoginComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["loginsuccess",{"_index":1385,"title":{},"body":{"components/LoginComponent.html":{}}}],["logo",{"_index":1430,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["logo'},{'name",{"_index":347,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["logo.component.html",{"_index":1433,"title":{},"body":{"components/LogoComponent.html":{}}}],["logo.component.scss",{"_index":1432,"title":{},"body":{"components/LogoComponent.html":{}}}],["logocomponent",{"_index":346,"title":{"components/LogoComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["logotexturl",{"_index":1438,"title":{},"body":{"components/LogoComponent.html":{}}}],["logout",{"_index":1180,"title":{},"body":{"components/HeaderComponent.html":{},"components/TestComponent.html":{}}}],["logoutuser",{"_index":1160,"title":{},"body":{"components/HeaderComponent.html":{},"components/TestComponent.html":{}}}],["logs",{"_index":127,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["long",{"_index":1029,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["löschen",{"_index":936,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/PrivacyComponent.html":{},"components/TestComponent.html":{}}}],["löschung",{"_index":2050,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["made",{"_index":1026,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["mai",{"_index":2840,"title":{},"body":{"classes/Thread.html":{}}}],["mail",{"_index":379,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["mail.de",{"_index":1317,"title":{},"body":{"components/ImprintComponent.html":{}}}],["mail_outline",{"_index":1415,"title":{},"body":{"components/LoginComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["main",{"_index":1556,"title":{},"body":{"components/LogoComponent.html":{},"injectables/SidenavService.html":{}}}],["making",{"_index":2504,"title":{},"body":{"components/SearchComponent.html":{}}}],["manage",{"_index":171,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["manages",{"_index":1700,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/SidenavService.html":{}}}],["managing",{"_index":961,"title":{},"body":{"components/DashboardComponent.html":{},"components/ViewProfileComponent.html":{}}}],["map",{"_index":546,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["map(isauthenticated",{"_index":3316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(thread",{"_index":3035,"title":{},"body":{"classes/UserChat.html":{}}}],["map(value",{"_index":564,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["margin",{"_index":1582,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["marginleft",{"_index":1439,"title":{},"body":{"components/LogoComponent.html":{}}}],["marketing",{"_index":290,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["mart",{"_index":1119,"title":{},"body":{"components/EmojiMartComponent.html":{},"dependencies.html":{}}}],["mart'},{'name",{"_index":335,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["mart.component",{"_index":891,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["mart.component.html",{"_index":1121,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.scss",{"_index":1122,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts",{"_index":1118,"title":{},"body":{"components/EmojiMartComponent.html":{},"coverage.html":{}}}],["mart.component.ts:19",{"_index":1132,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts:20",{"_index":1133,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts:21",{"_index":1131,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts:22",{"_index":1134,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts:23",{"_index":1129,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart.component.ts:40",{"_index":1136,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["mart/emoji",{"_index":890,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/EmojiMartComponent.html":{},"coverage.html":{}}}],["mat",{"_index":2320,"title":{},"body":{"components/RegisterComponent.html":{}}}],["mat_dialog_data",{"_index":544,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/ViewProfileComponent.html":{}}}],["matautocompletemodule",{"_index":462,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["matautocompletetrigger",{"_index":2505,"title":{},"body":{"components/SearchComponent.html":{}}}],["matbutton",{"_index":2403,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["matbuttonmodule",{"_index":461,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["matcard",{"_index":1277,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterNextComponent.html":{}}}],["matcardcontent",{"_index":1278,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterNextComponent.html":{}}}],["matcardmodule",{"_index":1355,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["match",{"_index":82,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PasswordResetComponent.html":{},"components/SearchComponent.html":{}}}],["matcheckboxmodule",{"_index":1896,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{}}}],["matches",{"_index":79,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["matching",{"_index":394,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchipsmodule",{"_index":459,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["matdialog",{"_index":54,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["matdialogclose",{"_index":2655,"title":{},"body":{"components/TestComponent.html":{}}}],["matdialogcontent",{"_index":3105,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["matdialogmodule",{"_index":2654,"title":{},"body":{"components/TestComponent.html":{}}}],["matdialogref",{"_index":482,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{}}}],["material",{"_index":845,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["matformfield",{"_index":974,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["matformfieldmodule",{"_index":460,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{}}}],["math.round(file?.size",{"_index":1983,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["maticon",{"_index":1846,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["maticonmodule",{"_index":457,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["matinputmodule",{"_index":976,"title":{},"body":{"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{}}}],["matlabel",{"_index":975,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["matmenumodule",{"_index":399,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{}}}],["matmenutrigger",{"_index":398,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{}}}],["matradiomodule",{"_index":455,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["matselectmodule",{"_index":458,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["matsnackbar",{"_index":2610,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["max",{"_index":1578,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["media",{"_index":2393,"title":{},"body":{"components/RegisterComponent.html":{}}}],["mehr",{"_index":2184,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["melde",{"_index":2276,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["memberof",{"_index":1293,"title":{},"body":{"components/ImprintComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["members",{"_index":172,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["members'},{'name",{"_index":320,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["members.component",{"_index":228,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["members.component.html",{"_index":665,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.scss",{"_index":666,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts",{"_index":664,"title":{},"body":{"components/ChannelMembersComponent.html":{},"coverage.html":{}}}],["members.component.ts:106",{"_index":671,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:125",{"_index":683,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:143",{"_index":676,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:159",{"_index":682,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:171",{"_index":674,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:183",{"_index":673,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:195",{"_index":692,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:211",{"_index":675,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:40",{"_index":698,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:41",{"_index":699,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:42",{"_index":700,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:43",{"_index":701,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:44",{"_index":697,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:45",{"_index":696,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:46",{"_index":669,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:52",{"_index":695,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:53",{"_index":694,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:54",{"_index":693,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:71",{"_index":672,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members.component.ts:84",{"_index":670,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["members/channel",{"_index":227,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"coverage.html":{}}}],["memory",{"_index":166,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["menu",{"_index":513,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ProfileViewComponent.html":{}}}],["menuopened",{"_index":1191,"title":{},"body":{"components/HeaderComponent.html":{}}}],["menus/profile",{"_index":1204,"title":{},"body":{"components/HeaderComponent.html":{}}}],["message",{"_index":104,"title":{"classes/Message.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["message'},{'name",{"_index":318,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["message(jsonmessage.senderid",{"_index":2868,"title":{},"body":{"classes/Thread.html":{}}}],["message(sender",{"_index":3017,"title":{},"body":{"classes/User.html":{}}}],["message(this",{"_index":3004,"title":{},"body":{"classes/User.html":{}}}],["message.class",{"_index":2807,"title":{},"body":{"classes/Thread.html":{},"classes/User.html":{}}}],["message.component.html",{"_index":400,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.scss",{"_index":401,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.ts",{"_index":397,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"coverage.html":{}}}],["message.component.ts:16",{"_index":432,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.ts:17",{"_index":410,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.ts:18",{"_index":408,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.ts:29",{"_index":412,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.component.ts:51",{"_index":426,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["message.editmode",{"_index":1636,"title":{},"body":{"classes/Message.html":{}}}],["message.emojireactions",{"_index":1634,"title":{},"body":{"classes/Message.html":{}}}],["message.emojireactions.push(emoji",{"_index":3019,"title":{},"body":{"classes/User.html":{}}}],["message.fromjson(reply",{"_index":1633,"title":{},"body":{"classes/Message.html":{}}}],["message.hoverreactionbar",{"_index":1638,"title":{},"body":{"classes/Message.html":{}}}],["message.replies",{"_index":1631,"title":{},"body":{"classes/Message.html":{}}}],["message.replies.push(replymessage",{"_index":3018,"title":{},"body":{"classes/User.html":{}}}],["message.timestamp",{"_index":1629,"title":{},"body":{"classes/Message.html":{}}}],["message/add",{"_index":396,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"coverage.html":{}}}],["message/full",{"_index":3144,"title":{},"body":{"coverage.html":{}}}],["messagecontent",{"_index":2962,"title":{},"body":{"classes/User.html":{}}}],["messageelement",{"_index":874,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["messageelement.messages[0].content",{"_index":918,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["messageelement.messages[0].imgfileurl",{"_index":924,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["messageobject",{"_index":2863,"title":{},"body":{"classes/Thread.html":{}}}],["messageobject.emojireactions",{"_index":2877,"title":{},"body":{"classes/Thread.html":{}}}],["messageobject.replies",{"_index":2875,"title":{},"body":{"classes/Thread.html":{}}}],["messageobject.senderid",{"_index":2871,"title":{},"body":{"classes/Thread.html":{}}}],["messageobject.timestamp",{"_index":2873,"title":{},"body":{"classes/Thread.html":{}}}],["messageownerid",{"_index":858,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["messagereaction",{"_index":830,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["messagereactioncomponent",{"_index":348,"title":{"components/MessageReactionComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["messages",{"_index":149,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/SidenavService.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{}}}],["messageservice",{"_index":1784,"title":{"injectables/MessageService.html":{}},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["messagestringtojson",{"_index":2776,"title":{},"body":{"classes/Thread.html":{}}}],["messagetimestamp",{"_index":1100,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["messaging_sender_id",{"_index":3253,"title":{},"body":{"index.html":{}}}],["messagingsenderid",{"_index":3252,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":12,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["method",{"_index":72,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"components/LoginComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["methods",{"_index":40,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["min",{"_index":2325,"title":{},"body":{"components/RegisterComponent.html":{}}}],["mind",{"_index":2285,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["mindestens",{"_index":294,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["minutes",{"_index":2855,"title":{},"body":{"classes/Thread.html":{}}}],["miscellaneous",{"_index":3291,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1861,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["mit",{"_index":1344,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["mitglieder",{"_index":724,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{}}}],["mithilfe",{"_index":2226,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["mittwoch",{"_index":2831,"title":{},"body":{"classes/Thread.html":{}}}],["mixin.scss",{"_index":1555,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["modal",{"_index":2698,"title":{},"body":{"components/TestComponent.html":{}}}],["mode",{"_index":1035,"title":{},"body":{"components/EditChannelComponent.html":{},"components/ProfileViewComponent.html":{}}}],["model",{"_index":2674,"title":{},"body":{"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["models/channel.class",{"_index":225,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{}}}],["models/message.class",{"_index":1114,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{}}}],["models/thread.class",{"_index":889,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["models/user.class",{"_index":229,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["modules",{"_index":3288,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["montag",{"_index":2829,"title":{},"body":{"classes/Thread.html":{}}}],["month",{"_index":2788,"title":{},"body":{"classes/Thread.html":{}}}],["monthname",{"_index":2850,"title":{},"body":{"classes/Thread.html":{}}}],["months",{"_index":2835,"title":{},"body":{"classes/Thread.html":{}}}],["months[month",{"_index":2851,"title":{},"body":{"classes/Thread.html":{}}}],["more",{"_index":3285,"title":{},"body":{"index.html":{}}}],["move",{"_index":1473,"title":{},"body":{"components/LogoComponent.html":{}}}],["muss",{"_index":293,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["mustermann",{"_index":2310,"title":{},"body":{"components/RegisterComponent.html":{}}}],["märz",{"_index":2838,"title":{},"body":{"classes/Thread.html":{}}}],["nach",{"_index":2164,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nachricht",{"_index":934,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/ViewProfileComponent.html":{}}}],["nachweisen",{"_index":2192,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["name",{"_index":62,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"index.html":{}}}],["namen",{"_index":2304,"title":{},"body":{"components/RegisterComponent.html":{}}}],["native",{"_index":1141,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["navigate",{"_index":1864,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"index.html":{}}}],["navigates",{"_index":1288,"title":{},"body":{"components/ImprintComponent.html":{},"components/LogoComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["navigating",{"_index":1285,"title":{},"body":{"components/ImprintComponent.html":{}}}],["ndern",{"_index":1889,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["nderung",{"_index":2201,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nderungen",{"_index":2210,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["need",{"_index":2893,"title":{},"body":{"injectables/ThreadService.html":{},"index.html":{}}}],["needed",{"_index":2682,"title":{},"body":{"components/TestComponent.html":{}}}],["neu",{"_index":1404,"title":{},"body":{"components/LoginComponent.html":{}}}],["neue",{"_index":2219,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["neuer",{"_index":2214,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["neues",{"_index":2308,"title":{},"body":{"components/RegisterComponent.html":{}}}],["new",{"_index":115,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{},"index.html":{}}}],["newchanneldata",{"_index":261,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["newemail",{"_index":2658,"title":{},"body":{"components/TestComponent.html":{}}}],["newfullname",{"_index":2659,"title":{},"body":{"components/TestComponent.html":{}}}],["newmessage",{"_index":3003,"title":{},"body":{"classes/User.html":{}}}],["newmessages",{"_index":2860,"title":{},"body":{"classes/Thread.html":{}}}],["newmessages.push(messageobject",{"_index":2865,"title":{},"body":{"classes/Thread.html":{}}}],["newpassword",{"_index":1882,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["newthread",{"_index":3006,"title":{},"body":{"classes/User.html":{}}}],["newthread.messages.push(json.stringify(newmessage",{"_index":3008,"title":{},"body":{"classes/User.html":{}}}],["newthread.messages.push(newmessage",{"_index":3010,"title":{},"body":{"classes/User.html":{}}}],["next",{"_index":589,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{}}}],["next'},{'name",{"_index":374,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["next.component.html",{"_index":2406,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next.component.scss",{"_index":2407,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next.component.ts",{"_index":2402,"title":{},"body":{"components/RegisterNextComponent.html":{},"coverage.html":{}}}],["next.component.ts:30",{"_index":2412,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next.component.ts:43",{"_index":2414,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next.component.ts:52",{"_index":2416,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next.component.ts:60",{"_index":2418,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["next/register",{"_index":2401,"title":{},"body":{"components/RegisterNextComponent.html":{},"coverage.html":{}}}],["ng",{"_index":3257,"title":{},"body":{"index.html":{}}}],["ngforof",{"_index":2404,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["ngif",{"_index":2405,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["ngonchanges",{"_index":743,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["ngonchanges(changes",{"_index":766,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["ngondestroy",{"_index":47,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["ngoninit",{"_index":744,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["nicht",{"_index":2059,"title":{},"body":{"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{}}}],["nichtöffentlichen",{"_index":2093,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["noch",{"_index":1335,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["nochmals",{"_index":2278,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["none",{"_index":2368,"title":{},"body":{"components/RegisterComponent.html":{}}}],["normal",{"_index":2360,"title":{},"body":{"components/RegisterComponent.html":{}}}],["notifies",{"_index":1801,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["november",{"_index":2846,"title":{},"body":{"classes/Thread.html":{}}}],["nr",{"_index":2182,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["null",{"_index":210,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{}}}],["number",{"_index":1101,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{}}}],["nunito",{"_index":2350,"title":{},"body":{"components/RegisterComponent.html":{}}}],["nur",{"_index":2133,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["nutzen",{"_index":1412,"title":{},"body":{"components/LoginComponent.html":{}}}],["nutzers",{"_index":2120,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["obj",{"_index":852,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["obj.messages[0].imgfileurl",{"_index":930,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["object",{"_index":133,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/Channel.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":757,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"classes/Thread.html":{}}}],["observable",{"_index":500,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/DashboardComponent.html":{},"components/HeaderComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["observers",{"_index":1802,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["occurred",{"_index":928,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["occurs",{"_index":107,"title":{},"body":{"components/AddChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{}}}],["oder",{"_index":1424,"title":{},"body":{"components/LoginComponent.html":{},"components/PrivacyComponent.html":{}}}],["offline",{"_index":1243,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["oh",{"_index":927,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/StorageService.html":{}}}],["ohne",{"_index":2144,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["oktober",{"_index":2845,"title":{},"body":{"classes/Thread.html":{}}}],["old",{"_index":421,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["once",{"_index":2759,"title":{},"body":{"components/TestComponent.html":{}}}],["ondestroy",{"_index":2761,"title":{},"body":{"components/TestComponent.html":{}}}],["one",{"_index":424,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/TestComponent.html":{}}}],["online",{"_index":2255,"title":{},"body":{"components/ProfileViewComponent.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["onlinestatus",{"_index":1242,"title":{},"body":{"components/HeaderComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["onnext",{"_index":1914,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["onnextstep",{"_index":2290,"title":{},"body":{"components/RegisterComponent.html":{}}}],["onregistrationfinished",{"_index":2411,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["onresize",{"_index":1446,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{}}}],["onresize(event",{"_index":1469,"title":{},"body":{"components/LogoComponent.html":{}}}],["onselectedavatar",{"_index":1910,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["onselectedavatar(avatarurl",{"_index":1941,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["onselectedfile",{"_index":1911,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["onselectedfile(event",{"_index":1944,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["onselection",{"_index":2442,"title":{},"body":{"components/SearchComponent.html":{}}}],["onvisibilitychange",{"_index":2666,"title":{},"body":{"components/TestComponent.html":{}}}],["oops",{"_index":1840,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["opacity",{"_index":1220,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["open",{"_index":198,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{}}}],["openaddusersdialog",{"_index":745,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["openchannelmembersdialog",{"_index":48,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["opencurrentfullthreadsource",{"_index":1787,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["opencurrentthread",{"_index":960,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["opened",{"_index":173,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/SidenavService.html":{}}}],["openfullthread",{"_index":1796,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["openfullthread(openfullthreadboolean",{"_index":1816,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["openfullthreadboolean",{"_index":1818,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["opening",{"_index":183,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{}}}],["openloginmodal",{"_index":2667,"title":{},"body":{"components/TestComponent.html":{}}}],["openloginmodal(source",{"_index":2696,"title":{},"body":{"components/TestComponent.html":{}}}],["openmenu",{"_index":475,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["openmenu(trigger",{"_index":510,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["openprofile",{"_index":1161,"title":{},"body":{"components/HeaderComponent.html":{},"components/SearchComponent.html":{}}}],["openprofile(event",{"_index":1184,"title":{},"body":{"components/HeaderComponent.html":{}}}],["openprofile(participant",{"_index":2494,"title":{},"body":{"components/SearchComponent.html":{}}}],["opens",{"_index":169,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{}}}],["openthread",{"_index":839,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{}}}],["openthread(thread",{"_index":867,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["openthreadboolean",{"_index":971,"title":{},"body":{"components/DashboardComponent.html":{}}}],["operation",{"_index":490,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["operations",{"_index":962,"title":{},"body":{"components/DashboardComponent.html":{},"components/MessageReactionComponent.html":{}}}],["opposite",{"_index":1014,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["option",{"_index":678,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["optional",{"_index":64,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["optional()@inject(mat_dialog_data",{"_index":1948,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["organisation",{"_index":2225,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["original",{"_index":2898,"title":{},"body":{"injectables/ThreadService.html":{}}}],["originthread",{"_index":2897,"title":{},"body":{"injectables/ThreadService.html":{}}}],["originthread.messages",{"_index":2916,"title":{},"body":{"injectables/ThreadService.html":{}}}],["otherwise",{"_index":84,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"injectables/SidenavService.html":{}}}],["out",{"_index":499,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/TestComponent.html":{},"index.html":{}}}],["outline",{"_index":2370,"title":{},"body":{"components/RegisterComponent.html":{}}}],["output",{"_index":1962,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{}}}],["outputs",{"_index":1917,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{}}}],["over",{"_index":756,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["overflow",{"_index":1576,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["overview",{"_index":3287,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":1803,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["package",{"_index":3212,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":2330,"title":{},"body":{"components/RegisterComponent.html":{}}}],["page",{"_index":351,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"index.html":{}}}],["pagenotfoundcomponent",{"_index":350,"title":{"components/PageNotFoundComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["pair",{"_index":3073,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["panel",{"_index":1187,"title":{},"body":{"components/HeaderComponent.html":{}}}],["param",{"_index":254,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["parameters",{"_index":60,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["params",{"_index":1500,"title":{},"body":{"components/LogoComponent.html":{}}}],["part",{"_index":2987,"title":{},"body":{"classes/User.html":{}}}],["partial",{"_index":1598,"title":{},"body":{"classes/Message.html":{}}}],["participant",{"_index":189,"title":{},"body":{"components/AddChannelComponent.html":{},"classes/Channel.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["participant.id",{"_index":810,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participant.imageurl",{"_index":818,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participant.name",{"_index":819,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants",{"_index":489,"title":{},"body":{"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{}}}],["participants'},{'name",{"_index":326,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["participants.component.html",{"_index":737,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.scss",{"_index":738,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts",{"_index":736,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"coverage.html":{}}}],["participants.component.ts:103",{"_index":783,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:113",{"_index":779,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:124",{"_index":776,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:18",{"_index":749,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:20",{"_index":787,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:22",{"_index":750,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:23",{"_index":752,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:24",{"_index":751,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:26",{"_index":785,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:28",{"_index":786,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:31",{"_index":775,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:43",{"_index":768,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:54",{"_index":780,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:67",{"_index":753,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants.component.ts:86",{"_index":758,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["participants/channel",{"_index":735,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"coverage.html":{}}}],["particular",{"_index":162,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["parts",{"_index":2584,"title":{},"body":{"injectables/SidenavService.html":{}}}],["passed",{"_index":1925,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/ViewProfileComponent.html":{}}}],["password",{"_index":354,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["password'},{'name",{"_index":381,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["password.component.html",{"_index":2554,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password.component.scss",{"_index":2555,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password.component.ts",{"_index":2553,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{},"coverage.html":{}}}],["password.component.ts:42",{"_index":2561,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password.component.ts:43",{"_index":2558,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password.component.ts:55",{"_index":2560,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password.component.ts:64",{"_index":2559,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["password/send",{"_index":2552,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{},"coverage.html":{}}}],["passworddata",{"_index":1850,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["passwordmatchvalidator",{"_index":1851,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["passwordmatchvalidator(group",{"_index":1856,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["passwordrepeat",{"_index":1877,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["passwordresetcomponent",{"_index":353,"title":{"components/PasswordResetComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["passwords",{"_index":1859,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["passwort",{"_index":1422,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["pc",{"_index":2259,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["pdf",{"_index":945,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["performchanneladdition",{"_index":668,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["performs",{"_index":95,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["person",{"_index":2224,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["personenbezogene",{"_index":2104,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["personenbezogenen",{"_index":2140,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["personenbezogener",{"_index":2048,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["pflichten",{"_index":2058,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["photo",{"_index":357,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"miscellaneous/variables.html":{}}}],["photoselectioncomponent",{"_index":356,"title":{"components/PhotoSelectionComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["pickercomponent",{"_index":1120,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["pirhofer",{"_index":1301,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["pixels",{"_index":2458,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["placeholder",{"_index":2436,"title":{},"body":{"components/SearchComponent.html":{}}}],["platform",{"_index":3278,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":2342,"title":{},"body":{"components/RegisterComponent.html":{}}}],["populates",{"_index":2481,"title":{},"body":{"components/SearchComponent.html":{}}}],["position",{"_index":1566,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["possible",{"_index":506,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["post",{"_index":123,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["postanschrift",{"_index":1308,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["postchannelcreation",{"_index":49,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["potential",{"_index":2486,"title":{},"body":{"components/SearchComponent.html":{}}}],["preconditions",{"_index":1038,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["prefetch",{"_index":933,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["prepare",{"_index":201,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["preparenewchanneldata",{"_index":50,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["preparenewchanneldata(title",{"_index":184,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["prepares",{"_index":186,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["present",{"_index":1138,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["prevent",{"_index":1686,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["previous",{"_index":772,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/ImprintComponent.html":{}}}],["previously",{"_index":1040,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["privacy",{"_index":2009,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["privacy'},{'name",{"_index":360,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["privacy.component.html",{"_index":2010,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["privacy.component.scss",{"_index":2011,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["privacycomponent",{"_index":359,"title":{"components/PrivacyComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["private",{"_index":38,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["proceeds",{"_index":122,"title":{},"body":{"components/AddChannelComponent.html":{},"components/RegisterComponent.html":{}}}],["process",{"_index":524,"title":{},"body":{"components/AddUsersComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["processed",{"_index":765,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["processemojireactions",{"_index":1650,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["processes",{"_index":1691,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["processing",{"_index":1693,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["profil",{"_index":1251,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/ViewProfileComponent.html":{}}}],["profile",{"_index":362,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{}}}],["profile.component",{"_index":790,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{}}}],["profile.component.html",{"_index":3106,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.component.scss",{"_index":3107,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.component.ts",{"_index":3104,"title":{},"body":{"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["profile.component.ts:13",{"_index":3108,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.component.ts:22",{"_index":3111,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.component.ts:23",{"_index":3112,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.component.ts:31",{"_index":3110,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["profile.service",{"_index":1210,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["profile.service.ts",{"_index":1253,"title":{},"body":{"injectables/HeaderProfileService.html":{},"coverage.html":{}}}],["profile.service.ts:10",{"_index":1267,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:12",{"_index":1262,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:13",{"_index":1264,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:19",{"_index":1259,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:28",{"_index":1260,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:37",{"_index":1258,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile.service.ts:9",{"_index":1265,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profile/view",{"_index":789,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["profileeditcomponent",{"_index":361,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["profileeditstate",{"_index":1254,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profileeditsub",{"_index":1156,"title":{},"body":{"components/HeaderComponent.html":{}}}],["profileservice",{"_index":1169,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["profileviewcomponent",{"_index":364,"title":{"components/ProfileViewComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["profileviewstate",{"_index":1255,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["profileviewsub",{"_index":1157,"title":{},"body":{"components/HeaderComponent.html":{}}}],["profiling",{"_index":2181,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["project",{"_index":3231,"title":{},"body":{"index.html":{}}}],["project_id",{"_index":3243,"title":{},"body":{"index.html":{}}}],["projectid",{"_index":3242,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":679,"title":{},"body":{"components/ChannelMembersComponent.html":{},"injectables/MessageService.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["promise((resolve",{"_index":719,"title":{},"body":{"components/ChannelMembersComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["properties",{"_index":27,"title":{"properties.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["provideanimations",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":80,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{}}}],["providedin",{"_index":1115,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"injectables/HeaderProfileService.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["providefirebaseapp",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestorage",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":32,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["purposes",{"_index":2595,"title":{},"body":{"injectables/SidenavService.html":{}}}],["querysnapshot.foreach(docsnapshot",{"_index":709,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["radius",{"_index":2328,"title":{},"body":{"components/RegisterComponent.html":{}}}],["raisereactioncount",{"_index":1651,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["raisereactioncount(chatreaction",{"_index":1694,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["ratio",{"_index":1525,"title":{},"body":{"components/LogoComponent.html":{}}}],["re",{"_index":367,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["reaches",{"_index":1716,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["react",{"_index":1663,"title":{},"body":{"components/MessageReactionComponent.html":{},"classes/User.html":{}}}],["reacted",{"_index":2947,"title":{},"body":{"classes/User.html":{}}}],["reaction",{"_index":1642,"title":{},"body":{"components/MessageReactionComponent.html":{},"classes/User.html":{}}}],["reaction'},{'name",{"_index":349,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["reaction.component",{"_index":894,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["reaction.component.html",{"_index":1643,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.scss",{"_index":1644,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts",{"_index":1641,"title":{},"body":{"components/MessageReactionComponent.html":{},"coverage.html":{}}}],["reaction.component.ts:105",{"_index":1706,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:121",{"_index":1709,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:138",{"_index":1699,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:170",{"_index":1681,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:183",{"_index":1712,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:199",{"_index":1695,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:20",{"_index":1669,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:21",{"_index":1667,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:211",{"_index":1679,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:22",{"_index":1668,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:225",{"_index":1683,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:23",{"_index":1670,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:24",{"_index":1671,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:26",{"_index":1720,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:28",{"_index":1659,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:59",{"_index":1687,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:78",{"_index":1692,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.component.ts:92",{"_index":1673,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.users",{"_index":1746,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction.usersdetail",{"_index":1747,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reaction/message",{"_index":893,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/MessageReactionComponent.html":{},"coverage.html":{}}}],["reactionexists",{"_index":1749,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions",{"_index":1664,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{}}}],["reactions.count",{"_index":1783,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.reaction",{"_index":1771,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.users.length",{"_index":1776,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.users[0].id",{"_index":1772,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.users[0].name",{"_index":1774,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.users[1].id",{"_index":1777,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactions.users[1].name",{"_index":1778,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactionuserid",{"_index":1740,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactionuserid.id",{"_index":1741,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reactiveformsmodule",{"_index":456,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["reactor",{"_index":2945,"title":{},"body":{"classes/User.html":{}}}],["reactor.name",{"_index":3020,"title":{},"body":{"classes/User.html":{}}}],["reacts",{"_index":1665,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reacttothread",{"_index":1652,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reacttothread(threadmessage",{"_index":1698,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reader",{"_index":437,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["reader.onerror",{"_index":1993,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["reader.onload",{"_index":1992,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["reader.onloadend",{"_index":440,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["reader.readasdataurl(file",{"_index":450,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["reader.result",{"_index":444,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["reading",{"_index":1994,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["reads",{"_index":416,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["ready",{"_index":192,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["reagiert",{"_index":1782,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reauthenticate",{"_index":2668,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthenticate(email",{"_index":2700,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthenticated",{"_index":2738,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthenticates",{"_index":2702,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthenticateuser",{"_index":2267,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["reauthenticateuser(email",{"_index":2679,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthenticateusercomponent",{"_index":366,"title":{"components/ReAuthenticateUserComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["reauthentification",{"_index":2699,"title":{},"body":{"components/TestComponent.html":{}}}],["reauthform",{"_index":2266,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["receive",{"_index":856,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/PasswordResetComponent.html":{}}}],["received",{"_index":1666,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["recht",{"_index":2166,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["rechte",{"_index":2035,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["rechtlichen",{"_index":2207,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["rechtsansprüchen",{"_index":2200,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["rechtsgrundlage",{"_index":2116,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["recipient",{"_index":2970,"title":{},"body":{"classes/User.html":{}}}],["recipient.id",{"_index":3013,"title":{},"body":{"classes/User.html":{}}}],["recipient.userchats.push(currentuserchat",{"_index":3015,"title":{},"body":{"classes/User.html":{}}}],["ref",{"_index":899,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["ref(storage",{"_index":922,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{}}}],["reference",{"_index":1924,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"index.html":{}}}],["register",{"_index":373,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["register'},{'name",{"_index":371,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["register.component.html",{"_index":2288,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.scss",{"_index":2287,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registercomponent",{"_index":370,"title":{"components/RegisterComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["registerform",{"_index":2289,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registerform.status",{"_index":2313,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registernextcomponent",{"_index":372,"title":{"components/RegisterNextComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["registration",{"_index":1923,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["registration.service",{"_index":1964,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["registration.service.ts",{"_index":3047,"title":{},"body":{"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["registration.service.ts:100",{"_index":3061,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:110",{"_index":3062,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:127",{"_index":3066,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:13",{"_index":3058,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:26",{"_index":3064,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:34",{"_index":3060,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:43",{"_index":3059,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:52",{"_index":3074,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:68",{"_index":3071,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registration.service.ts:75",{"_index":3067,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["registrierung",{"_index":2098,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["reject",{"_index":720,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["related",{"_index":1690,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["relative",{"_index":1567,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["reload",{"_index":3262,"title":{},"body":{"index.html":{}}}],["remain",{"_index":205,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["remove",{"_index":642,"title":{},"body":{"classes/Channel.html":{},"components/ChannelParticipantsComponent.html":{}}}],["removeauthuser",{"_index":2687,"title":{},"body":{"components/TestComponent.html":{}}}],["removed",{"_index":784,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["removefirestoreuser",{"_index":2688,"title":{},"body":{"components/TestComponent.html":{}}}],["removeimage",{"_index":405,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["removeparticipant",{"_index":629,"title":{},"body":{"classes/Channel.html":{}}}],["removeparticipant(user",{"_index":640,"title":{},"body":{"classes/Channel.html":{}}}],["removepasswordfromuserobject",{"_index":3051,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["removes",{"_index":420,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["removeuser",{"_index":476,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["removeuser(userid",{"_index":519,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["removing",{"_index":1702,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["reopened",{"_index":1189,"title":{},"body":{"components/HeaderComponent.html":{}}}],["replies",{"_index":1592,"title":{},"body":{"classes/Message.html":{}}}],["reply",{"_index":2951,"title":{},"body":{"classes/User.html":{}}}],["reply.tojson",{"_index":1624,"title":{},"body":{"classes/Message.html":{}}}],["replycontent",{"_index":2949,"title":{},"body":{"classes/User.html":{}}}],["replymessage",{"_index":3016,"title":{},"body":{"classes/User.html":{}}}],["replytothread",{"_index":2963,"title":{},"body":{"classes/User.html":{}}}],["replytothread.messages.push(newmessage",{"_index":3005,"title":{},"body":{"classes/User.html":{}}}],["representation",{"_index":646,"title":{},"body":{"classes/Channel.html":{},"components/EmojiMartComponent.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["represents",{"_index":626,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["request",{"_index":1813,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["required",{"_index":1928,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["reset",{"_index":380,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["reset'},{'name",{"_index":355,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["reset.component.html",{"_index":1847,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset.component.scss",{"_index":1848,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset.component.ts",{"_index":1845,"title":{},"body":{"components/PasswordResetComponent.html":{},"coverage.html":{}}}],["reset.component.ts:42",{"_index":1865,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset.component.ts:43",{"_index":1854,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset.component.ts:68",{"_index":1858,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset.component.ts:78",{"_index":1862,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["reset/password",{"_index":1844,"title":{},"body":{"components/PasswordResetComponent.html":{},"coverage.html":{}}}],["resetform",{"_index":51,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["resetmenustate",{"_index":1162,"title":{},"body":{"components/HeaderComponent.html":{}}}],["resetpassword",{"_index":1852,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["resets",{"_index":195,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"components/SearchComponent.html":{}}}],["resetting",{"_index":181,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["resize",{"_index":1472,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{}}}],["resizeandmovedone",{"_index":1447,"title":{},"body":{"components/LogoComponent.html":{}}}],["resized",{"_index":2449,"title":{},"body":{"components/SearchComponent.html":{}}}],["resolve",{"_index":722,"title":{},"body":{"components/ChannelMembersComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["resolves",{"_index":680,"title":{},"body":{"components/ChannelMembersComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["resources",{"_index":161,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["responds",{"_index":769,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["responsive",{"_index":2452,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["results",{"_index":393,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1676,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["retrieved",{"_index":764,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["retrieves",{"_index":754,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["return",{"_index":260,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":81,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["rgba(0",{"_index":2378,"title":{},"body":{"components/RegisterComponent.html":{}}}],["right",{"_index":2392,"title":{},"body":{"components/RegisterComponent.html":{}}}],["rollback",{"_index":2681,"title":{},"body":{"components/TestComponent.html":{}}}],["root",{"_index":617,"title":{},"body":{"components/AppComponent.html":{},"injectables/EmojiCommunicationService.html":{},"injectables/HeaderProfileService.html":{},"injectables/MessageService.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["root'},{'name",{"_index":322,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["route",{"_index":1453,"title":{},"body":{"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":1168,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["router.createurltree(['/login",{"_index":3318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routerlink",{"_index":977,"title":{},"body":{"components/EditChannelComponent.html":{},"components/LoginComponent.html":{},"components/RegisterNextComponent.html":{},"components/ViewProfileComponent.html":{}}}],["routermodule",{"_index":1276,"title":{},"body":{"components/ImprintComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["routeroutlet",{"_index":618,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{}}}],["row",{"_index":2335,"title":{},"body":{"components/RegisterComponent.html":{}}}],["run",{"_index":3256,"title":{},"body":{"index.html":{}}}],["running",{"_index":3272,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":230,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"dependencies.html":{}}}],["same",{"_index":1008,"title":{},"body":{"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["samstag",{"_index":2834,"title":{},"body":{"classes/Thread.html":{}}}],["sans",{"_index":2351,"title":{},"body":{"components/RegisterComponent.html":{}}}],["save",{"_index":477,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{}}}],["saved",{"_index":97,"title":{},"body":{"components/AddChannelComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["savedescriptionchanges",{"_index":993,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["saveeditmessage",{"_index":840,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["saveeditmessage(messageelement",{"_index":869,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["savefirebaseuser",{"_index":3052,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["savenamechanges",{"_index":994,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["saves",{"_index":684,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["saveuserdata",{"_index":3053,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["saveuserdata(data",{"_index":3063,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["saveusertofirebase",{"_index":3054,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["saveusertofirebase(user",{"_index":3065,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["saving",{"_index":523,"title":{},"body":{"components/AddUsersComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["scaffolding",{"_index":3264,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1517,"title":{},"body":{"components/LogoComponent.html":{}}}],["scale(1",{"_index":1510,"title":{},"body":{"components/LogoComponent.html":{}}}],["scale({{scalefactor",{"_index":1513,"title":{},"body":{"components/LogoComponent.html":{}}}],["scalefactor",{"_index":1440,"title":{},"body":{"components/LogoComponent.html":{}}}],["scenarios",{"_index":688,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["schneider",{"_index":1307,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["schreiben",{"_index":2222,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["schutzwürdige",{"_index":2190,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["schöne",{"_index":1309,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["schützen",{"_index":2156,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["screen",{"_index":1554,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["screenissmall",{"_index":2574,"title":{},"body":{"injectables/SidenavService.html":{}}}],["screens",{"_index":2462,"title":{},"body":{"components/SearchComponent.html":{}}}],["search",{"_index":1707,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{}}}],["search'},{'name",{"_index":376,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["search.component.html",{"_index":2432,"title":{},"body":{"components/SearchComponent.html":{}}}],["search.component.scss",{"_index":2433,"title":{},"body":{"components/SearchComponent.html":{}}}],["search/search.component",{"_index":1215,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchcomponent",{"_index":375,"title":{"components/SearchComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["searches",{"_index":73,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/MessageReactionComponent.html":{}}}],["searchinput",{"_index":2437,"title":{},"body":{"components/SearchComponent.html":{}}}],["searchobjects",{"_index":2548,"title":{},"body":{"components/SearchComponent.html":{}}}],["searchobjects.name",{"_index":2549,"title":{},"body":{"components/SearchComponent.html":{}}}],["searchobjects.title",{"_index":2550,"title":{},"body":{"components/SearchComponent.html":{}}}],["searchuserinreactions",{"_index":1653,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["searchuserinreactions(user",{"_index":1704,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["seconds",{"_index":2614,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["sei",{"_index":2187,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sein",{"_index":289,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["select",{"_index":1894,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selected",{"_index":417,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{}}}],["selectedimg",{"_index":1918,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selectedoption",{"_index":667,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["selectedusers",{"_index":468,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["selectedusers.length",{"_index":730,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["selectedusersids",{"_index":469,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["selectedusersids.length",{"_index":729,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["selecting",{"_index":494,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["selection",{"_index":691,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"miscellaneous/variables.html":{}}}],["selection'},{'name",{"_index":358,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["selection.component",{"_index":2420,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["selection.component.html",{"_index":1897,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.scss",{"_index":1898,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts",{"_index":1893,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"coverage.html":{}}}],["selection.component.ts:104",{"_index":1935,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:114",{"_index":1945,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:139",{"_index":1942,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:150",{"_index":1936,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:162",{"_index":1947,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:36",{"_index":1930,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:37",{"_index":1931,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:39",{"_index":1929,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:41",{"_index":1927,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:43",{"_index":1933,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:45",{"_index":1956,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:46",{"_index":1953,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:48",{"_index":1952,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:49",{"_index":1960,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:51",{"_index":1957,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:53",{"_index":1961,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:55",{"_index":1955,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:56",{"_index":1921,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:66",{"_index":1954,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:67",{"_index":1949,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:79",{"_index":1940,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection.component.ts:93",{"_index":1939,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["selection/photo",{"_index":1892,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{},"coverage.html":{}}}],["selector",{"_index":13,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["self",{"_index":2374,"title":{},"body":{"components/RegisterComponent.html":{}}}],["send",{"_index":378,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{}}}],["sendchannelmessage",{"_index":2934,"title":{},"body":{"classes/User.html":{}}}],["sendchannelmessage(channel",{"_index":2961,"title":{},"body":{"classes/User.html":{}}}],["senddirectmessage",{"_index":2935,"title":{},"body":{"classes/User.html":{}}}],["senddirectmessage(recipient",{"_index":2965,"title":{},"body":{"classes/User.html":{}}}],["sendemailresetpassword",{"_index":2557,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["senden",{"_index":2571,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["sender",{"_index":1099,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"classes/User.html":{}}}],["sender.id",{"_index":1612,"title":{},"body":{"classes/Message.html":{}}}],["sender.name",{"_index":1614,"title":{},"body":{"classes/Message.html":{}}}],["senderid",{"_index":1593,"title":{},"body":{"classes/Message.html":{}}}],["sendername",{"_index":1594,"title":{},"body":{"classes/Message.html":{}}}],["sendmailtoresetpasswordcomponent",{"_index":377,"title":{"components/SendMailToResetPasswordComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["sendpasswordresetemail",{"_index":2562,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["sendpasswordresetemail(auth",{"_index":2566,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["sends",{"_index":1812,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{},"classes/User.html":{}}}],["sensible",{"_index":2703,"title":{},"body":{"components/TestComponent.html":{}}}],["september",{"_index":2844,"title":{},"body":{"classes/Thread.html":{}}}],["serif",{"_index":2352,"title":{},"body":{"components/RegisterComponent.html":{}}}],["serve",{"_index":3258,"title":{},"body":{"index.html":{}}}],["server",{"_index":3255,"title":{},"body":{"index.html":{}}}],["service",{"_index":120,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/ImprintComponent.html":{},"components/MessageReactionComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/ViewProfileComponent.html":{}}}],["services",{"_index":1106,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/PrivacyComponent.html":{}}}],["services/auth.service",{"_index":231,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ProfileViewComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["services/data.service",{"_index":224,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{}}}],["services/emoji",{"_index":1144,"title":{},"body":{"components/EmojiMartComponent.html":{},"components/MessageReactionComponent.html":{}}}],["services/header",{"_index":1209,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["services/sidenav.service",{"_index":1216,"title":{},"body":{"components/HeaderComponent.html":{},"components/SearchComponent.html":{},"components/ViewProfileComponent.html":{}}}],["services/storage.service",{"_index":2973,"title":{},"body":{"classes/User.html":{}}}],["services/thread.service",{"_index":896,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/MessageReactionComponent.html":{}}}],["services/user",{"_index":1963,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["set",{"_index":141,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["setfile",{"_index":1912,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["setfile(file",{"_index":1946,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["setreactionmenuhover",{"_index":902,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["sets",{"_index":131,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/HeaderProfileService.html":{},"components/PhotoSelectionComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{}}}],["settimeout",{"_index":251,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelThreadComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["settings",{"_index":685,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["setup",{"_index":3235,"title":{},"body":{"index.html":{}}}],["short",{"_index":108,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["show",{"_index":876,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["showbackarrow",{"_index":1915,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["showbanner",{"_index":1870,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["showchannels",{"_index":2443,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["showclose",{"_index":1916,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["showdescriptionerror",{"_index":983,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["showdirectmessages",{"_index":2575,"title":{},"body":{"injectables/SidenavService.html":{}}}],["showduplicateerror",{"_index":34,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["showimgref",{"_index":407,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["shownameerror",{"_index":35,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["showprofile",{"_index":746,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{}}}],["showprofile(participant",{"_index":778,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{}}}],["shows",{"_index":148,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["showsnackbar",{"_index":2608,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["showsnackbar(message",{"_index":2613,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["sich",{"_index":2078,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["sicherheit",{"_index":2154,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["side",{"_index":2345,"title":{},"body":{"components/RegisterComponent.html":{}}}],["sidenav",{"_index":2454,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["sidenav'},{'name",{"_index":383,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["sidenav/sidenav.component",{"_index":966,"title":{},"body":{"components/DashboardComponent.html":{}}}],["sidenavcomponent",{"_index":382,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["sidenavservice",{"_index":1158,"title":{"injectables/SidenavService.html":{}},"body":{"components/HeaderComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["sie",{"_index":287,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["sign",{"_index":1397,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["signed",{"_index":1394,"title":{},"body":{"components/LoginComponent.html":{}}}],["signinanonymously",{"_index":1380,"title":{},"body":{"components/LoginComponent.html":{}}}],["signinanonymously(auth",{"_index":1401,"title":{},"body":{"components/LoginComponent.html":{}}}],["signing",{"_index":1398,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["signinwithemailandpassword",{"_index":1378,"title":{},"body":{"components/LoginComponent.html":{}}}],["signs",{"_index":3068,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["signupandcreateuser",{"_index":3055,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["similar",{"_index":1041,"title":{},"body":{"components/EditChannelComponent.html":{},"components/SearchComponent.html":{}}}],["simplechanges",{"_index":767,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["sind",{"_index":1332,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["single",{"_index":1587,"title":{},"body":{"classes/Message.html":{}}}],["sinne",{"_index":2017,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["situation",{"_index":2169,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["size",{"_index":1547,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["sizing",{"_index":2365,"title":{},"body":{"components/RegisterComponent.html":{}}}],["slide",{"_index":1477,"title":{},"body":{"components/LogoComponent.html":{}}}],["slidedone",{"_index":1448,"title":{},"body":{"components/LogoComponent.html":{}}}],["small",{"_index":2455,"title":{},"body":{"components/SearchComponent.html":{}}}],["smaller",{"_index":2461,"title":{},"body":{"components/SearchComponent.html":{}}}],["snack",{"_index":2616,"title":{},"body":{"injectables/SnackBarService.html":{},"injectables/UserRegistrationService.html":{}}}],["snackbarservice",{"_index":2605,"title":{"injectables/SnackBarService.html":{}},"body":{"injectables/SnackBarService.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["sofern",{"_index":2055,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["solange",{"_index":2135,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["solid",{"_index":2372,"title":{},"body":{"components/RegisterComponent.html":{}}}],["sollten",{"_index":286,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["sonntag",{"_index":2828,"title":{},"body":{"classes/Thread.html":{}}}],["sorted",{"_index":2805,"title":{},"body":{"classes/Thread.html":{}}}],["sortmessagesbytimestamp",{"_index":2777,"title":{},"body":{"classes/Thread.html":{}}}],["sorts",{"_index":2804,"title":{},"body":{"classes/Thread.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"index.html":{}}}],["space",{"_index":2346,"title":{},"body":{"components/RegisterComponent.html":{}}}],["span",{"_index":2358,"title":{},"body":{"components/RegisterComponent.html":{}}}],["specific",{"_index":487,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["specified",{"_index":2618,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["speicherdauer",{"_index":2131,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["speichern",{"_index":948,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{}}}],["splicecurrentuser",{"_index":747,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["splicecurrentuserfromparticipants",{"_index":748,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["splicecurrentuserfromparticipants(array",{"_index":781,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["src",{"_index":939,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["src/.../app.config.ts",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../default",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../firebase.config.ts",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/animations/logo/logo.component.ts",{"_index":1429,"title":{},"body":{"components/LogoComponent.html":{},"coverage.html":{}}}],["src/app/animations/logo/logo.component.ts:118",{"_index":1463,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:127",{"_index":1476,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:135",{"_index":1471,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:56",{"_index":1487,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:57",{"_index":1482,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:59",{"_index":1491,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:60",{"_index":1479,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:61",{"_index":1493,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:62",{"_index":1480,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:63",{"_index":1492,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:64",{"_index":1484,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:65",{"_index":1489,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:66",{"_index":1452,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:70",{"_index":1468,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:79",{"_index":1456,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/animations/logo/logo.component.ts:86",{"_index":1457,"title":{},"body":{"components/LogoComponent.html":{}}}],["src/app/app.component.ts",{"_index":616,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:12",{"_index":622,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":3119,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/auth.guard.ts",{"_index":3123,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/configuration/default",{"_index":3125,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/dashboard/add",{"_index":395,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/channel",{"_index":733,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":954,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts:20",{"_index":959,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:27",{"_index":963,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/emoji",{"_index":1117,"title":{},"body":{"components/EmojiMartComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/full",{"_index":3143,"title":{},"body":{"coverage.html":{}}}],["src/app/dashboard/header/header.component.ts",{"_index":1150,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/header/header.component.ts:108",{"_index":1195,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:119",{"_index":1196,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:126",{"_index":1177,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:134",{"_index":1185,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:142",{"_index":1179,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:158",{"_index":1181,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:54",{"_index":1202,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:55",{"_index":1199,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:56",{"_index":1198,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:58",{"_index":1203,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:59",{"_index":1200,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:60",{"_index":1171,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:72",{"_index":1201,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:83",{"_index":1186,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:90",{"_index":1194,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/header/header.component.ts:99",{"_index":1192,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/dashboard/search/search.component.ts",{"_index":2431,"title":{},"body":{"components/SearchComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/search/search.component.ts:120",{"_index":2477,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:134",{"_index":2469,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:146",{"_index":2470,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:160",{"_index":2464,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:175",{"_index":2496,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:188",{"_index":2495,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:204",{"_index":2489,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:219",{"_index":2453,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:29",{"_index":2520,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:30",{"_index":2507,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:32",{"_index":2509,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:33",{"_index":2515,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:34",{"_index":2521,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:35",{"_index":2514,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:36",{"_index":2513,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:37",{"_index":2508,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:38",{"_index":2510,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:39",{"_index":2445,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:43",{"_index":2511,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:44",{"_index":2512,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:60",{"_index":2499,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:75",{"_index":2446,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/search/search.component.ts:92",{"_index":2478,"title":{},"body":{"components/SearchComponent.html":{}}}],["src/app/dashboard/sidenav/sidenav.component.ts",{"_index":3153,"title":{},"body":{"coverage.html":{}}}],["src/app/dashboard/user",{"_index":3156,"title":{},"body":{"coverage.html":{}}}],["src/app/dialog/add",{"_index":9,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"coverage.html":{}}}],["src/app/dialog/channel",{"_index":663,"title":{},"body":{"components/ChannelMembersComponent.html":{},"coverage.html":{}}}],["src/app/dialog/re",{"_index":2261,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"coverage.html":{}}}],["src/app/dialog/view",{"_index":3103,"title":{},"body":{"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["src/app/imprint/imprint.component.ts",{"_index":1273,"title":{},"body":{"components/ImprintComponent.html":{},"coverage.html":{}}}],["src/app/imprint/imprint.component.ts:17",{"_index":1284,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/imprint/imprint.component.ts:29",{"_index":1287,"title":{},"body":{"components/ImprintComponent.html":{}}}],["src/app/interfaces/user",{"_index":3044,"title":{},"body":{"interfaces/UserChatJson.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts",{"_index":1353,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts:33",{"_index":1376,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:40",{"_index":1364,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:45",{"_index":1374,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:54",{"_index":1372,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:71",{"_index":1370,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:86",{"_index":1365,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/menus/profile",{"_index":2234,"title":{},"body":{"components/ProfileViewComponent.html":{},"coverage.html":{}}}],["src/app/models/channel.class.ts",{"_index":625,"title":{},"body":{"classes/Channel.html":{},"coverage.html":{}}}],["src/app/models/channel.class.ts:10",{"_index":635,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:11",{"_index":632,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:44",{"_index":639,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:56",{"_index":641,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:69",{"_index":643,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:7",{"_index":637,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:8",{"_index":636,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/channel.class.ts:9",{"_index":634,"title":{},"body":{"classes/Channel.html":{}}}],["src/app/models/message.class.ts",{"_index":1586,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/app/models/message.class.ts:10",{"_index":1607,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:11",{"_index":1604,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:12",{"_index":1602,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:13",{"_index":1603,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:14",{"_index":1601,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:15",{"_index":1599,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:42",{"_index":1610,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:63",{"_index":1609,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:7",{"_index":1605,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:8",{"_index":1606,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/message.class.ts:9",{"_index":1600,"title":{},"body":{"classes/Message.html":{}}}],["src/app/models/thread.class.ts",{"_index":2770,"title":{},"body":{"classes/Thread.html":{},"coverage.html":{}}}],["src/app/models/thread.class.ts:10",{"_index":2778,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:102",{"_index":2801,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:125",{"_index":2784,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:140",{"_index":2803,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:150",{"_index":2806,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:166",{"_index":2797,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:43",{"_index":2798,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:7",{"_index":2782,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:71",{"_index":2790,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:8",{"_index":2780,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:88",{"_index":2800,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/thread.class.ts:9",{"_index":2781,"title":{},"body":{"classes/Thread.html":{}}}],["src/app/models/user",{"_index":3021,"title":{},"body":{"classes/UserChat.html":{},"coverage.html":{}}}],["src/app/models/user.class.ts",{"_index":2928,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/app/models/user.class.ts:103",{"_index":2964,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:11",{"_index":2940,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:12",{"_index":2941,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:13",{"_index":2939,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:133",{"_index":2967,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:14",{"_index":2942,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:15",{"_index":2938,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:16",{"_index":2943,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:168",{"_index":2950,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:17",{"_index":2937,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:18",{"_index":2936,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:181",{"_index":2946,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:191",{"_index":2972,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:61",{"_index":2955,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:75",{"_index":2959,"title":{},"body":{"classes/User.html":{}}}],["src/app/models/user.class.ts:89",{"_index":2953,"title":{},"body":{"classes/User.html":{}}}],["src/app/page",{"_index":1835,"title":{},"body":{"components/PageNotFoundComponent.html":{},"coverage.html":{}}}],["src/app/password",{"_index":1843,"title":{},"body":{"components/PasswordResetComponent.html":{},"coverage.html":{}}}],["src/app/photo",{"_index":1891,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"coverage.html":{}}}],["src/app/privacy/privacy.component.ts",{"_index":2008,"title":{},"body":{"components/PrivacyComponent.html":{},"coverage.html":{}}}],["src/app/privacy/privacy.component.ts:13",{"_index":2012,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/privacy/privacy.component.ts:17",{"_index":2013,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["src/app/register",{"_index":2400,"title":{},"body":{"components/RegisterNextComponent.html":{},"coverage.html":{}}}],["src/app/register/register.component.ts",{"_index":2286,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/register/register.component.ts:37",{"_index":2294,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/register/register.component.ts:38",{"_index":2291,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/register/register.component.ts:63",{"_index":2292,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/send",{"_index":2551,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts",{"_index":3190,"title":{},"body":{"coverage.html":{}}}],["src/app/services/data.service.ts",{"_index":3193,"title":{},"body":{"coverage.html":{}}}],["src/app/services/emoji",{"_index":1093,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"coverage.html":{}}}],["src/app/services/header",{"_index":1252,"title":{},"body":{"injectables/HeaderProfileService.html":{},"coverage.html":{}}}],["src/app/services/message.service.ts",{"_index":1785,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/app/services/message.service.ts:13",{"_index":1828,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:14",{"_index":1826,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:15",{"_index":1827,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:16",{"_index":1824,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:18",{"_index":1823,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:19",{"_index":1830,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:20",{"_index":1821,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:21",{"_index":1797,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:34",{"_index":1800,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:48",{"_index":1817,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:61",{"_index":1811,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:72",{"_index":1815,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/message.service.ts:83",{"_index":1806,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/app/services/sidenav.service.ts",{"_index":2573,"title":{},"body":{"injectables/SidenavService.html":{},"coverage.html":{}}}],["src/app/services/sidenav.service.ts:10",{"_index":2598,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:11",{"_index":2579,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:29",{"_index":2581,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:51",{"_index":2588,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:64",{"_index":2593,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:7",{"_index":2599,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:8",{"_index":2596,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/sidenav.service.ts:9",{"_index":2597,"title":{},"body":{"injectables/SidenavService.html":{}}}],["src/app/services/snack",{"_index":2606,"title":{},"body":{"injectables/SnackBarService.html":{},"coverage.html":{}}}],["src/app/services/storage.service.ts",{"_index":2624,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{}}}],["src/app/services/storage.service.ts:17",{"_index":2631,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/services/storage.service.ts:34",{"_index":2628,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/services/thread.service.ts",{"_index":2885,"title":{},"body":{"injectables/ThreadService.html":{},"coverage.html":{}}}],["src/app/services/thread.service.ts:104",{"_index":2892,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:114",{"_index":2902,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:132",{"_index":2901,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:14",{"_index":2911,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:15",{"_index":2909,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:16",{"_index":2910,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:17",{"_index":2908,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:19",{"_index":2907,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:20",{"_index":2912,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:21",{"_index":2906,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:22",{"_index":2889,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:38",{"_index":2890,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:52",{"_index":2905,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:65",{"_index":2903,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:76",{"_index":2904,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/thread.service.ts:87",{"_index":2896,"title":{},"body":{"injectables/ThreadService.html":{}}}],["src/app/services/user",{"_index":3046,"title":{},"body":{"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["src/app/test/test.component.ts",{"_index":2652,"title":{},"body":{"components/TestComponent.html":{},"coverage.html":{}}}],["src/app/test/test.component.ts:109",{"_index":2697,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:120",{"_index":2701,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:135",{"_index":2686,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:159",{"_index":2676,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:179",{"_index":2683,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:189",{"_index":2693,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:28",{"_index":2672,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:34",{"_index":2671,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:38",{"_index":2706,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:42",{"_index":2705,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:44",{"_index":2710,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:45",{"_index":2711,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:46",{"_index":2709,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:49",{"_index":2707,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:50",{"_index":2708,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:52",{"_index":2712,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:53",{"_index":2713,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:56",{"_index":2694,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:67",{"_index":2692,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:80",{"_index":2691,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:87",{"_index":2689,"title":{},"body":{"components/TestComponent.html":{}}}],["src/app/test/test.component.ts:97",{"_index":2690,"title":{},"body":{"components/TestComponent.html":{}}}],["src/environments/firebase.config.ts",{"_index":3208,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ssl",{"_index":2151,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["stamp",{"_index":2799,"title":{},"body":{"classes/Thread.html":{}}}],["stand",{"_index":2158,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["standalone",{"_index":17,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["standard",{"_index":1552,"title":{},"body":{"components/LogoComponent.html":{}}}],["start",{"_index":1478,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["started",{"_index":3230,"title":{"index.html":{}},"body":{}}],["startgrowing",{"_index":1441,"title":{},"body":{"components/LogoComponent.html":{}}}],["starting",{"_index":1173,"title":{},"body":{"components/HeaderComponent.html":{}}}],["startwith",{"_index":547,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["state",{"_index":1012,"title":{},"body":{"components/EditChannelComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{},"miscellaneous/variables.html":{}}}],["state('end",{"_index":1511,"title":{},"body":{"components/LogoComponent.html":{}}}],["state('fadeup",{"_index":1869,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["state('showbanner",{"_index":1868,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["state('start",{"_index":1505,"title":{},"body":{"components/LogoComponent.html":{}}}],["state('void",{"_index":1219,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{}}}],["statements",{"_index":3116,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1595,"title":{},"body":{"classes/Message.html":{},"classes/Thread.html":{}}}],["status",{"_index":514,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/RegisterComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["stelle",{"_index":2090,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["step",{"_index":2293,"title":{},"body":{"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/TestComponent.html":{}}}],["stets",{"_index":2206,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["stimme",{"_index":2312,"title":{},"body":{"components/RegisterComponent.html":{}}}],["storage",{"_index":873,"title":{},"body":{"components/ChannelThreadComponent.html":{},"injectables/MessageService.html":{},"injectables/StorageService.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["storage.service",{"_index":3075,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["storage.uploadfile(imgfile",{"_index":3002,"title":{},"body":{"classes/User.html":{}}}],["storage_bucket",{"_index":3247,"title":{},"body":{"index.html":{}}}],["storagebucket",{"_index":3246,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["storageref",{"_index":2640,"title":{},"body":{"injectables/StorageService.html":{}}}],["storageservice",{"_index":2623,"title":{"injectables/StorageService.html":{}},"body":{"injectables/StorageService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["storageurl",{"_index":2422,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["store",{"_index":3085,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["stored",{"_index":3269,"title":{},"body":{"index.html":{}}}],["stream",{"_index":2471,"title":{},"body":{"components/SearchComponent.html":{}}}],["streams",{"_index":2722,"title":{},"body":{"components/TestComponent.html":{}}}],["streitbeilegung",{"_index":1327,"title":{},"body":{"components/ImprintComponent.html":{}}}],["streitbeilegungsverfahren",{"_index":1337,"title":{},"body":{"components/ImprintComponent.html":{}}}],["string",{"_index":66,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":2802,"title":{},"body":{"classes/Thread.html":{},"injectables/ThreadService.html":{}}}],["student&#64;dsc",{"_index":1316,"title":{},"body":{"components/ImprintComponent.html":{}}}],["student@dsc",{"_index":1352,"title":{},"body":{"components/ImprintComponent.html":{}}}],["stummgeschaltet",{"_index":1841,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["style",{"_index":1212,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["styles",{"_index":1428,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["styleurl",{"_index":24,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["styleurls",{"_index":1431,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["subject",{"_index":1112,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["subprofileedit",{"_index":1163,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subprofileview",{"_index":1164,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subscribe",{"_index":1193,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subscribe((channels",{"_index":2530,"title":{},"body":{"components/SearchComponent.html":{}}}],["subscribed",{"_index":1105,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["subscribes",{"_index":759,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/DashboardComponent.html":{},"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{}}}],["subscribtion",{"_index":1174,"title":{},"body":{"components/HeaderComponent.html":{}}}],["subscription",{"_index":218,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/HeaderComponent.html":{},"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["subscriptions",{"_index":164,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/SearchComponent.html":{}}}],["subuserdata",{"_index":1165,"title":{},"body":{"components/HeaderComponent.html":{}}}],["succesfully",{"_index":526,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["success",{"_index":686,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["successful",{"_index":121,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["successfull",{"_index":2757,"title":{},"body":{"components/TestComponent.html":{}}}],["successfully",{"_index":175,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/ThreadService.html":{}}}],["sucess",{"_index":1395,"title":{},"body":{"components/LoginComponent.html":{}}}],["switch",{"_index":1197,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["switches",{"_index":1178,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ProfileViewComponent.html":{}}}],["switchmap",{"_index":702,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["switchmap((users",{"_index":2525,"title":{},"body":{"components/SearchComponent.html":{}}}],["switchmap(querysnapshot",{"_index":708,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["switchtoedit",{"_index":1166,"title":{},"body":{"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{}}}],["switchtomenu",{"_index":1256,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["switchtoview",{"_index":1257,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["table",{"_index":3211,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3210,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":2677,"title":{},"body":{"components/TestComponent.html":{}}}],["take(1",{"_index":3315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["takes",{"_index":157,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["target",{"_index":1046,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["target=\"blank",{"_index":943,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["team",{"_index":282,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["technik",{"_index":2159,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["technische",{"_index":2125,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["teile",{"_index":1085,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["teilnehmer",{"_index":820,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["teilzunehmen",{"_index":1341,"title":{},"body":{"components/ImprintComponent.html":{}}}],["telefon",{"_index":1314,"title":{},"body":{"components/ImprintComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["templateurl",{"_index":22,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["temporarychanneldescription",{"_index":984,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["temporarychannelname",{"_index":985,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["test",{"_index":2653,"title":{},"body":{"components/TestComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test'},{'name",{"_index":385,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["test.component.html",{"_index":2656,"title":{},"body":{"components/TestComponent.html":{}}}],["test.component.scss",{"_index":2657,"title":{},"body":{"components/TestComponent.html":{}}}],["testcomponent",{"_index":384,"title":{"components/TestComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["testing",{"_index":3281,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3274,"title":{},"body":{"index.html":{}}}],["text",{"_index":1474,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{}}}],["textlogowidth",{"_index":1442,"title":{},"body":{"components/LogoComponent.html":{}}}],["textvisible",{"_index":1443,"title":{},"body":{"components/LogoComponent.html":{}}}],["themenbezogen",{"_index":288,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["then(user",{"_index":3084,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this._snackbar.open(message",{"_index":2622,"title":{},"body":{"injectables/SnackBarService.html":{}}}],["this._userdata",{"_index":3078,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this._userdata.fullname",{"_index":3079,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this._userdata.password",{"_index":3083,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.activatedroute.snapshot.queryparams['oobcode",{"_index":1885,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["this.addchanneltoallusers",{"_index":717,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.addchanneltospecificusers",{"_index":718,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.addchanneltospecificusers().subscribe",{"_index":588,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["this.allusers",{"_index":560,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.allusers.filter(user",{"_index":568,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.anonymoususerlogin",{"_index":1400,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.assigningcomponent",{"_index":1146,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["this.auth.getuser().subscribe(user",{"_index":1236,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["this.auth.getuserauthid().then(userid",{"_index":240,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.auth.logout",{"_index":1245,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.auth.updatefirebaseuser",{"_index":1241,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.authservice.createfirebaseuser(user",{"_index":3100,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.authservice.getuser().subscribe",{"_index":2732,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.getuser().subscribe(user",{"_index":2731,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.getuserauthid",{"_index":2734,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.getuserslist().subscribe",{"_index":2727,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.logout",{"_index":2725,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.reauthenticateuser(email",{"_index":2737,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.removeauthuser",{"_index":2747,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.removefirestoreuser",{"_index":2746,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.signin('max@mustermann.com",{"_index":1391,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signin(email",{"_index":1386,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.signup(this._userdata.email",{"_index":3082,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.authservice.updatefirebaseuser",{"_index":2719,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.updatefirebaseuser({'userchats",{"_index":3102,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.authservice.updatefirebaseuser({email",{"_index":2752,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authservice.updatefirebaseuser({name",{"_index":2755,"title":{},"body":{"components/TestComponent.html":{}}}],["this.authuserid",{"_index":2992,"title":{},"body":{"classes/User.html":{}}}],["this.autocompletetrigger.closepanel",{"_index":2546,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.bannerstate",{"_index":1886,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["this.buttontext",{"_index":1975,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.calculatedynamicvalues",{"_index":1519,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.channelchat.currentchannel",{"_index":913,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.channelchat.currentuser",{"_index":914,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.channelchat.currentuser.id",{"_index":903,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.channelcreator",{"_index":1056,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.channelcreatoriscurrentuser",{"_index":1064,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.channeldescription",{"_index":263,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.channelid",{"_index":653,"title":{},"body":{"classes/Channel.html":{},"classes/Thread.html":{}}}],["this.channelparticipants",{"_index":799,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.channelparticipants.push(user",{"_index":804,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.channelparticipantssub",{"_index":805,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.channelparticipantssub.unsubscribe",{"_index":806,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.channels",{"_index":2532,"title":{},"body":{"components/SearchComponent.html":{},"classes/User.html":{}}}],["this.channels.filter(channel",{"_index":2540,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.channels.includes(channelid",{"_index":2995,"title":{},"body":{"classes/User.html":{}}}],["this.channels.indexof(channelid",{"_index":2998,"title":{},"body":{"classes/User.html":{}}}],["this.channels.push(channelid",{"_index":2996,"title":{},"body":{"classes/User.html":{}}}],["this.channels.splice(index",{"_index":2999,"title":{},"body":{"classes/User.html":{}}}],["this.checkifdevteamchannel",{"_index":1059,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.checkuserauthid",{"_index":238,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.comparechannelcreatorwithcurrentuser",{"_index":1058,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.containerstate",{"_index":1542,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.content",{"_index":1615,"title":{},"body":{"classes/Message.html":{}}}],["this.control.reset",{"_index":2543,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.control.valuechanges.pipe",{"_index":2536,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.convertmessagetoobject(jsonmessage",{"_index":2864,"title":{},"body":{"classes/Thread.html":{}}}],["this.convertmessagetoobject(message",{"_index":2866,"title":{},"body":{"classes/Thread.html":{}}}],["this.convertthreadmessagestostring(threadcopy",{"_index":2917,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.createdby",{"_index":657,"title":{},"body":{"classes/Channel.html":{}}}],["this.createdchannelid",{"_index":265,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.currentchannel",{"_index":814,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["this.currentchannel.channelid",{"_index":813,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{}}}],["this.currentchannel.createdby",{"_index":1061,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.currentchannel.description",{"_index":1079,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.currentchannel.participants.foreach((participant",{"_index":800,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.currentchannel.participants.indexof(this.currentuser.id",{"_index":797,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.currentchannel.participants.splice(index,1",{"_index":798,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.currentchannel.title",{"_index":1074,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.currentchannelisdevteamchannel",{"_index":1065,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.currentuser",{"_index":140,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{}}}],["this.currentuser.channels",{"_index":2531,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.currentuser.channels.includes(channel.channelid",{"_index":2534,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.currentuser.id",{"_index":275,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["this.currentuser.leavechannel(this.channelid",{"_index":1080,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.data",{"_index":1970,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.data.buttontext",{"_index":1976,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.data.channelid",{"_index":585,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.data.onnext",{"_index":1978,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.data.showbackarrow",{"_index":1974,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.data.showclose",{"_index":1972,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.dataservice.addchannel(newchanneldata",{"_index":266,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.dataservice.allchannels.some(channel",{"_index":277,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.dataservice.allusers",{"_index":561,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.dataservice.allusers.find(u",{"_index":598,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.dataservice.allusers.find(user",{"_index":1062,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.dataservice.allusers.foreach(user",{"_index":907,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/MessageReactionComponent.html":{}}}],["this.dataservice.getchannelslist",{"_index":2529,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.dataservice.getparticipantinfos(this.currentchannel.channelid).subscribe((channelparticipants",{"_index":807,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.dataservice.getuserslist().pipe",{"_index":2524,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.dataservice.getuserslist().subscribe((users",{"_index":236,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.dataservice.updatechannel(this.currentchannel",{"_index":1075,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.dataservice.updatethread(threadcopy).then",{"_index":2918,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.dataservice.updateuser(this.currentuser",{"_index":1081,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.dataservice.updateuserchatthread(threadcopy",{"_index":2926,"title":{},"body":{"injectables/ThreadService.html":{}}}],["this.date",{"_index":2724,"title":{},"body":{"components/TestComponent.html":{}}}],["this.dateisnottoday(weekday",{"_index":2826,"title":{},"body":{"classes/Thread.html":{}}}],["this.default_img_src_url",{"_index":1959,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.defaultbackground",{"_index":1543,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.description",{"_index":656,"title":{},"body":{"classes/Channel.html":{}}}],["this.dialog.closeall",{"_index":3113,"title":{},"body":{"components/ViewProfileComponent.html":{}}}],["this.dialog.open(adduserscomponent",{"_index":812,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.dialog.open(channelmemberscomponent",{"_index":272,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.dialog.open(reauthenticateusercomponent",{"_index":2735,"title":{},"body":{"components/TestComponent.html":{}}}],["this.dialog.open(viewprofilecomponent",{"_index":811,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{}}}],["this.dialogref.close",{"_index":590,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["this.dialogref.close(this.reauthform.value",{"_index":2275,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["this.editchanneldescription_activated",{"_index":1068,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.editchannelname_activated",{"_index":1067,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.editmessage",{"_index":916,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.editmessagebox.nativeelement.value",{"_index":919,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.editmode",{"_index":1621,"title":{},"body":{"classes/Message.html":{}}}],["this.email",{"_index":2990,"title":{},"body":{"classes/User.html":{}}}],["this.emaildata.valid",{"_index":2564,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["this.emaildata.value.email",{"_index":2565,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["this.emojieventsource.asobservable",{"_index":1110,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["this.emojieventsource.next",{"_index":1116,"title":{},"body":{"injectables/EmojiCommunicationService.html":{}}}],["this.emojireactions",{"_index":1619,"title":{},"body":{"classes/Message.html":{}}}],["this.emojiservice.emitemojievent(event.emoji.native",{"_index":1148,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["this.emojiservice.emojievent$.subscribe(event",{"_index":1722,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.emojisubscription",{"_index":1721,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.emojisubscription.unsubscribe",{"_index":1770,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.fileinput.nativeelement.value",{"_index":452,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["this.filesize",{"_index":1982,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.filetoobig",{"_index":1984,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.filterchannels(value",{"_index":2539,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.filteredchannels",{"_index":2538,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.filteredusers",{"_index":562,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["this.filterusers(value",{"_index":565,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["this.findcurrentuser(this.userauthid",{"_index":252,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.findthreaduser(messageownerid",{"_index":906,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.formbuilder.group",{"_index":1375,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["this.fullname",{"_index":1968,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.getchannelcreator",{"_index":1057,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.getchannelparticipants",{"_index":794,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.getemojireactions(user",{"_index":1735,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.getnewreactiontomessage(threadmessage",{"_index":1755,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.getparticipantinfossub",{"_index":795,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.getuser",{"_index":2253,"title":{},"body":{"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["this.getuserauthid",{"_index":2721,"title":{},"body":{"components/TestComponent.html":{}}}],["this.getusers",{"_index":2723,"title":{},"body":{"components/TestComponent.html":{}}}],["this.hoverreactionbar",{"_index":1622,"title":{},"body":{"classes/Message.html":{}}}],["this.iconlogowidth",{"_index":1530,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.id",{"_index":2988,"title":{},"body":{"classes/User.html":{}}}],["this.imageasfileorurl",{"_index":2421,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.imageselected",{"_index":1988,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.imageurl",{"_index":2993,"title":{},"body":{"classes/User.html":{}}}],["this.imgfile",{"_index":451,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelThreadComponent.html":{}}}],["this.imgfileurl",{"_index":1620,"title":{},"body":{"classes/Message.html":{}}}],["this.imgsrcurl",{"_index":1990,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.initfilteredchannel",{"_index":2535,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.initfilteredusers",{"_index":2528,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.iscurrentuser",{"_index":905,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.isimgfileedited",{"_index":917,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.ispanelopen",{"_index":2544,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.isprofileeditview",{"_index":1235,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.isprofileview",{"_index":1232,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.isuserinreaction(chatreaction",{"_index":1752,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.isvalidchannelname(this.channelname",{"_index":259,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.location.back",{"_index":1294,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["this.logindata.value.email",{"_index":1382,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logindata.value.password",{"_index":1383,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginfalse",{"_index":1387,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.logotexturl",{"_index":1544,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.marginleft",{"_index":1531,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.matmenutrigger.closemenu",{"_index":1069,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.message",{"_index":1147,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["this.message.timestamp",{"_index":1149,"title":{},"body":{"components/EmojiMartComponent.html":{}}}],["this.messages",{"_index":2812,"title":{},"body":{"classes/Thread.html":{}}}],["this.messages.foreach(message",{"_index":2861,"title":{},"body":{"classes/Thread.html":{}}}],["this.messages.sort((a",{"_index":2879,"title":{},"body":{"classes/Thread.html":{}}}],["this.messagestringtojson",{"_index":2813,"title":{},"body":{"classes/Thread.html":{}}}],["this.name",{"_index":2989,"title":{},"body":{"classes/User.html":{}}}],["this.newemail",{"_index":2751,"title":{},"body":{"components/TestComponent.html":{}}}],["this.newfullname",{"_index":2754,"title":{},"body":{"components/TestComponent.html":{}}}],["this.onlinestatus",{"_index":2991,"title":{},"body":{"classes/User.html":{}}}],["this.onnext",{"_index":1977,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.opencurrentfullthreadsource.asobservable",{"_index":1825,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.opencurrentfullthreadsource.next(openfullthreadboolean",{"_index":1832,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.opened",{"_index":2601,"title":{},"body":{"injectables/SidenavService.html":{}}}],["this.openloginmodal('e",{"_index":2750,"title":{},"body":{"components/TestComponent.html":{}}}],["this.openloginmodal('user",{"_index":2741,"title":{},"body":{"components/TestComponent.html":{}}}],["this.openthread",{"_index":970,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.participants",{"_index":655,"title":{},"body":{"classes/Channel.html":{},"classes/UserChat.html":{}}}],["this.participants.includes(user",{"_index":658,"title":{},"body":{"classes/Channel.html":{}}}],["this.participants.indexof(user",{"_index":660,"title":{},"body":{"classes/Channel.html":{}}}],["this.participants.push(user",{"_index":659,"title":{},"body":{"classes/Channel.html":{}}}],["this.participants.splice(index",{"_index":662,"title":{},"body":{"classes/Channel.html":{}}}],["this.passworddata",{"_index":1875,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["this.passworddata.valid",{"_index":1881,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["this.passworddata.value.password",{"_index":1883,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["this.passwordmatchvalidator",{"_index":1878,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["this.performchanneladdition",{"_index":714,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.placeholder",{"_index":2523,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.postchannelcreation",{"_index":267,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.preparenewchanneldata(this.channelname",{"_index":262,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.processemojireactions",{"_index":1734,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.profileeditstate.asobservable",{"_index":1263,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileeditstate.next(false",{"_index":1270,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileeditstate.next(true",{"_index":1272,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileeditsub",{"_index":1233,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileeditsub.unsubscribe",{"_index":1250,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileservice.profileeditstate$.subscribe(state",{"_index":1234,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileservice.profileviewstate$.subscribe(state",{"_index":1231,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileservice.switchtoedit",{"_index":1238,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["this.profileservice.switchtomenu",{"_index":1229,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{}}}],["this.profileservice.switchtoview",{"_index":1240,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileviewstate.asobservable",{"_index":1266,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileviewstate.next(false",{"_index":1269,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileviewstate.next(true",{"_index":1271,"title":{},"body":{"injectables/HeaderProfileService.html":{}}}],["this.profileviewsub",{"_index":1230,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.profileviewsub.unsubscribe",{"_index":1249,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.raisereactioncount(chatreaction",{"_index":1754,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.reacttothread(this.threadmessage",{"_index":1726,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.reauthenticate(formdata.email",{"_index":2742,"title":{},"body":{"components/TestComponent.html":{}}}],["this.reauthform",{"_index":2271,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["this.reauthform.valid",{"_index":2274,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["this.registerform",{"_index":2295,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.reset",{"_index":2302,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.registerform.value",{"_index":2300,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.removeimage",{"_index":439,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["this.removeimage.bind(this",{"_index":449,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["this.removepasswordfromuserobject",{"_index":3088,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.replies",{"_index":1618,"title":{},"body":{"classes/Message.html":{}}}],["this.replies.map(reply",{"_index":1623,"title":{},"body":{"classes/Message.html":{}}}],["this.route.navigate(['/register/next']).then",{"_index":2303,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.route.navigatebyurl('dashboard",{"_index":1546,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.router.navigate(['/dashboard",{"_index":1388,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.router.navigate(['/login",{"_index":1246,"title":{},"body":{"components/HeaderComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{}}}],["this.router.navigate(['/register']).then",{"_index":3092,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.router.navigate(['dashboard",{"_index":3098,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.savefirebaseuser",{"_index":3089,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.saveusertofirebase(user",{"_index":3097,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.scalefactor",{"_index":1532,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.searchinput.nativeelement.blur",{"_index":2545,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.searchuserinreactions(user",{"_index":1738,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.selectedimg.emit(avatarurl",{"_index":1989,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.selectedimg.emit(file",{"_index":1985,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.selectedoption",{"_index":716,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.selectedusers",{"_index":594,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusers.filter(id",{"_index":595,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusers.push(username",{"_index":603,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids",{"_index":596,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.filter(id",{"_index":597,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.foreach(userid",{"_index":577,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.includes(this.data.createdby",{"_index":712,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.includes(user.id",{"_index":571,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.includes(userid",{"_index":602,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.push(this.data.createdby",{"_index":713,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["this.selectedusersids.push(userid",{"_index":604,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.senderid",{"_index":1611,"title":{},"body":{"classes/Message.html":{}}}],["this.sendername",{"_index":1613,"title":{},"body":{"classes/Message.html":{}}}],["this.setfile(file",{"_index":1986,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.showbackarrow",{"_index":1973,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.showchannels",{"_index":2602,"title":{},"body":{"injectables/SidenavService.html":{}}}],["this.showclose",{"_index":1971,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.showdescriptionerror",{"_index":1077,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.showdirectmessages",{"_index":2603,"title":{},"body":{"injectables/SidenavService.html":{}}}],["this.showimgref.appendchild(imgelement",{"_index":447,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["this.showimgref.innerhtml",{"_index":446,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["this.shownameerror",{"_index":1072,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.sidenavservice.togglesidenavifscreenissmall('sidenav",{"_index":2547,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.snack.showsnackbar('email",{"_index":3091,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.sortmessagesbytimestamp",{"_index":2867,"title":{},"body":{"classes/Thread.html":{}}}],["this.splicecurrentuser",{"_index":793,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.splicecurrentuserfromparticipants(channelparticipants",{"_index":808,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.startgrowing",{"_index":1521,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.storageservice.uploadfile(file",{"_index":3080,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.subprofileedit",{"_index":1227,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.subprofileview",{"_index":1226,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.subuserdata",{"_index":1228,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.temporarychanneldescription",{"_index":1076,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.temporarychanneldescription.length",{"_index":1078,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.temporarychannelname",{"_index":1070,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.temporarychannelname.length",{"_index":1073,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["this.textlogowidth",{"_index":1529,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.textvisible",{"_index":1541,"title":{},"body":{"components/LogoComponent.html":{}}}],["this.thread",{"_index":1733,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.thread.channelid.length",{"_index":1756,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.thread.getformatteddatestamp",{"_index":909,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.thread.getformattedtimestamp",{"_index":910,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.thread.messages[0].senderid",{"_index":904,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.threadchangessource.asobservable",{"_index":1829,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threadchangessource.next",{"_index":1834,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threadid",{"_index":2811,"title":{},"body":{"classes/Thread.html":{}}}],["this.threadmessage.emojireactions",{"_index":1744,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadmessage.emojireactions.foreach((emojireaction",{"_index":1737,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadmessage.emojireactions.map((reaction",{"_index":1745,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadmessage.timestamp",{"_index":1725,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadmessagesource.asobservable",{"_index":1820,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threadmessagesource.next",{"_index":1833,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threads",{"_index":3034,"title":{},"body":{"classes/UserChat.html":{}}}],["this.threads.map(thread",{"_index":3039,"title":{},"body":{"classes/UserChat.html":{}}}],["this.threads.push(thread",{"_index":3038,"title":{},"body":{"classes/UserChat.html":{}}}],["this.threadservice.changethread(thread",{"_index":912,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.threadservice.copythreadforfirebase(messageelement",{"_index":929,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.threadservice.copythreadforfirebase(this.thread",{"_index":1757,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadservice.copyuserchatthreadforfirebase(this.thread",{"_index":1758,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadservice.currentmessages$.subscribe(event",{"_index":1729,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.threadservice.opencurrentthread$.subscribe(openthreadboolean",{"_index":969,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.threadservice.openfullthread(true",{"_index":911,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.threadsource.asobservable",{"_index":1822,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threadsource.next",{"_index":1831,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["this.threaduser",{"_index":908,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["this.timestamp",{"_index":1616,"title":{},"body":{"classes/Message.html":{},"classes/Thread.html":{}}}],["this.title",{"_index":654,"title":{},"body":{"classes/Channel.html":{}}}],["this.updateplaceholder(window.innerwidth",{"_index":2522,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.updatescreensize",{"_index":2600,"title":{},"body":{"injectables/SidenavService.html":{}}}],["this.updatethreadmessagereactions",{"_index":1736,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.updateuserobject('authuserid",{"_index":3086,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["this.uploadedfile",{"_index":1991,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.uploaderr",{"_index":1979,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.user",{"_index":1237,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["this.userauthid",{"_index":242,"title":{},"body":{"components/AddChannelComponent.html":{},"components/TestComponent.html":{}}}],["this.userchatid",{"_index":1759,"title":{},"body":{"components/MessageReactionComponent.html":{},"classes/UserChat.html":{}}}],["this.userchatindex",{"_index":1760,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.userchats",{"_index":2994,"title":{},"body":{"classes/User.html":{}}}],["this.userchats.push(currentuserchat",{"_index":3014,"title":{},"body":{"classes/User.html":{}}}],["this.usercontrol.reset",{"_index":605,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.usercontrol.valuechanges.pipe",{"_index":563,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["this.userreactionagain(chatreactions",{"_index":1753,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.userregservice.getuserfullname",{"_index":1969,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["this.userregservice.saveuserdata(userdata",{"_index":2301,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.userregservice.signupandcreateuser",{"_index":2429,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.userregservice.updateuserobject('channels",{"_index":2428,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.userregservice.updateuserobject('imageurl",{"_index":2426,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.userregservice.updateuserobject('onlinestatus",{"_index":2427,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.userregservice.uploadfile(this.imageasfileorurl",{"_index":2424,"title":{},"body":{"components/RegisterNextComponent.html":{}}}],["this.users",{"_index":237,"title":{},"body":{"components/AddChannelComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["this.users.filter(user",{"_index":2537,"title":{},"body":{"components/SearchComponent.html":{}}}],["this.users.find((user",{"_index":256,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["this.users.some((user",{"_index":801,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["this.usersforreaction",{"_index":1728,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["this.userssub",{"_index":2726,"title":{},"body":{"components/TestComponent.html":{}}}],["this.userssub.unsubscribe",{"_index":2762,"title":{},"body":{"components/TestComponent.html":{}}}],["this.usersub",{"_index":235,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["this.usersub.unsubscribe",{"_index":279,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["this.windowwidth",{"_index":2604,"title":{},"body":{"injectables/SidenavService.html":{}}}],["thread",{"_index":339,"title":{"classes/Thread.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["thread'},{'name",{"_index":328,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["thread(json.parse(thread",{"_index":3036,"title":{},"body":{"classes/UserChat.html":{}}}],["thread(thread",{"_index":3037,"title":{},"body":{"classes/UserChat.html":{}}}],["thread.class",{"_index":2975,"title":{},"body":{"classes/User.html":{},"classes/UserChat.html":{}}}],["thread.component",{"_index":968,"title":{},"body":{"components/DashboardComponent.html":{}}}],["thread.component.html",{"_index":823,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.scss",{"_index":824,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts",{"_index":822,"title":{},"body":{"components/ChannelThreadComponent.html":{},"coverage.html":{}}}],["thread.component.ts:102",{"_index":868,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:116",{"_index":853,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:124",{"_index":848,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:133",{"_index":875,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:144",{"_index":870,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:164",{"_index":850,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:31",{"_index":847,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:33",{"_index":886,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:34",{"_index":882,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:35",{"_index":888,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:36",{"_index":884,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:38",{"_index":880,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:39",{"_index":883,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:40",{"_index":842,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:50",{"_index":877,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:51",{"_index":878,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:52",{"_index":887,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:53",{"_index":879,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:59",{"_index":866,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:74",{"_index":855,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:86",{"_index":859,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.component.ts:94",{"_index":864,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.messages",{"_index":2922,"title":{},"body":{"injectables/ThreadService.html":{}}}],["thread.messages.length",{"_index":949,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.messages.map((message",{"_index":2923,"title":{},"body":{"injectables/ThreadService.html":{}}}],["thread.messages[0].content",{"_index":946,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.messages[0].imgfileurl",{"_index":940,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.messages[0].imgfileurl.tolowercase().includes('.pdf",{"_index":938,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.messages[0].imgfileurl.tolowercase().includes(\\'.pdf",{"_index":953,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["thread.tojson",{"_index":3040,"title":{},"body":{"classes/UserChat.html":{}}}],["thread/channel",{"_index":821,"title":{},"body":{"components/ChannelThreadComponent.html":{},"coverage.html":{}}}],["thread/full",{"_index":967,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["thread/user",{"_index":3157,"title":{},"body":{"coverage.html":{}}}],["threadchangessource",{"_index":1788,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["threadcopy",{"_index":2914,"title":{},"body":{"injectables/ThreadService.html":{}}}],["threadcopy.messages",{"_index":2915,"title":{},"body":{"injectables/ThreadService.html":{}}}],["threadid",{"_index":1127,"title":{},"body":{"components/EmojiMartComponent.html":{},"classes/Thread.html":{}}}],["threadmessage",{"_index":1656,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["threadmessage.emojireactions",{"_index":1748,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["threadmessage.emojireactions.push(threadreaction",{"_index":1769,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["threadmessagesource",{"_index":1789,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["threadowner",{"_index":1799,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["threadreaction",{"_index":1768,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["threads",{"_index":3023,"title":{},"body":{"classes/UserChat.html":{},"interfaces/UserChatJson.html":{}}}],["threadservice",{"_index":831,"title":{"injectables/ThreadService.html":{}},"body":{"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/ThreadService.html":{},"coverage.html":{}}}],["threadsource",{"_index":1790,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["threaduser",{"_index":832,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["threaduser.name",{"_index":937,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["through",{"_index":74,"title":{},"body":{"components/AddChannelComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{}}}],["throw",{"_index":2646,"title":{},"body":{"injectables/StorageService.html":{},"components/TestComponent.html":{}}}],["throws",{"_index":2638,"title":{},"body":{"injectables/StorageService.html":{}}}],["time",{"_index":865,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/TestComponent.html":{},"classes/Thread.html":{}}}],["timestamp",{"_index":1109,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"classes/Thread.html":{},"classes/User.html":{}}}],["timstamp",{"_index":862,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["title",{"_index":78,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{}}}],["tmg",{"_index":1299,"title":{},"body":{"components/ImprintComponent.html":{}}}],["today",{"_index":2792,"title":{},"body":{"classes/Thread.html":{}}}],["today.getdate",{"_index":2824,"title":{},"body":{"classes/Thread.html":{}}}],["today.getfullyear",{"_index":2820,"title":{},"body":{"classes/Thread.html":{}}}],["today.getmonth",{"_index":2822,"title":{},"body":{"classes/Thread.html":{}}}],["todayday",{"_index":2823,"title":{},"body":{"classes/Thread.html":{}}}],["todaymonth",{"_index":2821,"title":{},"body":{"classes/Thread.html":{}}}],["todayyear",{"_index":2819,"title":{},"body":{"classes/Thread.html":{}}}],["toggle",{"_index":2586,"title":{},"body":{"injectables/SidenavService.html":{}}}],["toggled",{"_index":2459,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["toggles",{"_index":1010,"title":{},"body":{"components/EditChannelComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["togglesidenav",{"_index":2577,"title":{},"body":{"injectables/SidenavService.html":{}}}],["togglesidenav(value",{"_index":2580,"title":{},"body":{"injectables/SidenavService.html":{}}}],["togglesidenavifscreenissmall",{"_index":2456,"title":{},"body":{"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["togglesidenavifscreenissmall(value",{"_index":2587,"title":{},"body":{"injectables/SidenavService.html":{}}}],["toggleuserselection",{"_index":478,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["toggleuserselection(userid",{"_index":527,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["tojson",{"_index":630,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["top",{"_index":1506,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{}}}],["totalwindowwidth",{"_index":1523,"title":{},"body":{"components/LogoComponent.html":{}}}],["track",{"_index":728,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{}}}],["transferred",{"_index":177,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["transferring",{"_index":1710,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["transform",{"_index":1509,"title":{},"body":{"components/LogoComponent.html":{}}}],["transformorigin",{"_index":1514,"title":{},"body":{"components/LogoComponent.html":{}}}],["transition",{"_index":1213,"title":{},"body":{"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["transition(':enter",{"_index":1221,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition(':leave",{"_index":1224,"title":{},"body":{"components/HeaderComponent.html":{}}}],["transition('showbanner",{"_index":1872,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["transition('void",{"_index":1497,"title":{},"body":{"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["translate",{"_index":860,"title":{},"body":{"components/ChannelThreadComponent.html":{},"components/LogoComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["trigger",{"_index":516,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/LogoComponent.html":{},"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["trigger('emailbanner",{"_index":2563,"title":{},"body":{"components/SendMailToResetPasswordComponent.html":{}}}],["trigger('fade",{"_index":1496,"title":{},"body":{"components/LogoComponent.html":{}}}],["trigger('fadeinout",{"_index":1218,"title":{},"body":{"components/HeaderComponent.html":{}}}],["trigger('grow",{"_index":1502,"title":{},"body":{"components/LogoComponent.html":{}}}],["trigger('resetbanner",{"_index":1867,"title":{},"body":{"components/PasswordResetComponent.html":{}}}],["trigger('resizeandmove",{"_index":1504,"title":{},"body":{"components/LogoComponent.html":{}}}],["trigger('slidein",{"_index":1499,"title":{},"body":{"components/LogoComponent.html":{}}}],["trigger.menuopen",{"_index":611,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["trigger.openmenu",{"_index":612,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["triggered",{"_index":2447,"title":{},"body":{"components/SearchComponent.html":{}}}],["triggering",{"_index":2246,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["triggers",{"_index":518,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["true",{"_index":18,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"classes/User.html":{},"components/ViewProfileComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":264,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/HeaderComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["trylogout",{"_index":1244,"title":{},"body":{"components/HeaderComponent.html":{},"components/TestComponent.html":{}}}],["tslib",{"_index":3225,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":687,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["type",{"_index":63,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":2425,"title":{},"body":{"components/RegisterNextComponent.html":{},"classes/Thread.html":{},"classes/UserChat.html":{}}}],["typically",{"_index":200,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"injectables/SidenavService.html":{}}}],["tätig",{"_index":2130,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["u.authuserid",{"_index":2527,"title":{},"body":{"components/SearchComponent.html":{}}}],["u.id",{"_index":599,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/MessageReactionComponent.html":{}}}],["uh",{"_index":926,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["uhr",{"_index":2859,"title":{},"body":{"classes/Thread.html":{}}}],["ui",{"_index":125,"title":{},"body":{"components/AddChannelComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["uid",{"_index":2745,"title":{},"body":{"components/TestComponent.html":{}}}],["um",{"_index":2153,"title":{},"body":{"components/PrivacyComponent.html":{},"components/ReAuthenticateUserComponent.html":{}}}],["umzusetzen",{"_index":2211,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unbekannter",{"_index":1017,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["uncomment",{"_index":3307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["und",{"_index":2041,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["undefined",{"_index":433,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{}}}],["ungültig",{"_index":1419,"title":{},"body":{"components/LoginComponent.html":{},"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["unique",{"_index":532,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{}}}],["uniqueness",{"_index":147,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["unit",{"_index":3273,"title":{},"body":{"index.html":{}}}],["unix",{"_index":861,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["unknown",{"_index":2633,"title":{},"body":{"injectables/StorageService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["unrichtiger",{"_index":2047,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["uns",{"_index":2038,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unsere",{"_index":2148,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unserer",{"_index":2100,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unseres",{"_index":2030,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["unset",{"_index":2395,"title":{},"body":{"components/RegisterComponent.html":{}}}],["unsubscribe",{"_index":762,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["unsubscribes",{"_index":1685,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{}}}],["unter",{"_index":2026,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["up",{"_index":160,"title":{},"body":{"components/AddChannelComponent.html":{},"components/LoginComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["update",{"_index":1033,"title":{},"body":{"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["updated",{"_index":2753,"title":{},"body":{"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["updateemailaddress(newmail",{"_index":2680,"title":{},"body":{"components/TestComponent.html":{}}}],["updateplaceholder",{"_index":2444,"title":{},"body":{"components/SearchComponent.html":{}}}],["updateplaceholder(width",{"_index":2498,"title":{},"body":{"components/SearchComponent.html":{}}}],["updatereaction",{"_index":1731,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["updates",{"_index":760,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/ProfileViewComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{}}}],["updatescreensize",{"_index":2578,"title":{},"body":{"injectables/SidenavService.html":{}}}],["updatethread",{"_index":1791,"title":{},"body":{"injectables/MessageService.html":{},"injectables/ThreadService.html":{}}}],["updatethreadmessagereactions",{"_index":1654,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["updateuserobject",{"_index":3056,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["updateuserobject(key",{"_index":3070,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["updating",{"_index":1701,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/TestComponent.html":{}}}],["upload",{"_index":1895,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["uploadbytes",{"_index":2635,"title":{},"body":{"injectables/StorageService.html":{}}}],["uploadbytes(storageref",{"_index":2642,"title":{},"body":{"injectables/StorageService.html":{}}}],["uploaded",{"_index":1937,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["uploadedfile",{"_index":1905,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["uploaderr",{"_index":1906,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["uploadfile",{"_index":2626,"title":{},"body":{"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["uploadfile(file",{"_index":2630,"title":{},"body":{"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["uploads",{"_index":2632,"title":{},"body":{"injectables/StorageService.html":{},"injectables/UserRegistrationService.html":{}}}],["upon",{"_index":1036,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["upper",{"_index":1549,"title":{},"body":{"components/LogoComponent.html":{}}}],["url",{"_index":1475,"title":{},"body":{"components/LogoComponent.html":{},"classes/Message.html":{},"components/PhotoSelectionComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/StorageService.html":{},"classes/User.html":{},"injectables/UserRegistrationService.html":{}}}],["urls",{"_index":3351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":2466,"title":{},"body":{"components/SearchComponent.html":{},"injectables/UserRegistrationService.html":{},"index.html":{}}}],["used",{"_index":98,"title":{},"body":{"components/AddChannelComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":93,"title":{"classes/User.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"classes/Message.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["user's",{"_index":690,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/SearchComponent.html":{},"classes/User.html":{}}}],["user'},{'name",{"_index":369,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["user(this._userdata",{"_index":3094,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["user(user",{"_index":258,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["user.authuserid",{"_index":257,"title":{},"body":{"components/AddChannelComponent.html":{},"components/TestComponent.html":{}}}],["user.channels.includes(this.data.channelid",{"_index":570,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["user.class",{"_index":647,"title":{},"body":{"classes/Channel.html":{},"classes/Message.html":{}}}],["user.component",{"_index":2715,"title":{},"body":{"components/TestComponent.html":{}}}],["user.component.html",{"_index":2264,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["user.component.scss",{"_index":2265,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["user.component.ts",{"_index":2263,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"coverage.html":{}}}],["user.component.ts:18",{"_index":2268,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["user.component.ts:23",{"_index":2270,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["user.component.ts:34",{"_index":2269,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{}}}],["user.email",{"_index":2260,"title":{},"body":{"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["user.id",{"_index":803,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"components/MessageReactionComponent.html":{}}}],["user.imageurl",{"_index":601,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["user.name",{"_index":600,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["user.name.tolowercase().includes(filtervalue",{"_index":569,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["user.onlinestatus",{"_index":2254,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["user.user.uid",{"_index":3087,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["user/re",{"_index":2262,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/TestComponent.html":{},"coverage.html":{}}}],["user?.email",{"_index":2766,"title":{},"body":{"components/TestComponent.html":{}}}],["user?.name",{"_index":2767,"title":{},"body":{"components/TestComponent.html":{}}}],["userauthid",{"_index":36,"title":{},"body":{"components/AddChannelComponent.html":{},"components/TestComponent.html":{}}}],["userchat",{"_index":2771,"title":{"classes/UserChat.html":{}},"body":{"classes/Thread.html":{},"classes/User.html":{},"classes/UserChat.html":{},"coverage.html":{}}}],["userchatcomponent",{"_index":386,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["userchatid",{"_index":1657,"title":{},"body":{"components/MessageReactionComponent.html":{},"injectables/ThreadService.html":{},"classes/UserChat.html":{},"interfaces/UserChatJson.html":{},"injectables/UserRegistrationService.html":{}}}],["userchatindex",{"_index":1658,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userchatjson",{"_index":3042,"title":{"interfaces/UserChatJson.html":{}},"body":{"interfaces/UserChatJson.html":{},"coverage.html":{}}}],["userchats",{"_index":2929,"title":{},"body":{"classes/User.html":{}}}],["userchatthreadcomponent",{"_index":387,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["usercontrol",{"_index":470,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["userdata",{"_index":2299,"title":{},"body":{"components/RegisterComponent.html":{}}}],["userdocref",{"_index":578,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["userfirestore",{"_index":2769,"title":{},"body":{"components/TestComponent.html":{}}}],["userid",{"_index":241,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"injectables/UserRegistrationService.html":{}}}],["userindex",{"_index":1762,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userlogout",{"_index":2768,"title":{},"body":{"components/TestComponent.html":{}}}],["username",{"_index":509,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["userreaction",{"_index":1678,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userreactionagain",{"_index":1655,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userreactionagain(chatreactions",{"_index":1711,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userref",{"_index":3099,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["userref.id",{"_index":3101,"title":{},"body":{"injectables/UserRegistrationService.html":{}}}],["userregistrationservice",{"_index":1920,"title":{"injectables/UserRegistrationService.html":{}},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"injectables/UserRegistrationService.html":{},"coverage.html":{}}}],["userregservice",{"_index":1922,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{}}}],["users",{"_index":37,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/MessageReactionComponent.html":{},"components/SearchComponent.html":{},"components/TestComponent.html":{},"classes/User.html":{}}}],["users.component",{"_index":792,"title":{},"body":{"components/ChannelParticipantsComponent.html":{}}}],["users.component.html",{"_index":463,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.scss",{"_index":464,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts",{"_index":454,"title":{},"body":{"components/AddUsersComponent.html":{},"coverage.html":{}}}],["users.component.ts:104",{"_index":521,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:126",{"_index":520,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:138",{"_index":508,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:150",{"_index":502,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:162",{"_index":528,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:178",{"_index":512,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:41",{"_index":539,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:42",{"_index":540,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:43",{"_index":542,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:44",{"_index":538,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:45",{"_index":537,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:46",{"_index":484,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:51",{"_index":536,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:52",{"_index":535,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:53",{"_index":534,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:72",{"_index":492,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.component.ts:87",{"_index":485,"title":{},"body":{"components/AddUsersComponent.html":{}}}],["users.find((u",{"_index":2526,"title":{},"body":{"components/SearchComponent.html":{}}}],["users/${userid",{"_index":579,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["users/add",{"_index":453,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"coverage.html":{}}}],["userscollection",{"_index":705,"title":{},"body":{"components/ChannelMembersComponent.html":{}}}],["usersdetail",{"_index":1675,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["usersforreaction",{"_index":1646,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["userssub",{"_index":2660,"title":{},"body":{"components/TestComponent.html":{}}}],["usersub",{"_index":39,"title":{},"body":{"components/AddChannelComponent.html":{},"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"components/TestComponent.html":{}}}],["uses",{"_index":1004,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["using",{"_index":504,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{}}}],["valid",{"_index":154,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"injectables/SidenavService.html":{}}}],["validate",{"_index":153,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["validatechanneldescription",{"_index":995,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["validatechanneldescription(event",{"_index":1044,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["validatechannelname",{"_index":996,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["validatechannelname(event",{"_index":1048,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["validates",{"_index":117,"title":{},"body":{"components/AddChannelComponent.html":{},"components/EditChannelComponent.html":{}}}],["validations",{"_index":151,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["validators",{"_index":1866,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["validators.email",{"_index":2272,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["validators.minlength(6",{"_index":2273,"title":{},"body":{"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.pattern('^[a",{"_index":2296,"title":{},"body":{"components/RegisterComponent.html":{}}}],["validators.required",{"_index":1876,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["validators.requiredtrue",{"_index":2298,"title":{},"body":{"components/RegisterComponent.html":{}}}],["value",{"_index":207,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"injectables/UserRegistrationService.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":567,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/SearchComponent.html":{}}}],["valuechanges",{"_index":2473,"title":{},"body":{"components/SearchComponent.html":{}}}],["values",{"_index":773,"title":{},"body":{"components/ChannelParticipantsComponent.html":{},"components/EditChannelComponent.html":{},"components/LogoComponent.html":{},"injectables/SidenavService.html":{},"components/TestComponent.html":{}}}],["var",{"_index":313,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["variable",{"_index":3120,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":3292,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":2582,"title":{},"body":{"injectables/SidenavService.html":{}}}],["verantwortliche",{"_index":2089,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verantwortlicher",{"_index":2015,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeiten",{"_index":2185,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeitet",{"_index":2134,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verarbeitung",{"_index":2043,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verbrauchersachen",{"_index":1328,"title":{},"body":{"components/ImprintComponent.html":{}}}],["verbraucherschlichtungsstelle",{"_index":1340,"title":{},"body":{"components/ImprintComponent.html":{}}}],["verbraucherstreitbeilegungsgesetz",{"_index":1322,"title":{},"body":{"components/ImprintComponent.html":{}}}],["verfügbar",{"_index":587,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["vergessen",{"_index":1423,"title":{},"body":{"components/LoginComponent.html":{}}}],["verlassen",{"_index":1089,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["verpflichtet",{"_index":1336,"title":{},"body":{"components/ImprintComponent.html":{}}}],["verschlüsselung",{"_index":2152,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verschlüsselungsverfahren",{"_index":2160,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["version",{"_index":2230,"title":{},"body":{"components/PrivacyComponent.html":{},"index.html":{},"properties.html":{}}}],["verteidigung",{"_index":2199,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vertrag",{"_index":2068,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["verwenden",{"_index":2001,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{}}}],["verwendest",{"_index":1414,"title":{},"body":{"components/LoginComponent.html":{}}}],["verwendet",{"_index":301,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["via",{"_index":496,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/LoginComponent.html":{},"components/PhotoSelectionComponent.html":{},"index.html":{}}}],["view",{"_index":390,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"injectables/ThreadService.html":{},"components/ViewProfileComponent.html":{}}}],["view'},{'name",{"_index":365,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{}}}],["view.component",{"_index":1208,"title":{},"body":{"components/HeaderComponent.html":{}}}],["view.component.html",{"_index":2236,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.scss",{"_index":2237,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts",{"_index":2235,"title":{},"body":{"components/ProfileViewComponent.html":{},"coverage.html":{}}}],["view.component.ts:15",{"_index":2243,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:17",{"_index":2252,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:19",{"_index":2242,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:28",{"_index":2249,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:40",{"_index":2245,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:49",{"_index":2248,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view.component.ts:57",{"_index":2251,"title":{},"body":{"components/ProfileViewComponent.html":{}}}],["view/profile",{"_index":1207,"title":{},"body":{"components/HeaderComponent.html":{},"components/ProfileViewComponent.html":{},"coverage.html":{}}}],["viewchild",{"_index":434,"title":{},"body":{"components/AddImgToMessageComponent.html":{},"components/ChannelThreadComponent.html":{},"components/SearchComponent.html":{}}}],["viewchild(\"editmessagebox",{"_index":901,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["viewchild('editmessagebox",{"_index":881,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["viewchild('fileinput",{"_index":431,"title":{},"body":{"components/AddImgToMessageComponent.html":{}}}],["viewchild('searchinput",{"_index":2519,"title":{},"body":{"components/SearchComponent.html":{}}}],["viewchild(matautocompletetrigger",{"_index":2506,"title":{},"body":{"components/SearchComponent.html":{}}}],["viewchild(messagereactioncomponent",{"_index":885,"title":{},"body":{"components/ChannelThreadComponent.html":{}}}],["viewprofilecomponent",{"_index":389,"title":{"components/ViewProfileComponent.html":{}},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"components/AppComponent.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/DashboardComponent.html":{},"components/EditChannelComponent.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PasswordResetComponent.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"components/SendMailToResetPasswordComponent.html":{},"components/TestComponent.html":{},"components/ViewProfileComponent.html":{},"coverage.html":{}}}],["views",{"_index":1175,"title":{},"body":{"components/HeaderComponent.html":{}}}],["visibility",{"_index":2583,"title":{},"body":{"injectables/SidenavService.html":{}}}],["visible",{"_index":2718,"title":{},"body":{"components/TestComponent.html":{}}}],["void",{"_index":142,"title":{},"body":{"components/AddChannelComponent.html":{},"components/AddImgToMessageComponent.html":{},"components/AddUsersComponent.html":{},"classes/Channel.html":{},"components/ChannelMembersComponent.html":{},"components/ChannelParticipantsComponent.html":{},"components/ChannelThreadComponent.html":{},"components/EditChannelComponent.html":{},"injectables/EmojiCommunicationService.html":{},"components/EmojiMartComponent.html":{},"components/HeaderComponent.html":{},"injectables/HeaderProfileService.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MessageReactionComponent.html":{},"injectables/MessageService.html":{},"components/PhotoSelectionComponent.html":{},"components/PrivacyComponent.html":{},"components/ProfileViewComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterNextComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"injectables/SnackBarService.html":{},"injectables/StorageService.html":{},"components/TestComponent.html":{},"classes/Thread.html":{},"injectables/ThreadService.html":{},"classes/User.html":{},"classes/UserChat.html":{},"injectables/UserRegistrationService.html":{},"components/ViewProfileComponent.html":{}}}],["vollständigen",{"_index":1083,"title":{},"body":{"components/EditChannelComponent.html":{}}}],["von",{"_index":725,"title":{},"body":{"components/ChannelMembersComponent.html":{},"components/EditChannelComponent.html":{},"components/PrivacyComponent.html":{}}}],["vor",{"_index":1338,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["vorgeschrieben",{"_index":2139,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vorliegt",{"_index":2137,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["vsbg",{"_index":1321,"title":{},"body":{"components/ImprintComponent.html":{}}}],["warning",{"_index":128,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["wartung",{"_index":2128,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["website",{"_index":1319,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["weder",{"_index":1333,"title":{},"body":{"components/ImprintComponent.html":{}}}],["week",{"_index":2794,"title":{},"body":{"classes/Thread.html":{}}}],["weekday",{"_index":2793,"title":{},"body":{"classes/Thread.html":{}}}],["weekdayname",{"_index":2848,"title":{},"body":{"classes/Thread.html":{}}}],["weekdays",{"_index":2827,"title":{},"body":{"classes/Thread.html":{}}}],["weekdays[weekday",{"_index":2849,"title":{},"body":{"classes/Thread.html":{}}}],["weight",{"_index":2355,"title":{},"body":{"components/RegisterComponent.html":{}}}],["weiter",{"_index":1926,"title":{},"body":{"components/PhotoSelectionComponent.html":{},"components/RegisterComponent.html":{}}}],["weitere",{"_index":1780,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["wenden",{"_index":2081,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["wenn",{"_index":2221,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["werden",{"_index":2107,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["whenever",{"_index":2448,"title":{},"body":{"components/SearchComponent.html":{}}}],["whether",{"_index":1819,"title":{},"body":{"injectables/MessageService.html":{},"components/SearchComponent.html":{},"injectables/ThreadService.html":{},"classes/User.html":{}}}],["white",{"_index":2377,"title":{},"body":{"components/RegisterComponent.html":{}}}],["white.png",{"_index":1486,"title":{},"body":{"components/LogoComponent.html":{}}}],["whole",{"_index":2704,"title":{},"body":{"components/TestComponent.html":{}}}],["whose",{"_index":134,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ChannelParticipantsComponent.html":{},"injectables/ThreadService.html":{}}}],["widerrufen",{"_index":2077,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["widerspruch",{"_index":2062,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["widerspruchsrecht",{"_index":2163,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["width",{"_index":1462,"title":{},"body":{"components/LogoComponent.html":{},"components/RegisterComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["window",{"_index":1461,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{},"injectables/SidenavService.html":{}}}],["window.innerwidth",{"_index":1524,"title":{},"body":{"components/LogoComponent.html":{},"injectables/SidenavService.html":{},"components/ViewProfileComponent.html":{}}}],["window:resize",{"_index":1450,"title":{},"body":{"components/LogoComponent.html":{},"components/SearchComponent.html":{}}}],["window:resize(event",{"_index":1455,"title":{},"body":{"components/LogoComponent.html":{}}}],["windowwidth",{"_index":2576,"title":{},"body":{"injectables/SidenavService.html":{}}}],["wir",{"_index":1331,"title":{},"body":{"components/ImprintComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["wird",{"_index":299,"title":{},"body":{"components/AddChannelComponent.html":{}}}],["wirkung",{"_index":2074,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["within",{"_index":1708,"title":{},"body":{"components/MessageReactionComponent.html":{},"components/RegisterComponent.html":{}}}],["wohnsitzes",{"_index":2088,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["work",{"_index":2764,"title":{},"body":{"components/TestComponent.html":{}}}],["writebatch",{"_index":548,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["writebatch(this.firestore",{"_index":573,"title":{},"body":{"components/AddUsersComponent.html":{},"components/ChannelMembersComponent.html":{}}}],["wurde",{"_index":1343,"title":{},"body":{"components/ImprintComponent.html":{},"components/PrivacyComponent.html":{}}}],["wähle",{"_index":303,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PhotoSelectionComponent.html":{}}}],["wählen",{"_index":1998,"title":{},"body":{"components/PhotoSelectionComponent.html":{}}}],["year",{"_index":2795,"title":{},"body":{"classes/Thread.html":{}}}],["yes",{"_index":1108,"title":{},"body":{"injectables/EmojiCommunicationService.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["yk2dgejx9yy7ihlij1qj",{"_index":1066,"title":{},"body":{"components/EditChannelComponent.html":{},"components/RegisterNextComponent.html":{}}}],["z",{"_index":2082,"title":{},"body":{"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["z.b",{"_index":2212,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["za",{"_index":2297,"title":{},"body":{"components/RegisterComponent.html":{}}}],["zeichen",{"_index":296,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ReAuthenticateUserComponent.html":{},"components/RegisterComponent.html":{}}}],["zeitpunkt",{"_index":2108,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zero",{"_index":1717,"title":{},"body":{"components/MessageReactionComponent.html":{}}}],["zone.js",{"_index":3227,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":1087,"title":{},"body":{"components/EditChannelComponent.html":{},"components/LoginComponent.html":{},"components/PrivacyComponent.html":{},"components/RegisterComponent.html":{}}}],["zugang",{"_index":2147,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zukunft",{"_index":2076,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zum",{"_index":291,"title":{},"body":{"components/AddChannelComponent.html":{},"components/PageNotFoundComponent.html":{},"components/PrivacyComponent.html":{}}}],["zur",{"_index":283,"title":{},"body":{"components/AddChannelComponent.html":{},"components/ImprintComponent.html":{}}}],["zurück",{"_index":1842,"title":{},"body":{"components/PageNotFoundComponent.html":{}}}],["zurücksetzen",{"_index":1888,"title":{},"body":{"components/PasswordResetComponent.html":{},"components/SendMailToResetPasswordComponent.html":{}}}],["zusammenhang",{"_index":2132,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zuständige",{"_index":2084,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zusätzlich",{"_index":2109,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zweck",{"_index":2101,"title":{},"body":{"components/PrivacyComponent.html":{}}}],["zwingende",{"_index":2189,"title":{},"body":{"components/PrivacyComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AddChannelComponent.html":{"url":"components/AddChannelComponent.html","title":"component - AddChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dialog/add-channel/add-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelDescription\n                            \n                            \n                                channelName\n                            \n                            \n                                createdChannelId\n                            \n                            \n                                currentUser\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                showDuplicateError\n                            \n                            \n                                showNameError\n                            \n                            \n                                userAuthId\n                            \n                            \n                                users\n                            \n                            \n                                    Private\n                                userSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkChannelNameExists\n                            \n                            \n                                    Async\n                                checkUserAuthId\n                            \n                            \n                                    Async\n                                createChannel\n                            \n                            \n                                findCurrentUser\n                            \n                            \n                                isValidChannelName\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                openChannelMembersDialog\n                            \n                            \n                                postChannelCreation\n                            \n                            \n                                prepareNewChannelData\n                            \n                            \n                                resetForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dataService: DataService, auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkChannelNameExists\n                        \n                    \n                \n            \n            \n                \ncheckChannelNameExists(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:180\n                        \n                    \n\n\n            \n                \n                        Checks if a channel with the given name already exists.\nThis method searches through all channels available in the dataService\nto determine if there is a channel with a title that matches the provided\nchannel name. It returns true if a match is found, otherwise false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the channel to check for existence.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nTrue if a channel with the given name exists, otherwise false.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkUserAuthId\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUserAuthId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Checks the authentication ID of the user asynchronously and then performs an action. If a user ID is found, it is saved and used later to identify the current user.\nIf no user is logged in, a corresponding message is displayed. If an error occurs, this is logged. After a short delay, a function is called to identify the current user.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Attempts to create a new channel based on the provided channel name and description.\nIt validates the channel name, creates the channel data, and attempts to add it to the data service.\nIf successful, it proceeds with post-creation UI actions; otherwise, it logs a warning.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCurrentUser\n                        \n                    \n                \n            \n            \n                \nfindCurrentUser(authId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Searches for and sets the current user based on a given authentication ID.\nThis function searches the users array for a user object whose authUserId property matches the given authId.\nIf a corresponding user is found, a new instance of this user is created and this.currentUser is set to it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication ID used to identify the current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isValidChannelName\n                        \n                    \n                \n            \n            \n                \nisValidChannelName(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:102\n                        \n                    \n\n\n            \n                \n                        Validates the channel name by checking its length and uniqueness.\nShows error messages through UI flags if validations fail.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the channel to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the channel name is valid, otherwise false.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:189\n                        \n                    \n\n\n            \n                \n                        Called when an instance of the component or service is destroyed.\nThis method takes care of cleaning up resources, in particular canceling subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openChannelMembersDialog\n                        \n                    \n                \n            \n            \n                \nopenChannelMembersDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:157\n                        \n                    \n\n\n            \n                \n                        Opens a dialog to display and manage the members of a created channel with a delay.\nThe dialog is only opened if a valid channel ID is available, which indicates that the channel has been successfully created.\nThe dialog shows information based on the transferred channel ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postChannelCreation\n                        \n                    \n                \n            \n            \n                \npostChannelCreation()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Executes post-channel creation actions, which include resetting the form and opening a dialog\nfor channel members.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prepareNewChannelData\n                        \n                    \n                \n            \n            \n                \nprepareNewChannelData(title: string, description: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Prepares the data for a new channel, including its title, description, initial participant list, and creator.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe title of the channel.\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA description of the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Channel\n\n                        \n                            \n                                The new channel object ready to be added to the data service.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetForm\n                        \n                    \n                \n            \n            \n                \nresetForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-channel/add-channel.component.ts:145\n                        \n                    \n\n\n            \n                \n                        Resets the form fields for the channel name and the channel description and closes all open dialog boxes.\nThis function is typically called after a channel has been created to prepare the form for future entries and to ensure that no dialog boxes remain open.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showDuplicateError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showNameError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userAuthId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-channel/add-channel.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DataService } from '../../services/data.service';\nimport { Channel } from '../../models/channel.class';\nimport { ChannelMembersComponent } from '../channel-members/channel-members.component';\nimport { User } from '../../models/user.class';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-add-channel',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  templateUrl: './add-channel.component.html',\n  styleUrl: './add-channel.component.scss'\n})\nexport class AddChannelComponent {\n\n  channelName: string = '';\n  channelDescription: string = '';\n  createdChannelId: string | null = null;\n  showNameError: boolean = false;\n  users: any;\n  userAuthId!: string;\n  currentUser!: User;\n  showDuplicateError: boolean = false;\n  private userSub: Subscription = new Subscription();\n\n  constructor(public dialog: MatDialog, private dataService: DataService, private auth: AuthService) {\n    this.userSub = this.dataService.getUsersList().subscribe((users: any) => {\n      this.users = users;\n    });\n    this.checkUserAuthId();\n  }\n\n\n  /**\n   * Checks the authentication ID of the user asynchronously and then performs an action. If a user ID is found, it is saved and used later to identify the current user. \n   * If no user is logged in, a corresponding message is displayed. If an error occurs, this is logged. After a short delay, a function is called to identify the current user.\n   */\n  async checkUserAuthId() {\n    await this.auth.getUserAuthId().then(userId => {\n      if (userId) {\n        this.userAuthId = userId;\n      } else {\n        console.log(\"Kein Benutzer angemeldet.\");\n      }\n    }).catch(error => {\n      console.error(\"Fehler beim Abrufen der Benutzer-ID:\", error);\n    });\n    setTimeout(() => {\n      this.findCurrentUser(this.userAuthId);\n    }, 600);\n  }\n\n\n  /**\n   * Searches for and sets the current user based on a given authentication ID. \n   * This function searches the `users` array for a user object whose `authUserId` property matches the given `authId`. \n   * If a corresponding user is found, a new instance of this user is created and `this.currentUser` is set to it.\n   * \n   * @param authId - The authentication ID used to identify the current user.\n   */\n  findCurrentUser(authId: string) {\n    const user = this.users.find((user: User) => user.authUserId === authId);\n    if (user) {\n      this.currentUser = new User(user);\n    }\n  }\n\n\n  /**\n   * Attempts to create a new channel based on the provided channel name and description.\n   * It validates the channel name, creates the channel data, and attempts to add it to the data service.\n   * If successful, it proceeds with post-creation UI actions; otherwise, it logs a warning.\n   */\n  async createChannel() {\n    if (!this.isValidChannelName(this.channelName)) {\n      return;\n    }\n    const newChannelData = this.prepareNewChannelData(this.channelName, this.channelDescription);\n    try {\n      this.createdChannelId = await this.dataService.addChannel(newChannelData);\n      this.postChannelCreation();\n    } catch (error) {\n      console.warn('Fehler beim Erstellen', error);\n    }\n  }\n\n\n  /**\n   * Validates the channel name by checking its length and uniqueness.\n   * Shows error messages through UI flags if validations fail.\n   * @param {string} channelName - The name of the channel to validate.\n   * @returns {boolean} True if the channel name is valid, otherwise false.\n   */\n  isValidChannelName(channelName: string): boolean {\n    if (channelName.length  {\n        this.dialog.open(ChannelMembersComponent, {\n          data: {\n            channelId: this.createdChannelId,\n            createdBy: this.currentUser.id\n          }\n        });\n      }, 500);\n    }\n  }\n\n\n  /**\n  * Checks if a channel with the given name already exists.\n  * This method searches through all channels available in the `dataService`\n  * to determine if there is a channel with a title that matches the provided\n  * channel name. It returns true if a match is found, otherwise false.\n  *\n  * @param {string} channelName - The name of the channel to check for existence.\n  * @returns {boolean} - True if a channel with the given name exists, otherwise false.\n  */\n  checkChannelNameExists(channelName: string): boolean {\n    return this.dataService.allChannels.some(channel => channel.title === channelName);\n  }\n\n\n  /**\n   * Called when an instance of the component or service is destroyed. \n   * This method takes care of cleaning up resources, in particular canceling subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy() {\n    if (this.userSub) {\n      this.userSub.unsubscribe();\n    }\n  }\n\n}\n    \n\n    \n        \n    \n    \n        Channel erstellen\n    \n    \n        Channels dienen deinem Team zur Kommunikation.\n        Am besten sollten sie themenbezogen sein #marketing zum\n        Beispiel.\n    \n    \n        Channel-Name\n        \n            \n            \n        \n        \n            @if (showNameError && channelName.length \n                Der Channel-Name muss mindestens 3 Zeichen lang sein.\n                \n            }\n            @if (showDuplicateError) {\n                \n                    Dieser Channel-Name wird bereits verwendet! Bitte wähle einen anderen!\n                \n            }\n        \n    \n    \n        Beschreibung (optional)\n        \n    \n    \n        = 3, 'btn-disabled': channelName.length Erstellen\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Channel erstellen                Channels dienen deinem Team zur Kommunikation.        Am besten sollten sie themenbezogen sein #marketing zum        Beispiel.                Channel-Name                                                            @if (showNameError && channelName.length                 Der Channel-Name muss mindestens 3 Zeichen lang sein.                            }            @if (showDuplicateError) {                                    Dieser Channel-Name wird bereits verwendet! Bitte wähle einen anderen!                            }                        Beschreibung (optional)                        = 3, \\'btn-disabled\\': channelName.length Erstellen    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddImgToMessageComponent.html":{"url":"components/AddImgToMessageComponent.html","title":"component - AddImgToMessageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddImgToMessageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/add-img-to-message/add-img-to-message.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-img-to-message\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatMenuTrigger\n                            MatMenuModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-img-to-message.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-img-to-message.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                fileInput\n                            \n                            \n                                imgFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleFileInput\n                            \n                            \n                                removeImage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                showImgRef\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:18\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        showImgRef\n                    \n                \n                \n                    \n                        Type :     HTMLDivElement\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleFileInput\n                        \n                    \n                \n            \n            \n                \nhandleFileInput(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Handles the file input event, reads the selected image file,\nand displays it in the showImgRef element. If an image is already\ndisplayed, it removes the old image before displaying the new one.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file input change event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeImage\n                        \n                    \n                \n            \n            \n                \nremoveImage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Removes the currently displayed image from the showImgRef element\nand clears the file input value. It also resets the imgFile property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('fileInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imgFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/add-img-to-message/add-img-to-message.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\n\n@Component({\n  selector: 'app-add-img-to-message',\n  standalone: true,\n  imports: [\n    MatMenuTrigger,\n    MatMenuModule,\n  ],\n  templateUrl: './add-img-to-message.component.html',\n  styleUrl: './add-img-to-message.component.scss'\n})\nexport class AddImgToMessageComponent {\n\n  @ViewChild('fileInput') fileInput!: ElementRef;\n  @Input() showImgRef!: HTMLDivElement;\n  imgFile: File | undefined = undefined;\n\n  constructor( ) { }\n\n    /**\n   * Handles the file input event, reads the selected image file, \n   * and displays it in the `showImgRef` element. If an image is already \n   * displayed, it removes the old image before displaying the new one.\n   * \n   * @param {Event} event - The file input change event.\n   */\n  handleFileInput(event: any) {\n    const file: File = event.target.files[0];\n    const reader: FileReader = new FileReader();\n    this.removeImage();\n    reader.onloadend = () => {\n      const imgElement = document.createElement('img');\n      imgElement.src = reader.result as string;\n      imgElement.classList.add('img-file');\n      this.showImgRef.innerHTML= '';\n      this.showImgRef.appendChild(imgElement);\n      imgElement.addEventListener('click', this.removeImage.bind(this));\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n      this.imgFile = file;\n    }\n  }\n\n    /**\n   * Removes the currently displayed image from the `showImgRef` element \n   * and clears the file input value. It also resets the `imgFile` property.\n   */\n  removeImage() {\n    this.showImgRef.innerHTML = '';\n    this.fileInput.nativeElement.value = '';\n    this.imgFile = undefined;\n  }\n\n}\n\n    \n\n    \n        \n            \n    \n      \n    \n    \n      \n        \n      \n   \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                       '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddImgToMessageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddUsersComponent.html":{"url":"components/AddUsersComponent.html","title":"component - AddUsersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUsersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dialog/add-users/add-users.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-channel-members\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatRadioModule\n                            CommonModule\n                            FormsModule\n                            ReactiveFormsModule\n                            MatIconModule\n                            MatSelectModule\n                            MatChipsModule\n                            MatFormFieldModule\n                            MatButtonModule\n                            MatMenuModule\n                            MatAutocompleteModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-users.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-users.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allUsers\n                            \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                filteredUsers\n                            \n                            \n                                isPanelOpen\n                            \n                            \n                                selectedUsers\n                            \n                            \n                                selectedUsersIds\n                            \n                            \n                                userControl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChannelToSpecificUsers\n                            \n                            \n                                filterUsers\n                            \n                            \n                                getUserImg\n                            \n                            \n                                getUserName\n                            \n                            \n                                openMenu\n                            \n                            \n                                removeUser\n                            \n                            \n                                save\n                            \n                            \n                                toggleUserSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, dialogRef: MatDialogRef, dialog: MatDialog, dataService: DataService, data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/dialog/add-users/add-users.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChannelToSpecificUsers\n                        \n                    \n                \n            \n            \n                \naddChannelToSpecificUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:87\n                        \n                    \n\n\n            \n                \n                        This function adds the channel to specific users when it is created.\nAlso the User will be added to the Channel´s participants\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \nif the operation is successfully\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterUsers\n                        \n                    \n                \n            \n            \n                \nfilterUsers(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:72\n                        \n                    \n\n\n            \n                \n                        Filter function for selecting users during input via keyboard.\nChannel members and already selected users are filtered out.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nstring data from filteredUsers Observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User[]\n\n                        \n                            \n                                \nthe filtered user\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserImg\n                        \n                    \n                \n            \n            \n                \ngetUserImg(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:150\n                        \n                    \n\n\n            \n                \n                        This function searches for the user avatar using the transferred userId from the allUsers array in the dataService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nthe user avatar imageUrl if the user is possible.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserName\n                        \n                    \n                \n            \n            \n                \ngetUserName(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:138\n                        \n                    \n\n\n            \n                \n                        This function searches for the username using the transferred userId from the allUsers array in the dataService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nthe user name if the user is possible.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openMenu\n                        \n                    \n                \n            \n            \n                \nopenMenu(trigger: MatMenuTrigger, event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:178\n                        \n                    \n\n\n            \n                \n                        Opens a menu based on the input value and the current status of the menu.\nThe function checks that the input value is not empty and that the menu is not currently open before the menu is opened.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                trigger\n                                            \n                                                        MatMenuTrigger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe trigger that controls the menu.\n\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event that triggers this function, typically an input.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUser\n                        \n                    \n                \n            \n            \n                \nremoveUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:126\n                        \n                    \n\n\n            \n                \n                        This function removes the selected user from the selectedUsers and selectedUsersIds array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:104\n                        \n                    \n\n\n            \n                \n                        This function executes the final saving process of the addChannelToAllUsers or addChannelToSpecificUsers.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \nif the operation is not succesfully\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleUserSelection\n                        \n                    \n                \n            \n            \n                \ntoggleUserSelection(userId: string, userName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/add-users/add-users.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Adds a user to the list of selected users if it is not already included and resets the associated form control element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user.\n\n\n                                            \n                                        \n                                        \n                                                userName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user that is displayed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPanelOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUsersIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl('')\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/add-users/add-users.component.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { Observable, from, map, startWith } from 'rxjs';\nimport { Firestore, writeBatch, arrayUnion, doc } from '@angular/fire/firestore';\nimport { DataService } from '../../services/data.service';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { User } from '../../models/user.class';\nimport { Channel } from '../../models/channel.class';\nimport { MatSelectModule } from '@angular/material/select';\n\n\n@Component({\n  selector: 'app-channel-members',\n  standalone: true,\n  imports: [\n    MatRadioModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatAutocompleteModule\n  ],\n  templateUrl: './add-users.component.html',\n  styleUrl: './add-users.component.scss'\n})\nexport class AddUsersComponent {\n\n  selectedUsers: string[] = [];\n  selectedUsersIds: string[] = [];\n  userControl = new FormControl('');\n  isPanelOpen!: boolean;\n  filteredUsers!: Observable;\n  allUsers: User[] = [];\n\n  constructor(\n    private firestore: Firestore,\n    private dialogRef: MatDialogRef,\n    public dialog: MatDialog,\n    public dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: { \n      channelId: string,\n      currentChannel: Channel \n    }\n  ) {\n    this.allUsers = this.dataService.allUsers;\n    this.filteredUsers = this.userControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this.filterUsers(value ?? ''))\n    );\n  }\n\n  /**\n   * Filter function for selecting users during input via keyboard. \n   * Channel members and already selected users are filtered out.\n   * \n   * @param value - string data from filteredUsers Observable\n   * @returns - the filtered user\n   */\n  filterUsers(value: string): User[] {\n    const filterValue = value.toLowerCase();\n    return this.allUsers.filter(user =>\n      user.name.toLowerCase().includes(filterValue) &&\n      !user.channels.includes(this.data.channelId) &&\n      !this.selectedUsersIds.includes(user.id))\n  }\n\n\n  /**\n   * This function adds the channel to specific users when it is created.\n   * Also the User will be added to the Channel´s participants\n   * \n   * @returns - if the operation is successfully\n   */\n  addChannelToSpecificUsers() {               \n    const batch = writeBatch(this.firestore);\n    const channelDocRef = doc(this.firestore, `channels/${this.data.channelId}`);\n    this.selectedUsersIds.forEach(userId => {\n      const userDocRef = doc(this.firestore, `users/${userId}`);\n      batch.update(userDocRef, { channels: arrayUnion(this.data.channelId) });\n      batch.update(channelDocRef, { participants: arrayUnion(userId) });\n    });\n    return from(batch.commit());\n  }\n\n\n  /**\n   * This function executes the final saving process of the addChannelToAllUsers or addChannelToSpecificUsers.\n   * \n   * @returns - if the operation is not succesfully\n   */\n  save() {\n    if (!this.data.channelId) {\n      console.error('Keine ID verfügbar!');\n      return;\n    }\n\n    this.addChannelToSpecificUsers().subscribe({\n      next: () => {\n        this.dialogRef.close();\n      },\n      error: (error) => {\n        console.error('Fehler beim hinzufügen der Kanal ID!', error);\n      }\n    });\n  }\n\n\n  /**\n   * This function removes the selected user from the selectedUsers and selectedUsersIds array.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   */\n  removeUser(userId: string): void {\n    this.selectedUsers = this.selectedUsers.filter(id => id !== userId);\n    this.selectedUsersIds = this.selectedUsersIds.filter(id => id !== userId);\n  }\n\n\n  /**\n   * This function searches for the username using the transferred userId from the allUsers array in the dataService.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   * @returns - the user name if the user is possible. \n   */\n  getUserName(userId: string): string {\n    const user = this.dataService.allUsers.find(u => u.id === userId);\n    return user ? user.name : '';\n  }\n\n\n  /**\n   * This function searches for the user avatar using the transferred userId from the allUsers array in the dataService.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   * @returns - the user avatar imageUrl if the user is possible. \n   */\n  getUserImg(userId: string): string {\n    const user = this.dataService.allUsers.find(u => u.id === userId);\n    return user ? user.imageUrl : '';\n  }\n\n\n  /**\n   * Adds a user to the list of selected users if it is not already included and resets the associated form control element.\n   * \n   * @param userId - The unique ID of the user.\n   * @param userName - The name of the user that is displayed.\n   */\n  toggleUserSelection(userId: string, userName: string): void {\n    if (!this.selectedUsersIds.includes(userId)) {\n      this.selectedUsers.push(userName);\n      this.selectedUsersIds.push(userId);\n    }\n    this.userControl.reset();\n  }\n\n\n  /**\n   * Opens a menu based on the input value and the current status of the menu. \n   * The function checks that the input value is not empty and that the menu is not currently open before the menu is opened.\n   * \n   * @param trigger - The trigger that controls the menu.\n   * @param event - The keyboard event that triggers this function, typically an input.\n   */\n  openMenu(trigger: MatMenuTrigger, event: KeyboardEvent) {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement.value.length > 0 && !trigger.menuOpen) {\n      trigger.openMenu();\n    }\n  }\n\n}\n\n\n    \n\n    \n        \n    \n    \n        Leute hinzufügen\n    \n\n    # {{ data.currentChannel.title }}\n\n    \n    \n        \n            \n            \n                \n                    \n                    {{ user.name }}\n                \n            \n        \n\n        \n         0\">\n            \n            \n                \n                    \n                        \n                        \n                            {{ getUserName(userId) }}\n                        \n                    \n                    \n                \n            \n        \n    \n\n    \n         0)\" (click)=\"save()\">Hinzufügen\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Leute hinzufügen        # {{ data.currentChannel.title }}                                                                                                {{ user.name }}                                                     0\">                                                                                                                                        {{ getUserName(userId) }}                                                                                                                     0)\" (click)=\"save()\">Hinzufügen    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddUsersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'dabubble'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport {  RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'dabubble';\n}\n\n\n    \n\n    \n        \n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channel.html":{"url":"classes/Channel.html","title":"class - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/channel.class.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a communication channel.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                createdBy\n                            \n                            \n                                description\n                            \n                            \n                                participants\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addParticipant\n                            \n                            \n                                removeParticipant\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/channel.class.ts:11\n                            \n                        \n\n                \n                    \n                            Constructs a new Channel instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe channel data.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/channel.class.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/channel.class.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/channel.class.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/channel.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/channel.class.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addParticipant\n                        \n                    \n                \n            \n            \n                \naddParticipant(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/channel.class.ts:44\n                        \n                    \n\n\n            \n                \n                        Adds a participant to the channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user to add as a participant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeParticipant\n                        \n                    \n                \n            \n            \n                \nremoveParticipant(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/channel.class.ts:56\n                        \n                    \n\n\n            \n                \n                        Removes a participant from the channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user to remove as a participant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/channel.class.ts:69\n                        \n                    \n\n\n            \n                \n                        Converts the Channel instance to a JSON object.\n\n\n                        \n                            Returns :     { channelId: string; title: string; participants: {}; description: string; createdBy: string; }\n\n                        \n                            \n                                The JSON representation of the channel.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from './user.class';\n\n/**\n * Represents a communication channel.\n */\nexport class Channel {\n  title: string;\n  participants: User[];\n  channelId: string;\n  description: string;\n  createdBy: string;\n\n\n   /**\n   * Constructs a new Channel instance.\n   * \n   * @param {Object} data - The channel data.\n   * @param {string} [data.channelId] - The ID of the channel.\n   * @param {string} [data.title] - The title of the channel.\n   * @param {User[]} [data.participants] - The list of participants in the channel.\n   * @param {string} [data.description] - The description of the channel.\n   * @param {string} [data.createdBy] - The ID of the user who created the channel.\n   */\n  constructor(data: {\n    channelId?: string,\n    title?: string,\n    participants?: User[],\n    description?: string,\n    createdBy?: string\n  }) {\n    this.channelId = data.channelId || '';\n    this.title = data.title || '';\n    this.participants = data.participants || [];\n    this.description = data.description || '';\n    this.createdBy = data.createdBy || '';\n  }\n\n\n   /**\n   * Adds a participant to the channel.\n   * \n   * @param {User} user - The user to add as a participant.\n   */\n  addParticipant(user: User): void {\n    if (!this.participants.includes(user)) {\n      this.participants.push(user);\n    }\n  }\n\n\n   /**\n   * Removes a participant from the channel.\n   * \n   * @param {User} user - The user to remove as a participant.\n   */\n  removeParticipant(user: User): void {\n    const index = this.participants.indexOf(user);\n    if (index !== -1) {\n      this.participants.splice(index, 1);\n    }\n  }\n\n\n  /**\n   * Converts the Channel instance to a JSON object.\n   * \n   * @returns {Object} The JSON representation of the channel.\n   */\n  toJSON() {\n    return {\n        channelId: this.channelId,\n        title: this.title,\n        participants: this.participants,\n        description: this.description,\n        createdBy: this.createdBy\n    };\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChannelMembersComponent.html":{"url":"components/ChannelMembersComponent.html","title":"component - ChannelMembersComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChannelMembersComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dialog/channel-members/channel-members.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-channel-members\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatRadioModule\n                            CommonModule\n                            FormsModule\n                            MatSelectModule\n                            ReactiveFormsModule\n                            MatIconModule\n                            MatChipsModule\n                            MatFormFieldModule\n                            MatButtonModule\n                            MatMenuModule\n                            MatAutocompleteModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./channel-members.component.html\n            \n\n\n\n            \n                styleUrl\n                ./channel-members.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allUsers\n                            \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                filteredUsers\n                            \n                            \n                                isPanelOpen\n                            \n                            \n                                selectedOption\n                            \n                            \n                                selectedUsers\n                            \n                            \n                                selectedUsersIds\n                            \n                            \n                                userControl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChannelToAllUsers\n                            \n                            \n                                addChannelToSpecificUsers\n                            \n                            \n                                filterUsers\n                            \n                            \n                                getUserImg\n                            \n                            \n                                getUserName\n                            \n                            \n                                openMenu\n                            \n                            \n                                performChannelAddition\n                            \n                            \n                                removeUser\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                toggleUserSelection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore, dialogRef: MatDialogRef, dialog: MatDialog, dataService: DataService, data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChannelToAllUsers\n                        \n                    \n                \n            \n            \n                \naddChannelToAllUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:84\n                        \n                    \n\n\n            \n                \n                        This function adds the channel to all users when it is created.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \nif the operation is successfully\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addChannelToSpecificUsers\n                        \n                    \n                \n            \n            \n                \naddChannelToSpecificUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:106\n                        \n                    \n\n\n            \n                \n                        This function adds the channel to specific users when it is created.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \nif the operation is successfully\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterUsers\n                        \n                    \n                \n            \n            \n                \nfilterUsers(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:71\n                        \n                    \n\n\n            \n                \n                        Filter function for selecting users during input via keyboard.\nAlready selected users are filtered out.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nstring data from filteredUsers Observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User[]\n\n                        \n                            \n                                \nthe filtered user\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserImg\n                        \n                    \n                \n            \n            \n                \ngetUserImg(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:183\n                        \n                    \n\n\n            \n                \n                        This function searches for the user avatar using the transferred userId from the allUsers array in the dataService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nthe user avatar imageUrl if the user is possible.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserName\n                        \n                    \n                \n            \n            \n                \ngetUserName(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:171\n                        \n                    \n\n\n            \n                \n                        This function searches for the username using the transferred userId from the allUsers array in the dataService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \nthe user name if the user is possible.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openMenu\n                        \n                    \n                \n            \n            \n                \nopenMenu(trigger: MatMenuTrigger, event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:211\n                        \n                    \n\n\n            \n                \n                        Opens a menu based on the input value and the current status of the menu.\nThe function checks that the input value is not empty and that the menu is not currently open before the menu is opened.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                trigger\n                                            \n                                                        MatMenuTrigger\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe trigger that controls the menu.\n\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe keyboard event that triggers this function, typically an input.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        performChannelAddition\n                        \n                    \n                \n            \n            \n                \nperformChannelAddition()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:143\n                        \n                    \n\n\n            \n                \n                        Performs the addition of the channel to all or specific users based on the selected option.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the addition is completed.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUser\n                        \n                    \n                \n            \n            \n                \nremoveUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:159\n                        \n                    \n\n\n            \n                \n                        This function removes the selected user from the selectedUsers and selectedUsersIds array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nthe userId is the Id from the specific selected user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Saves the channel settings based on the selected option. Closes the dialog on success.\nIt handles two scenarios: adding to all users or specific users based on the user's selection.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleUserSelection\n                        \n                    \n                \n            \n            \n                \ntoggleUserSelection(userId: string, userName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/channel-members/channel-members.component.ts:195\n                        \n                    \n\n\n            \n                \n                        Adds a user to the list of selected users if it is not already included and resets the associated form control element.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique ID of the user.\n\n\n                                            \n                                        \n                                        \n                                                userName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the user that is displayed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPanelOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'all'\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedUsersIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl('')\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/channel-members/channel-members.component.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { Observable, from, map, startWith, switchMap } from 'rxjs';\nimport { Firestore, collection, getDocs, writeBatch, arrayUnion, doc } from '@angular/fire/firestore';\nimport { MatSelectModule } from '@angular/material/select';\nimport { DataService } from '../../services/data.service';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { User } from '../../models/user.class';\n\n\n@Component({\n  selector: 'app-channel-members',\n  standalone: true,\n  imports: [\n    MatRadioModule,\n    CommonModule,\n    FormsModule,\n    MatSelectModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatAutocompleteModule\n  ],\n  templateUrl: './channel-members.component.html',\n  styleUrl: './channel-members.component.scss'\n})\nexport class ChannelMembersComponent {\n\n  selectedOption = 'all';\n  selectedUsers: string[] = [];\n  selectedUsersIds: string[] = [];\n  userControl = new FormControl('');\n  isPanelOpen: any;\n  filteredUsers!: Observable;\n  allUsers: User[] = [];\n\n\n  constructor(\n    private firestore: Firestore,\n    private dialogRef: MatDialogRef,\n    public dialog: MatDialog,\n    public dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: { channelId: string, createdBy: string }\n  ) {\n    this.allUsers = this.dataService.allUsers;\n    this.filteredUsers = this.userControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this.filterUsers(value ?? ''))\n    );\n  }\n\n\n  /**\n   * Filter function for selecting users during input via keyboard. \n   * Already selected users are filtered out.\n   * \n   * @param value - string data from filteredUsers Observable\n   * @returns - the filtered user\n   */\n  filterUsers(value: string): User[] {\n    const filterValue = value.toLowerCase();\n    return this.allUsers.filter(user =>\n      user.name.toLowerCase().includes(filterValue) &&\n      !this.selectedUsersIds.includes(user.id));\n  }\n\n\n  /**\n   * This function adds the channel to all users when it is created.\n   * \n   * @returns - if the operation is successfully\n   */\n  addChannelToAllUsers() {\n    const usersCollection = collection(this.firestore, 'users');\n    return from(getDocs(usersCollection)).pipe(\n      switchMap(querySnapshot => {\n        const batch = writeBatch(this.firestore);\n        querySnapshot.forEach(docSnapshot => {\n          const userDocRef = docSnapshot.ref;\n          batch.update(userDocRef, { channels: arrayUnion(this.data.channelId) });\n          const channelDocRef = doc(this.firestore, `channels/${this.data.channelId}`);\n          batch.update(channelDocRef, { participants: arrayUnion(docSnapshot.id) });\n        });\n        return from(batch.commit());\n      })\n    );\n  }\n\n\n  /**\n   * This function adds the channel to specific users when it is created.\n   * \n   * @returns - if the operation is successfully\n   */\n  addChannelToSpecificUsers() {\n    const batch = writeBatch(this.firestore);\n    const channelDocRef = doc(this.firestore, `channels/${this.data.channelId}`);\n    if (!this.selectedUsersIds.includes(this.data.createdBy)) {\n      this.selectedUsersIds.push(this.data.createdBy);\n    }\n    this.selectedUsersIds.forEach(userId => {\n      const userDocRef = doc(this.firestore, `users/${userId}`);\n      batch.update(userDocRef, { channels: arrayUnion(this.data.channelId) });\n      batch.update(channelDocRef, { participants: arrayUnion(userId) });\n    });\n    return from(batch.commit());\n  }\n\n\n  /**\n   * Saves the channel settings based on the selected option. Closes the dialog on success.\n   * It handles two scenarios: adding to all users or specific users based on the user's selection.\n   */\n  async save() {\n    if (!this.data.channelId) {\n      console.error('Keine ID verfügbar!');\n      return;\n    }\n    try {\n      await this.performChannelAddition();\n      this.dialogRef.close();\n    } catch (error) {\n      console.error('Fehler beim hinzufügen der Channel ID!', error);\n    }\n  }\n\n\n  /**\n   * Performs the addition of the channel to all or specific users based on the selected option.\n   * @returns {Promise} A promise that resolves when the addition is completed.\n   */\n  performChannelAddition(): Promise {\n    const additionMethod = this.selectedOption === 'all' ? this.addChannelToAllUsers() : this.addChannelToSpecificUsers();\n    return new Promise((resolve, reject) => {\n      additionMethod.subscribe({\n        next: resolve,\n        error: reject\n      });\n    });\n  }\n\n\n  /**\n   * This function removes the selected user from the selectedUsers and selectedUsersIds array.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   */\n  removeUser(userId: string): void {\n    this.selectedUsers = this.selectedUsers.filter(id => id !== userId);\n    this.selectedUsersIds = this.selectedUsersIds.filter(id => id !== userId);\n  }\n\n\n  /**\n   * This function searches for the username using the transferred userId from the allUsers array in the dataService.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   * @returns - the user name if the user is possible. \n   */\n  getUserName(userId: string): string {\n    const user = this.dataService.allUsers.find(u => u.id === userId);\n    return user ? user.name : '';\n  }\n\n\n  /**\n   * This function searches for the user avatar using the transferred userId from the allUsers array in the dataService.\n   * \n   * @param userId - the userId is the Id from the specific selected user\n   * @returns - the user avatar imageUrl if the user is possible. \n   */\n  getUserImg(userId: string): string {\n    const user = this.dataService.allUsers.find(u => u.id === userId);\n    return user ? user.imageUrl : '';\n  }\n\n\n  /**\n   * Adds a user to the list of selected users if it is not already included and resets the associated form control element.\n   * \n   * @param userId - The unique ID of the user.\n   * @param userName - The name of the user that is displayed.\n   */\n  toggleUserSelection(userId: string, userName: string): void {\n    if (!this.selectedUsersIds.includes(userId)) {\n      this.selectedUsers.push(userName);\n      this.selectedUsersIds.push(userId);\n    }\n    this.userControl.reset();\n  }\n\n\n  /**\n   * Opens a menu based on the input value and the current status of the menu. \n   * The function checks that the input value is not empty and that the menu is not currently open before the menu is opened.\n   * \n   * @param trigger - The trigger that controls the menu.\n   * @param event - The keyboard event that triggers this function, typically an input.\n   */\n  openMenu(trigger: MatMenuTrigger, event: KeyboardEvent) {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement.value.length > 0 && !trigger.menuOpen) {\n      trigger.openMenu();\n    }\n  }\n}\n    \n\n    \n        \n    \n    \n        Leute hinzufügen\n    \n\n    \n    \n        \n            \n                \n                    Alle Mitglieder von DevTeam hinzufügen\n                \n                \n                    Bestimmte Leute hinzufügen\n                \n            \n        \n    \n\n    \n    @if (selectedOption === 'specific') {\n    \n        \n            \n            \n                @for (user of filteredUsers | async; track $index) {\n                \n                    \n                    {{ user.name }}\n                \n                }\n            \n        \n\n        \n        @if (selectedUsersIds.length > 0) {\n        \n            \n            \n                @for (userId of selectedUsersIds; track $index) {\n                \n                    \n                        \n                        \n                            {{ getUserName(userId) }}\n                        \n                    \n                    \n                \n                }\n            \n        \n        }\n    \n    }\n    \n         0)), 'btn-disabled': !(selectedOption === 'all' || (selectedOption === 'specific' && selectedUsers.length > 0))}\"\n            [disabled]=\"!(selectedOption === 'all' || (selectedOption === 'specific' && selectedUsers.length > 0))\"\n            (click)=\"save()\">Erstellen\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                Leute hinzufügen                                                                    Alle Mitglieder von DevTeam hinzufügen                                                    Bestimmte Leute hinzufügen                                                @if (selectedOption === \\'specific\\') {                                                    @for (user of filteredUsers | async; track $index) {                                                        {{ user.name }}                                }                                    @if (selectedUsersIds.length > 0) {                                                @for (userId of selectedUsersIds; track $index) {                                                                                                                {{ getUserName(userId) }}                                                                                                }                            }        }             0)), \\'btn-disabled\\': !(selectedOption === \\'all\\' || (selectedOption === \\'specific\\' && selectedUsers.length > 0))}\"            [disabled]=\"!(selectedOption === \\'all\\' || (selectedOption === \\'specific\\' && selectedUsers.length > 0))\"            (click)=\"save()\">Erstellen    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChannelMembersComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChannelParticipantsComponent.html":{"url":"components/ChannelParticipantsComponent.html","title":"component - ChannelParticipantsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChannelParticipantsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-channel-participants\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./channel-participants.component.html\n            \n\n\n\n            \n                styleUrl\n                ./channel-participants.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelParticipants\n                            \n                            \n                                    Private\n                                channelParticipantsSub\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChannelParticipants\n                            \n                            \n                                getParticipantInfosSub\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openAddUsersDialog\n                            \n                            \n                                showProfile\n                            \n                            \n                                spliceCurrentUser\n                            \n                            \n                                spliceCurrentUserFromParticipants\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentChannel\n                            \n                            \n                                currentUser\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dialog: MatDialog, dataService: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentChannel\n                    \n                \n                \n                    \n                        Type :         Channel\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currentUser\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        users\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:23\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChannelParticipants\n                        \n                    \n                \n            \n            \n                \ngetChannelParticipants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves and sets the list of participants for the current channel.\nIt iterates over the participants in the current channel and adds the corresponding user objects\nto the channelParticipants array.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getParticipantInfosSub\n                        \n                    \n                \n            \n            \n                \ngetParticipantInfosSub()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Subscribes to participant information updates for the current channel.\nIf there is an existing subscription, it will unsubscribe before creating a new one.\nThe retrieved participant information is then processed to remove the current user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Responds to changes in the input properties of the component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object that holds the current and previous values of the component's input properties.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openAddUsersDialog\n                        \n                    \n                \n            \n            \n                \nopenAddUsersDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:124\n                        \n                    \n\n\n            \n                \n                        Opens a dialog to add users to the current channel.\nThe dialog is provided with the current channel's ID and the current channel object as data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showProfile\n                        \n                    \n                \n            \n            \n                \nshowProfile(participant: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:113\n                        \n                    \n\n\n            \n                \n                        Opens a dialog to display the profile of the given participant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                participant\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe participant whose profile is to be displayed.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spliceCurrentUser\n                        \n                    \n                \n            \n            \n                \nspliceCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:54\n                        \n                    \n\n\n            \n                \n                        Removes the current user from the participants list of the current channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spliceCurrentUserFromParticipants\n                        \n                    \n                \n            \n            \n                \nspliceCurrentUserFromParticipants(array: any, currentUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Removes the current user from the provided array of participants.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                array\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe array of participants.\n\n\n                                            \n                                        \n                                        \n                                                currentUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the current user to be removed from the participants array.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A new array with the current user removed.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelParticipants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channelParticipantsSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, SimpleChanges } from '@angular/core';\nimport { Channel } from '../../../models/channel.class';\nimport { CommonModule } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ViewProfileComponent } from '../../../dialog/view-profile/view-profile.component';\nimport { AddUsersComponent } from '../../../dialog/add-users/add-users.component';\nimport { DataService } from '../../../services/data.service';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-channel-participants',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './channel-participants.component.html',\n  styleUrl: './channel-participants.component.scss'\n})\nexport class ChannelParticipantsComponent {\n\n  constructor(public dialog: MatDialog, public dataService: DataService) {}\n\n  @Input() currentChannel!: Channel;\n  @Input() users!: any;\n  @Input() currentUser!: any;\n  \n  channelParticipants!: any[];\n\n  private channelParticipantsSub!: Subscription;\n  \n\n  ngOnInit() {\n    this.spliceCurrentUser();\n    this.getChannelParticipants();\n    this.getParticipantInfosSub();\n  }\n\n\n  /**\n * Responds to changes in the input properties of the component.\n *\n * @param {SimpleChanges} changes - An object that holds the current and previous values of the component's input properties.\n */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['currentChannel']) {\n      this.spliceCurrentUser();\n      this.getChannelParticipants();\n    }\n  }\n\n\n  /**\n * Removes the current user from the participants list of the current channel.\n */\n  spliceCurrentUser() {\n    let index = this.currentChannel.participants.indexOf(this.currentUser.id);\n    if (index != -1) {\n      this.currentChannel.participants.splice(index,1);\n    }\n  }\n  \n\n  /**\n * Retrieves and sets the list of participants for the current channel.\n * It iterates over the participants in the current channel and adds the corresponding user objects\n * to the `channelParticipants` array.\n */\n  getChannelParticipants() {\n    this.channelParticipants = [];\n    this.currentChannel.participants.forEach((participant) => {\n      this.users.some((user: any) => {   \n        if(participant == user.id) {\n          this.channelParticipants.push(user);\n          return true;           \n        }\n        return false;\n      });\n    })\n  }\n\n\n  /**\n * Subscribes to participant information updates for the current channel.\n * If there is an existing subscription, it will unsubscribe before creating a new one.\n * The retrieved participant information is then processed to remove the current user.\n */\n  getParticipantInfosSub() {\n    if (this.channelParticipantsSub) {\n      this.channelParticipantsSub.unsubscribe();\n    }\n    this.channelParticipantsSub = this.dataService.getParticipantInfos(this.currentChannel.channelId).subscribe((channelParticipants: any) => {\n      this.channelParticipants = this.spliceCurrentUserFromParticipants(channelParticipants, this.currentUser.id);\n    })\n  }\n\n\n  /**\n * Removes the current user from the provided array of participants.\n *\n * @param {any[]} array - The array of participants.\n * @param {string} currentUserId - The ID of the current user to be removed from the participants array.\n * @returns {any[]} A new array with the current user removed.\n */\n  spliceCurrentUserFromParticipants(array: any, currentUserId: string) {\n    return array.filter((participant: any) => participant.id !== currentUserId);\n  }\n\n\n  /**\n * Opens a dialog to display the profile of the given participant.\n *\n * @param {any} participant - The participant whose profile is to be displayed.\n */\n  showProfile(participant: any) {\n     this.dialog.open(ViewProfileComponent, {\n       data: participant\n    });\n  }\n\n\n  /**\n * Opens a dialog to add users to the current channel.\n * The dialog is provided with the current channel's ID and the current channel object as data.\n */\n  openAddUsersDialog() {\n    this.dialog.open(AddUsersComponent, {\n      data: { \n        channelId: this.currentChannel.channelId,\n        currentChannel: this.currentChannel \n      }\n    });\n  }\n\n}\n\n    \n\n    \n        \n    \n      Mitglieder\n    \n\n    \n\n        \n        \n            \n                \n                \n              \n               {{ currentUser.name }}  (Du) \n        \n\n        \n        @for(participant of channelParticipants; track participant.imageUrl) {\n            \n                \n                  \n                  \n                \n                 {{ participant.name }} \n            \n        }\n\n    \n    \n        \n        Teilnehmer hinzufügen\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Mitglieder                                                                                                 {{ currentUser.name }}  (Du)                         @for(participant of channelParticipants; track participant.imageUrl) {                                                                                                 {{ participant.name }}                     }                        Teilnehmer hinzufügen    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChannelParticipantsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChannelThreadComponent.html":{"url":"components/ChannelThreadComponent.html","title":"component - ChannelThreadComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChannelThreadComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-channel-thread\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                MessageReactionComponent\n                                EmojiMartComponent\n                            MatMenuModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./channel-thread.component.html\n            \n\n\n\n            \n                styleUrl\n                ./channel-thread.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                channelChat\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                editMessage\n                            \n                            \n                                    \n                                editMessageBox\n                            \n                            \n                                imgFile\n                            \n                            \n                                isCurrentUser\n                            \n                            \n                                isImgFileEdited\n                            \n                            \n                                    \n                                messageReaction\n                            \n                            \n                                    Public\n                                threadService\n                            \n                            \n                                threadUser\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelEditMessage\n                            \n                            \n                                deleteImg\n                            \n                            \n                                editThreadMessage\n                            \n                            \n                                findThreadUser\n                            \n                            \n                                formattedDatestamp\n                            \n                            \n                                formattedTimeStamp\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                openThread\n                            \n                            \n                                    Async\n                                saveEditMessage\n                            \n                            \n                                showProfile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                thread\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(channelChat: ChannelChatComponent, dataService: DataService, threadService: ThreadService, dialog: MatDialog)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:40\n                            \n                        \n\n                \n                    \n                            creates an instance of ChannelThreadComponent\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        channelChat\n                                                  \n                                                        \n                                                                        ChannelChatComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe ChannelChatComponent(parant)\n\n\n                                                        \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe data service\n\n\n                                                        \n                                                \n                                                \n                                                        threadService\n                                                  \n                                                        \n                                                                        ThreadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe thread service\n\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nfor dialogs of material design\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        thread\n                    \n                \n                \n                    \n                        Type :         Thread\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:31\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelEditMessage\n                        \n                    \n                \n            \n            \n                \ncancelEditMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:124\n                        \n                    \n\n\n            \n                \n                        set message edit false\nset img edit false\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteImg\n                        \n                    \n                \n            \n            \n                \ndeleteImg(obj: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:164\n                        \n                    \n\n\n            \n                \n                        delete img of message\nset img edit boolean true\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editThreadMessage\n                        \n                    \n                \n            \n            \n                \neditThreadMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:116\n                        \n                    \n\n\n            \n                \n                        set message edit true\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findThreadUser\n                        \n                    \n                \n            \n            \n                \nfindThreadUser(messageOwnerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:74\n                        \n                    \n\n\n            \n                \n                        receive user of thread author\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageOwnerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formattedDatestamp\n                        \n                    \n                \n            \n            \n                \nformattedDatestamp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:86\n                        \n                    \n\n\n            \n                \n                        translate unix timstamp to date\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \ndate\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formattedTimeStamp\n                        \n                    \n                \n            \n            \n                \nformattedTimeStamp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:94\n                        \n                    \n\n\n            \n                \n                        translate unix timstamp to time\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \ntime\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:59\n                        \n                    \n\n\n            \n                \n                        checks if message author is the current user\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        openThread\n                        \n                    \n                \n            \n            \n                \n                        \n                    openThread(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:102\n                        \n                    \n\n\n            \n                \n                        send data of thread to full thread component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveEditMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveEditMessage(messageElement: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:144\n                        \n                    \n\n\n            \n                \n                        save edit message\nif img deleted, delete img from firebase storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageElement\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showProfile\n                        \n                    \n                \n            \n            \n                \nshowProfile(participant: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:133\n                        \n                    \n\n\n            \n                \n                        show profile of user in thread\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                participant\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        channelChat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelChatComponent\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:50\n                        \n                    \n\n            \n                \n                    - the ChannelChatComponent(parant)\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:51\n                        \n                    \n\n            \n                \n                    - the data service\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:53\n                        \n                    \n\n            \n                \n                    - for dialogs of material design\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editMessageBox\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('editMessageBox')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imgFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isImgFileEdited\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messageReaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessageReactionComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MessageReactionComponent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:52\n                        \n                    \n\n            \n                \n                    - the thread service\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { Thread } from '../../../models/thread.class';\nimport { CommonModule } from '@angular/common';\nimport { EmojiMartComponent } from '../../emoji-mart/emoji-mart.component';\nimport { ChannelChatComponent } from '../channel-chat.component';\nimport { MessageReactionComponent } from '../message-reaction/message-reaction.component';\nimport { DashboardComponent } from '../../dashboard.component';\nimport { DataService } from '../../../services/data.service';\nimport { ThreadService } from '../../../services/thread.service';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { User } from '../../../models/user.class';\nimport { deleteObject, getStorage, ref } from '@angular/fire/storage';\nimport { ViewProfileComponent } from '../../../dialog/view-profile/view-profile.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-channel-thread',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MessageReactionComponent,\n    EmojiMartComponent,\n    MatMenuModule,\n  ],\n  templateUrl: './channel-thread.component.html',\n  styleUrl: './channel-thread.component.scss',\n})\n\nexport class ChannelThreadComponent {\n\n  @Input() thread!: Thread;\n\n  @ViewChild(MessageReactionComponent) messageReaction!: MessageReactionComponent;\n  @ViewChild(\"editMessageBox\") editMessageBox!: ElementRef;\n  threadUser!: User\n  isCurrentUser: boolean = false;\n  // setReactionMenuHover: boolean = false;\n  editMessage: boolean = false;\n  imgFile: string = '';\n  isImgFileEdited: boolean = false;\n\n  /**\n   * creates an instance of ChannelThreadComponent\n   * @param channelChat - the ChannelChatComponent(parant)\n   * @param dataService - the data service\n   * @param threadService - the thread service\n   * @param dialog - for dialogs of material design\n   */\n  constructor(\n    public channelChat: ChannelChatComponent,\n    public dataService: DataService,\n    public threadService: ThreadService,\n    public dialog: MatDialog,\n  ) { }\n\n  /**\n   * checks if message author is the current user\n   */\n  ngOnInit() {\n    let currentUserId = this.channelChat.currentUser.id;\n    let messageOwnerId = this.thread.messages[0].senderId\n    if (currentUserId == messageOwnerId) {\n      this.isCurrentUser = true;\n    } else {\n      this.isCurrentUser = false;\n    }\n    this.findThreadUser(messageOwnerId);\n  }\n\n  /**\n   * receive user of thread author\n   * @param {string} messageOwnerId \n   */\n  findThreadUser(messageOwnerId: string) {\n    this.dataService.allUsers.forEach(user => {\n      if (user.id == messageOwnerId) {\n        this.threadUser = user;\n      }\n    })\n  }\n\n  /**\n   * translate unix timstamp to date\n   * @returns - date\n   */\n  formattedDatestamp(): any {\n    return this.thread.getFormattedDatestamp();\n  }\n\n  /**\n   * translate unix timstamp to time\n   * @returns - time\n   */\n  formattedTimeStamp(): any {\n    return this.thread.getFormattedTimeStamp();\n  }\n\n  /**\n   * send data of thread to full thread component\n   * @param {Thread} thread \n   */\n  async openThread(thread: Thread) {\n    try {\n      await this.threadService.openFullThread(true);\n      setTimeout(() => {\n        this.threadService.changeThread(thread, this.threadUser, this.channelChat.currentChannel, this.channelChat.currentUser);\n      }, 0);\n    } catch (error) {\n      console.error('Error opening thread:', error);\n    }\n  }\n\n  /**\n   * set message edit true\n   */\n  editThreadMessage() {\n    this.editMessage = true;\n  }\n\n  /**\n   * set message edit false\n   * set img edit false\n   */\n  cancelEditMessage() {\n    this.editMessage = false;\n    this.isImgFileEdited = false;\n  }\n\n  /**\n   * show profile of user in thread\n   * @param participant \n   */\n  showProfile(participant: any) {\n    this.dialog.open(ViewProfileComponent, {\n      data: participant\n   });\n }\n\n /**\n  * save edit message\n  * if img deleted, delete img from firebase storage\n  * @param {Thread} messageElement \n  */\n  async saveEditMessage(messageElement: Thread) {\n    messageElement.messages[0].content = this.editMessageBox.nativeElement.value\n    if(this.isImgFileEdited) {\n    const storage = getStorage();\n    const desertRef = ref(storage, this.imgFile);\n    deleteObject(desertRef).then(() => {\n      messageElement.messages[0].imgFileURL = '';\n    }).catch((error) => {\n      // Uh-oh, an error occurred!\n    });\n    }\n    this.threadService.copyThreadForFirebase(messageElement)\n    this.editMessage = false;\n  }\n\n  /**\n   * delete img of message\n   * set img edit boolean true\n   * @param {Thread} obj \n   */\n  deleteImg(obj: Thread) {\n    this.imgFile = obj.messages[0].imgFileURL;\n    this.isImgFileEdited = true;\n    obj.messages[0].imgFileURL = '';\n  }\n}\n\n    \n\n    \n        @defer (on idle; prefetch on idle) {\n\n\n\n  \n\n    \n      \n    \n\n    \n      \n    \n\n    \n    \n\n    \n      \n      \n    \n\n    \n      \n      \n        \n      \n      \n        Nachricht bearbeiten\n        Nachricht löschen\n      \n    \n\n  \n\n  \n    \n      {{ formattedTimeStamp() }}\n      {{ threadUser.name }}\n    \n    \n       1 && !thread.messages[0].imgFileURL.toLowerCase().includes('.pdf')\" src=\"{{ thread.messages[0].imgFileURL }}\" alt=\"\">\n       1 && thread.messages[0].imgFileURL.toLowerCase().includes('.pdf')\" href=\"{{ thread.messages[0].imgFileURL }}\"target=\"blank\" download=\"\">Open PDF\n      \n        {{ thread.messages[0].content }}\n      \n    \n\n    \n      \n         1\">\n          \n          \n        \n          {{ thread.messages[0].content }}\n      \n      \n        Abbrechen\n        Speichern\n      \n    \n\n    \n\n       1 && thread.messages.length \n        {{ thread.messages.length - 1 }} Antwort\n      \n\n      = 3\"  (click)=\"openThread(this.thread)\">\n        {{ thread.messages.length - 1 }} Antworten\n      \n\n      \n        \n         0\">\n        \n      \n    \n\n  \n\n  \n    \n  \n\n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@defer (on idle; prefetch on idle) {                                                                                                      Nachricht bearbeiten        Nachricht löschen                        {{ formattedTimeStamp() }}      {{ threadUser.name }}               1 && !thread.messages[0].imgFileURL.toLowerCase().includes(\\'.pdf\\')\" src=\"{{ thread.messages[0].imgFileURL }}\" alt=\"\">       1 && thread.messages[0].imgFileURL.toLowerCase().includes(\\'.pdf\\')\" href=\"{{ thread.messages[0].imgFileURL }}\"target=\"blank\" download=\"\">Open PDF              {{ thread.messages[0].content }}                             1\">                                      {{ thread.messages[0].content }}                    Abbrechen        Speichern                     1 && thread.messages.length         {{ thread.messages.length - 1 }} Antwort            = 3\"  (click)=\"openThread(this.thread)\">        {{ thread.messages.length - 1 }} Antworten                             0\">                            }'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChannelThreadComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                HeaderComponent\n                                SidenavComponent\n                            RouterOutlet\n                                ChannelChatComponent\n                                UserChatComponent\n                                FullThreadComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n            \n                styleUrl\n                ./dashboard.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                openThread\n                            \n                            \n                                    Public\n                                threadService\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(threadService: ThreadService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.component.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor that subscribes to the openCurrentThread$ observable from the thread service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        threadService\n                                                  \n                                                        \n                                                                        ThreadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service for managing thread operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        openThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/dashboard.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        threadService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ThreadService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/dashboard.component.ts:27\n                        \n                    \n\n            \n                \n                    - The service for managing thread operations.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ChannelChatComponent } from './channel-chat/channel-chat.component';\nimport { UserChatComponent } from './user-chat/user-chat.component';\nimport { HeaderComponent } from './header/header.component';\nimport { SidenavComponent } from './sidenav/sidenav.component';\nimport { RouterOutlet } from '@angular/router';\nimport { FullThreadComponent } from './full-thread/full-thread.component';\nimport { CommonModule } from '@angular/common';\nimport { ThreadService } from '../services/thread.service';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [HeaderComponent, SidenavComponent, RouterOutlet, ChannelChatComponent, UserChatComponent, FullThreadComponent, CommonModule],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss'\n})\nexport class DashboardComponent {\n\n  openThread: boolean = false;\n\n   /**\n   * Constructor that subscribes to the openCurrentThread$ observable from the thread service.\n   * \n   * @param {ThreadService} threadService - The service for managing thread operations.\n   */\n  constructor(public threadService: ThreadService) {\n    this.threadService.openCurrentThread$.subscribe(openThreadBoolean => {\n        this.openThread = openThreadBoolean;      \n    });\n   }\n}\n\n    \n\n    \n        \n  \n  \n    \n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EditChannelComponent.html":{"url":"components/EditChannelComponent.html","title":"component - EditChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EditChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-edit-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatFormField\n                            MatLabel\n                            FormsModule\n                            MatInputModule\n                            CommonModule\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./edit-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./edit-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelCreator\n                            \n                            \n                                channelCreatorIsCurrentUser\n                            \n                            \n                                currentChannelIsDevTeamChannel\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                editChannelDescription_Activated\n                            \n                            \n                                editChannelName_Activated\n                            \n                            \n                                showDescriptionError\n                            \n                            \n                                showNameError\n                            \n                            \n                                temporaryChannelDescription\n                            \n                            \n                                temporaryChannelName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkIfDevTeamChannel\n                            \n                            \n                                closeMenu\n                            \n                            \n                                compareChannelCreatorWithCurrentUser\n                            \n                            \n                                editChannelDescription\n                            \n                            \n                                editChannelName\n                            \n                            \n                                getChannelCreator\n                            \n                            \n                                leaveChannel\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveDescriptionChanges\n                            \n                            \n                                saveNameChanges\n                            \n                            \n                                validateChannelDescription\n                            \n                            \n                                validateChannelName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                currentChannel\n                            \n                            \n                                currentUser\n                            \n                            \n                                matMenuTrigger\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        channelId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currentChannel\n                    \n                \n                \n                    \n                        Type :         Channel\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currentUser\n                    \n                \n                \n                    \n                        Type :         User\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        matMenuTrigger\n                    \n                \n                \n                    \n                        Type :     MatMenuTrigger\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkIfDevTeamChannel\n                        \n                    \n                \n            \n            \n                \ncheckIfDevTeamChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:88\n                        \n                    \n\n\n            \n                \n                        Checks if the current channel is the Devteam channel by comparing its channelId with a specific ID.\nSets the boolean flag currentChannelIsDevTeamChannel accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        closeMenu\n                        \n                    \n                \n            \n            \n                \ncloseMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Closes any open menu and resets edit flags for channel name and description.\nUses matMenuTrigger to close the menu.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        compareChannelCreatorWithCurrentUser\n                        \n                    \n                \n            \n            \n                \ncompareChannelCreatorWithCurrentUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Compares the creator of the current channel with the current user to determine if they are the same.\nSets the boolean flag channelCreatorIsCurrentUser accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelDescription\n                        \n                    \n                \n            \n            \n                \neditChannelDescription()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Toggles the activation state of editing the channel description.\nSets editChannelDescription_Activated to its opposite value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelName\n                        \n                    \n                \n            \n            \n                \neditChannelName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Toggles the activation state of editing the channel name.\nSets editChannelName_Activated to its opposite value.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getChannelCreator\n                        \n                    \n                \n            \n            \n                \ngetChannelCreator()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Retrieves the name of the creator of the current channel.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The name of the channel creator, or 'Unbekannter Ersteller' if the creator is not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \nleaveChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:198\n                        \n                    \n\n\n            \n                \n                        Allows the current user to leave the current channel.\nRemoves the current user from the channel's participants list.\nUpdates both the user's and channel's data in the data service.\nCloses any open menu using matMenuTrigger.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:52\n                        \n                    \n\n\n            \n                \n                        Responds to changes in the input properties of the component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object that holds the current and previous values of the component's input properties.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveDescriptionChanges\n                        \n                    \n                \n            \n            \n                \nsaveDescriptionChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:181\n                        \n                    \n\n\n            \n                \n                        Saves changes made to the channel description if the new description is valid (at least 6 characters long).\nUpdates currentChannel.description with temporaryChannelDescription.\nCalls dataService.updateChannel to update the channel with the new description.\nDeactivates editing mode for the channel description (editChannelDescription_Activated set to false) upon successful save.\nSets showDescriptionError to true if the length of temporaryChannelDescription is less than 6 characters.\nPreconditions:\n\nAssumes temporaryChannelDescription has been previously set via validateChannelDescription or similar method.\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveNameChanges\n                        \n                    \n                \n            \n            \n                \nsaveNameChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Saves changes made to the channel name if the new name is valid (at least 3 characters long).\nUpdates currentChannel.title with temporaryChannelName.\nCalls dataService.updateChannel to update the channel with the new name.\nDeactivates editing mode for the channel name (editChannelName_Activated set to false) upon successful save.\nSets showNameError to true if the length of temporaryChannelName is less than 3 characters.\nPreconditions:\n\nAssumes temporaryChannelName has been previously set via validateChannelName or similar method.\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateChannelDescription\n                        \n                    \n                \n            \n            \n                \nvalidateChannelDescription(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:164\n                        \n                    \n\n\n            \n                \n                        Validates the channel description based on the input event.\nSets temporaryChannelDescription to the current input value from the event target.\nSets showDescriptionError to true if the length of temporaryChannelDescription is less than 6 characters, otherwise false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input event containing the target element.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateChannelName\n                        \n                    \n                \n            \n            \n                \nvalidateChannelName(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:129\n                        \n                    \n\n\n            \n                \n                        Validates the channel name based on the input event.\nSets temporaryChannelName to the current input value from the event target.\nSets showNameError to true if the length of temporaryChannelName is less than 3 characters, otherwise false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input event containing the target element.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelCreator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelCreatorIsCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentChannelIsDevTeamChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelDescription_Activated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editChannelName_Activated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showDescriptionError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showNameError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temporaryChannelDescription\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temporaryChannelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, SimpleChanges } from '@angular/core';\nimport { Channel } from '../../../models/channel.class';\nimport { MatFormField, MatLabel } from '@angular/material/form-field';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { User } from '../../../models/user.class';\nimport { DataService } from '../../../services/data.service';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\n\n\n@Component({\n  selector: 'app-edit-channel',\n  standalone: true,\n  imports: [MatFormField, MatLabel, FormsModule, MatInputModule, CommonModule, RouterLink],\n  templateUrl: './edit-channel.component.html',\n  styleUrl: './edit-channel.component.scss'\n})\nexport class EditChannelComponent {\n\n  constructor(public dataService: DataService) {}\n\n  @Input() currentChannel!: Channel;\n  @Input() currentUser!: User; \n  @Input() channelId!: string;\n  @Input() matMenuTrigger!: MatMenuTrigger;\n\n  editChannelName_Activated: boolean = false;\n  editChannelDescription_Activated: boolean = false;\n  showNameError: boolean = false;\n  showDescriptionError: boolean = false;\n  temporaryChannelName: string = '';\n  temporaryChannelDescription: string = '';\n  channelCreator!: string;\n  channelCreatorIsCurrentUser: boolean = false;\n  currentChannelIsDevTeamChannel: boolean = false;\n\n\n  ngOnInit() {\n    this.channelCreator = this.getChannelCreator();\n    this.compareChannelCreatorWithCurrentUser();\n    this.checkIfDevTeamChannel();\n  }\n\n\n  /**\n * Responds to changes in the input properties of the component.\n *\n * @param {SimpleChanges} changes - An object that holds the current and previous values of the component's input properties.\n */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['currentChannel']) {\n      this.channelCreator = this.getChannelCreator();\n      this.compareChannelCreatorWithCurrentUser();\n      this.checkIfDevTeamChannel();\n    }\n  }\n\n\n  /**\n * Retrieves the name of the creator of the current channel.\n *\n * @returns {string} The name of the channel creator, or 'Unbekannter Ersteller' if the creator is not found.\n */\n   getChannelCreator(): string {\n    const creatorId = this.currentChannel.createdBy;\n    const creator = this.dataService.allUsers.find(user => user.id === creatorId);\n    return creator ? creator.name : 'Unbekannter Ersteller';\n  }\n\n\n  /**\n * Compares the creator of the current channel with the current user to determine if they are the same.\n * Sets the boolean flag `channelCreatorIsCurrentUser` accordingly.\n */\n  compareChannelCreatorWithCurrentUser() {\n    const creatorId = this.currentChannel.createdBy;\n    const currentUserId = this.currentUser.id;\n    this.channelCreatorIsCurrentUser = creatorId === currentUserId;\n  }\n\n\n  /**\n * Checks if the current channel is the Devteam channel by comparing its channelId with a specific ID.\n * Sets the boolean flag `currentChannelIsDevTeamChannel` accordingly.\n */\n  checkIfDevTeamChannel() {\n    this.currentChannelIsDevTeamChannel = this.currentChannel.channelId === 'Yk2dgejx9yy7iHLij1Qj';\n  }\n\n\n  /**\n * Closes any open menu and resets edit flags for channel name and description.\n * Uses `matMenuTrigger` to close the menu.\n */\n  closeMenu() {\n    this.editChannelName_Activated = false;\n    this.editChannelDescription_Activated = false;\n    this.matMenuTrigger.closeMenu();\n  }\n\n\n  /**\n * Toggles the activation state of editing the channel name.\n * Sets `editChannelName_Activated` to its opposite value.\n */\n  editChannelName() {\n    this.editChannelName_Activated = !this.editChannelName_Activated;\n  }\n\n\n  /**\n * Toggles the activation state of editing the channel description.\n * Sets `editChannelDescription_Activated` to its opposite value.\n */\n  editChannelDescription() {\n    this.editChannelDescription_Activated = !this.editChannelDescription_Activated;\n  }\n\n\n  /**\n * Validates the channel name based on the input event.\n * Sets `temporaryChannelName` to the current input value from the event target.\n * Sets `showNameError` to true if the length of `temporaryChannelName` is less than 3 characters, otherwise false.\n *\n * @param {Event} event - The input event containing the target element.\n */\n  validateChannelName(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.temporaryChannelName = input.value;\n    this.showNameError = this.temporaryChannelName.length = 3) {\n      this.currentChannel.title = this.temporaryChannelName;\n      this.dataService.updateChannel(this.currentChannel);\n      this.editChannelName_Activated = !this.editChannelName_Activated;\n    } else {\n      this.showNameError = true;\n    }\n  }\n\n\n  /**\n * Validates the channel description based on the input event.\n * Sets `temporaryChannelDescription` to the current input value from the event target.\n * Sets `showDescriptionError` to true if the length of `temporaryChannelDescription` is less than 6 characters, otherwise false.\n *\n * @param {Event} event - The input event containing the target element.\n */\n  validateChannelDescription(event: Event) {\n    const input = event.target as HTMLInputElement;\n    this.temporaryChannelDescription = input.value;\n    this.showDescriptionError = this.temporaryChannelDescription.length = 6) {\n      this.currentChannel.description = this.temporaryChannelDescription;\n      this.dataService.updateChannel(this.currentChannel);\n      this.editChannelDescription_Activated = !this.editChannelDescription_Activated;\n    } else {\n      this.showDescriptionError = true;\n    }\n  }\n\n\n  /**\n * Allows the current user to leave the current channel.\n * Removes the current user from the channel's participants list.\n * Updates both the user's and channel's data in the data service.\n * Closes any open menu using `matMenuTrigger`.\n */\n  leaveChannel() {\n    this.currentUser.leaveChannel(this.channelId, this.currentChannel);\n    this.dataService.updateUser(this.currentUser);\n    this.dataService.updateChannel(this.currentChannel);\n    this.matMenuTrigger.closeMenu();\n  }\n}\n\n\n    \n\n    \n        \n  \n    # {{ currentChannel.title }} \n    \n      \n    \n  \n\n  \n  \n    \n      Channel-Name\n      Bearbeiten\n    \n     # {{ currentChannel.title }} \n   \n\n  \n  \n    \n      Channel-Name\n      Speichern\n    \n    \n    Bitte gib einen vollständigen Channel-Name an\n   \n\n  \n  \n    \n      Beschreibung\n      Bearbeiten\n    \n     {{ currentChannel.description }} \n    \n    \n      Erstellt von\n      {{ channelCreator }}\n    \n   \n\n  \n  \n    \n      Beschreibung\n      Speichern\n    \n    \n    Bitte teile Infos zu diesem Channel\n    \n    \n      Erstellt von\n      {{ channelCreator }}\n    \n  \n\n  \n  \n    Channel verlassen\n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      # {{ currentChannel.title }}                               Channel-Name      Bearbeiten         # {{ currentChannel.title }}                  Channel-Name      Speichern            Bitte gib einen vollständigen Channel-Name an                 Beschreibung      Bearbeiten         {{ currentChannel.description }}               Erstellt von      {{ channelCreator }}                     Beschreibung      Speichern            Bitte teile Infos zu diesem Channel              Erstellt von      {{ channelCreator }}              Channel verlassen  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EditChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiCommunicationService.html":{"url":"injectables/EmojiCommunicationService.html","title":"injectable - EmojiCommunicationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiCommunicationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/emoji-communication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emojiEvent$\n                            \n                            \n                                    Private\n                                emojiEventSource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                emitEmojiEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        emitEmojiEvent\n                        \n                    \n                \n            \n            \n                \nemitEmojiEvent(emoji: any, sender: string, messageTimestamp?: Number, message?: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/emoji-communication.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Emits an emoji event with the provided details. This event can be subscribed to\nby other components or services to receive updates when an emoji event occurs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                emoji\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji data to be emitted.\n\n\n                                            \n                                        \n                                        \n                                                sender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sender of the emoji event.\n\n\n                                            \n                                        \n                                        \n                                                messageTimestamp\n                                            \n                                                            Number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional timestamp of the message associated with the emoji event.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                            Message\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional message object associated with the emoji event.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emojiEvent$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.emojiEventSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/emoji-communication.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emojiEventSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/emoji-communication.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Message } from '../models/message.class';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmojiCommunicationService {\n\n  private emojiEventSource = new Subject();\n  emojiEvent$ = this.emojiEventSource.asObservable();\n\n    /**\n   * Emits an emoji event with the provided details. This event can be subscribed to\n   * by other components or services to receive updates when an emoji event occurs.\n   *\n   * @param {any} emoji - The emoji data to be emitted.\n   * @param {string} sender - The sender of the emoji event.\n   * @param {Number} [messageTimestamp] - Optional timestamp of the message associated with the emoji event.\n   * @param {Message} [message] - Optional message object associated with the emoji event.\n   */\n  emitEmojiEvent(emoji: any, sender: string, messageTimestamp?: Number, message?: Message) {\n    this.emojiEventSource.next({ emoji, sender, messageTimestamp, message });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EmojiMartComponent.html":{"url":"components/EmojiMartComponent.html","title":"component - EmojiMartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EmojiMartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/emoji-mart/emoji-mart.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-emoji-mart\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatMenuTrigger\n                            MatMenuModule\n                            PickerComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./emoji-mart.component.html\n            \n\n\n\n            \n                styleUrl\n                ./emoji-mart.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEmoji\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                assigningComponent\n                            \n                            \n                                emojiImg\n                            \n                            \n                                emojiImgHover\n                            \n                            \n                                message\n                            \n                            \n                                threadId\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiService: EmojiCommunicationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiService\n                                                  \n                                                        \n                                                                        EmojiCommunicationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        assigningComponent\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        emojiImg\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        emojiImgHover\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        message\n                    \n                \n                \n                    \n                        Type :         Message\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        threadId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEmoji\n                        \n                    \n                \n            \n            \n                \naddEmoji(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/emoji-mart/emoji-mart.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Handles the addition of an emoji to a message.\nEmits an emoji event using emojiService.emitEmojiEvent.\nIf a message is present, includes the emoji's native representation, sender information,\ntimestamp of the message, and the message itself.\nIf no message is present, includes only the emoji's native representation and sender information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object containing the emoji data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { MatMenuTrigger, MatMenuModule } from '@angular/material/menu';\nimport { PickerComponent } from '@ctrl/ngx-emoji-mart';\nimport { EmojiCommunicationService } from '../../services/emoji-communication.service';\nimport { Message } from '../../models/message.class';\n\n@Component({\n  selector: 'app-emoji-mart',\n  standalone: true,\n  imports: [\n    MatMenuTrigger,\n    MatMenuModule,\n    PickerComponent,\n  ],\n  templateUrl: './emoji-mart.component.html',\n  styleUrl: './emoji-mart.component.scss'\n})\nexport class EmojiMartComponent {\n  @Input() emojiImg: string = ''\n  @Input() emojiImgHover: string = '';\n  @Input() assigningComponent: string = '';\n  @Input() threadId?: string;\n  @Input() message!: Message;\n\n\n  constructor(\n    private emojiService: EmojiCommunicationService,\n  ) { }\n\n  \n  /**\n * Handles the addition of an emoji to a message.\n * Emits an emoji event using `emojiService.emitEmojiEvent`.\n * If a message is present, includes the emoji's native representation, sender information,\n * timestamp of the message, and the message itself.\n * If no message is present, includes only the emoji's native representation and sender information.\n *\n * @param {any} event - The event object containing the emoji data.\n */\n  addEmoji(event: any) {\n    const sender = this.assigningComponent;\n    if (this.message) {\n      this.emojiService.emitEmojiEvent(event.emoji.native, sender, this.message.timestamp, this.message);\n    } else {\n      this.emojiService.emitEmojiEvent(event.emoji.native, sender);\n    }\n  }\n}\n\n\n    \n\n    \n        \n    \n    \n        \n    \n    \n        \n            \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                        '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EmojiMartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatInputModule\n                            MatIconModule\n                            MatFormFieldModule\n                            MatButtonModule\n                            MatMenuModule\n                            CommonModule\n                                ProfileEditComponent\n                                ProfileViewComponent\n                            MatMenuTrigger\n                                SearchComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                isProfileEditView\n                            \n                            \n                                    Optional\n                                isProfileView\n                            \n                            \n                                    Private\n                                profileEditSub\n                            \n                            \n                                    Private\n                                profileViewSub\n                            \n                            \n                                    Public\n                                sidenavService\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Private\n                                userSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeProfile\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                openProfile\n                            \n                            \n                                resetMenuState\n                            \n                            \n                                subProfileEdit\n                            \n                            \n                                subProfileView\n                            \n                            \n                                subUserData\n                            \n                            \n                                switchToEdit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, router: Router, profileService: HeaderProfileService, sidenavService: SidenavService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/header/header.component.ts:60\n                            \n                        \n\n                \n                    \n                            Init AuthService, Router and ProfileService and starting subscribtion for Profile Views and User Data\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        HeaderProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sidenavService\n                                                  \n                                                        \n                                                                        SidenavService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfile\n                        \n                    \n                \n            \n            \n                \ncloseProfile(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:126\n                        \n                    \n\n\n            \n                \n                        Closes Profile Menu and switches to default menu\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    logoutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:142\n                        \n                    \n\n\n            \n                \n                        Logout User\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:158\n                        \n                    \n\n\n            \n                \n                        Destroy all Active Subscriptions\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfile\n                        \n                    \n                \n            \n            \n                \nopenProfile(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Open Profile View\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetMenuState\n                        \n                    \n                \n            \n            \n                \nresetMenuState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:83\n                        \n                    \n\n\n            \n                \n                        This function resets the profile menu panel state when it gets reopened\nGets fired by the (menuOpened) trigger\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subProfileEdit\n                        \n                    \n                \n            \n            \n                \nsubProfileEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:99\n                        \n                    \n\n\n            \n                \n                        Subscribe to profile edit observable\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subProfileView\n                        \n                    \n                \n            \n            \n                \nsubProfileView()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:90\n                        \n                    \n\n\n            \n                \n                        Subscribe to profile view observable\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subUserData\n                        \n                    \n                \n            \n            \n                \nsubUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Subscribe to user data\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        switchToEdit\n                        \n                    \n                \n            \n            \n                \nswitchToEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/header/header.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Switch Profile Menu to Edit Profile View\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isProfileEditView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isProfileView\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        profileEditSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        profileViewSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sidenavService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SidenavService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/header/header.component.ts:58\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { AuthService } from '../../services/auth.service';\nimport { User } from '../../models/user.class';\nimport { Subscription } from 'rxjs';\nimport { MatMenuModule, MatMenuTrigger } from '@angular/material/menu';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { ProfileEditComponent } from '../../menus/profile-edit/profile-edit.component';\nimport { ProfileViewComponent } from '../../menus/profile-view/profile-view.component';\nimport { HeaderProfileService } from '../../services/header-profile.service';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { SearchComponent } from '../search/search.component';\nimport { SidenavService } from '../../services/sidenav.service';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatMenuModule,\n    CommonModule,\n    ProfileEditComponent,\n    ProfileViewComponent,\n    MatMenuTrigger,\n    SearchComponent\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n  animations: [\n    trigger('fadeInOut', [\n      state('void', style({\n        opacity: 0\n      })),\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate('400ms ease-in', style({ opacity: 1 }))\n      ]),\n      transition(':leave', [\n        animate('0ms', style({ opacity: 0 }))\n      ]),\n    ])\n  ]\n})\n\nexport class HeaderComponent {\n\n  user?: User;\n  isProfileView?: boolean = false;\n  isProfileEditView?: boolean = false;\n\n  private userSub = new Subscription();\n  private profileViewSub = new Subscription();\n  private profileEditSub = new Subscription();\n\n  /**\n   * Init AuthService, Router and ProfileService and starting subscribtion for Profile Views and User Data\n   * @param auth\n   * @param router\n   * @param profileService\n   */\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n    private profileService: HeaderProfileService,\n    public sidenavService: SidenavService\n  ) {\n    this.subProfileView();\n    this.subProfileEdit();\n    this.subUserData();\n  }\n\n  /**\n   * This function resets the profile menu panel state when it gets reopened\n   * Gets fired by the (menuOpened) trigger\n   */\n  resetMenuState(): void {\n    this.profileService.switchToMenu();\n  }\n\n  /**\n   * Subscribe to profile view observable\n   */\n  subProfileView() {\n    this.profileViewSub = this.profileService.profileViewState$.subscribe(state => {\n      this.isProfileView = state;\n    });\n  }\n\n  /**\n   * Subscribe to profile edit observable\n   */\n  subProfileEdit() {\n    this.profileEditSub = this.profileService.profileEditState$.subscribe(state => {\n      this.isProfileEditView = state;\n    });\n  }\n\n  /**\n   * Subscribe to user data\n   */\n  subUserData() {\n    this.userSub = this.auth.getUser().subscribe(user => {\n      if (user) {\n        this.user = user;\n      }\n    })\n  }\n\n  /**\n   * Switch Profile Menu to Edit Profile View\n   */\n  switchToEdit() {\n    this.profileService.switchToEdit();\n  }\n\n  /**\n   * Closes Profile Menu and switches to default menu\n   */\n  closeProfile(event: Event) {\n    event.stopPropagation();\n    this.profileService.switchToMenu();\n  }\n\n  /**\n   * Open Profile View\n   */\n  openProfile(event: Event) {\n    event.stopPropagation();\n    this.profileService.switchToView();\n  }\n\n  /**\n   * Logout User\n   */\n  async logoutUser() {\n    try {\n      await this.auth.updateFirebaseUser({ onlineStatus: 'offline' });\n      const tryLogout = await this.auth.logout();\n      if (tryLogout === true) {\n        this.router.navigate(['/login']);\n      }\n      console.log('User logged out.');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Destroy all Active Subscriptions\n   */\n  ngOnDestroy(): void {\n    if (this.userSub) {\n      this.userSub.unsubscribe();\n    }\n    if (this.profileViewSub) {\n      this.profileViewSub.unsubscribe();\n    }\n    if (this.profileEditSub) {\n      this.profileEditSub.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        \n  \n  \n\n  \n\n  \n\n  @if (user) {\n    \n      {{ user.name }}\n      \n        \n        \n        \n      \n\n      \n\n        \n          Profil\n          Logout\n        \n\n        \n          \n            \n          \n\n          \n            \n          \n        \n\n      \n      \n    \n\n  } @else {\n    \n  }\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          @if (user) {          {{ user.name }}                                                            Profil          Logout                                                                                                          } @else {      }'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HeaderProfileService.html":{"url":"injectables/HeaderProfileService.html","title":"injectable - HeaderProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HeaderProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/header-profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                profileEditState\n                            \n                            \n                                profileEditState$\n                            \n                            \n                                    Private\n                                profileViewState\n                            \n                            \n                                profileViewState$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                switchToEdit\n                            \n                            \n                                switchToMenu\n                            \n                            \n                                switchToView\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        switchToEdit\n                        \n                    \n                \n            \n            \n                \nswitchToEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/header-profile.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Switches the profile state to edit.\nSets profileEditState to true and profileViewState to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        switchToMenu\n                        \n                    \n                \n            \n            \n                \nswitchToMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/header-profile.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Switches the profile state to menu.\nSets both profileViewState and profileEditState to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        switchToView\n                        \n                    \n                \n            \n            \n                \nswitchToView()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/header-profile.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Switches the profile state to view.\nSets profileViewState to true and profileEditState to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        profileEditState\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/header-profile.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileEditState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.profileEditState.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/header-profile.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        profileViewState\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/header-profile.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileViewState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.profileViewState.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/header-profile.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeaderProfileService {\n\n  private profileViewState = new BehaviorSubject(false);\n  profileViewState$ = this.profileViewState.asObservable();\n\n  private profileEditState = new BehaviorSubject(false);\n  profileEditState$ = this.profileEditState.asObservable();\n\n  /**\n   * Switches the profile state to menu.\n   * Sets both `profileViewState` and `profileEditState` to false.\n   */\n  switchToMenu() {\n    this.profileViewState.next(false);\n    this.profileEditState.next(false);\n  }\n\n  /**\n   * Switches the profile state to view.\n   * Sets `profileViewState` to true and `profileEditState` to false.\n   */\n  switchToView() {\n    this.profileViewState.next(true);\n    this.profileEditState.next(false);\n  }\n\n  /**\n   * Switches the profile state to edit.\n   * Sets `profileEditState` to true and `profileViewState` to false.\n   */\n  switchToEdit() {\n    this.profileEditState.next(true);\n    this.profileViewState.next(false);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImprintComponent.html":{"url":"components/ImprintComponent.html","title":"component - ImprintComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImprintComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/imprint/imprint.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component displays the imprint information of the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-imprint\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                            MatCard\n                            MatCardContent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./imprint.component.html\n            \n\n\n\n            \n                styleUrl\n                ./imprint.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/app/imprint/imprint.component.ts:17\n                            \n                        \n\n                \n                    \n                            Creates an instance of ImprintComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe location service for navigating back.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/imprint/imprint.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Navigates back to the previous location in the browser history.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { CommonModule, Location } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { MatCard, MatCardContent } from '@angular/material/card';\nimport { RouterModule } from '@angular/router';\n\n/**\n * @component ImprintComponent\n * This component displays the imprint information of the application.\n */\n@Component({\n  selector: 'app-imprint',\n  standalone: true,\n  imports: [CommonModule, RouterModule, MatCard, MatCardContent],\n  templateUrl: './imprint.component.html',\n  styleUrl: './imprint.component.scss'\n})\nexport class ImprintComponent {\n\n  /**\n   * Creates an instance of ImprintComponent.\n   * @param {Location} location - The location service for navigating back.\n   */\n  constructor(private location: Location) { }\n\n  /**\n   * Navigates back to the previous location in the browser history.\n   * @memberof ImprintComponent\n   */\n  goBack() {\n    this.location.back();\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n      \n        Impressum\n        Angaben gemäß § 5 TMG:\n        Hannes Pirhofer | Jan Horstmann | Julian Heupgen | Daniel Schneider\n        Postanschrift:\n        Schöne Aussicht 665329 Hohenstein\n        Kontakt:\n        Telefon: 061209269386E-Mail: student&#64;dsc-mail.de\n        \n        \n        \n        Hinweise zur Website\n        \n        Information gemäß § 36 VSBG\n        Gemäß § 36 VSBG (Verbraucherstreitbeilegungsgesetz – Gesetz über die alternative Streitbeilegung in\n          Verbrauchersachen) erklärt der Betreiber dieser Website:\n        Wir sind weder bereit noch verpflichtet, an Streitbeilegungsverfahren vor einer Verbraucherschlichtungsstelle\n          teilzunehmen.\n        \n        Das Impressum wurde mit dem Impressums-Generator der activeMind\n              AG erstellt.\n      \n    \n  \n  \n    Home\n    Impressum\n    Datenschutz\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Impressum        Angaben gemäß § 5 TMG:        Hannes Pirhofer | Jan Horstmann | Julian Heupgen | Daniel Schneider        Postanschrift:        Schöne Aussicht 665329 Hohenstein        Kontakt:        Telefon: 061209269386E-Mail: student@dsc-mail.de                                Hinweise zur Website                Information gemäß § 36 VSBG        Gemäß § 36 VSBG (Verbraucherstreitbeilegungsgesetz – Gesetz über die alternative Streitbeilegung in          Verbrauchersachen) erklärt der Betreiber dieser Website:        Wir sind weder bereit noch verpflichtet, an Streitbeilegungsverfahren vor einer Verbraucherschlichtungsstelle          teilzunehmen.                Das Impressum wurde mit dem Impressums-Generator der activeMind              AG erstellt.                  Home    Impressum    Datenschutz  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImprintComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatButtonModule\n                            MatCardModule\n                            MatInputModule\n                            MatIconModule\n                            ReactiveFormsModule\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                loginData\n                            \n                            \n                                logInFalse\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                anonymousUserLogin\n                            \n                            \n                                    Async\n                                guestLogin\n                            \n                            \n                                    Async\n                                logIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, authService: AuthService, auth: Auth, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/login.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                    Auth\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        anonymousUserLogin\n                        \n                    \n                \n            \n            \n                \nanonymousUserLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/login.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Fallback method in case auth does not get Guest User - when for example deleted\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        guestLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    guestLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/login.component.ts:71\n                        \n                    \n\n\n            \n                \n                        login for guest\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    logIn(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/login.component.ts:54\n                        \n                    \n\n\n            \n                \n                        login with email and password via firebase authentication\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.formBuilder.group({\n    email: '',\n    password: '',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logInFalse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterLink } from '@angular/router';\nimport { Firestore } from '@angular/fire/firestore';\nimport { AuthService } from '../services/auth.service';\nimport { Auth, getAuth, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport { signInAnonymously } from '@firebase/auth';\n\n\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    RouterLink\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})\nexport class LoginComponent {\n\n  loginData = this.formBuilder.group({\n    email: '',\n    password: '',\n  })\n\n\n\n  logInFalse = false;\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n    public authService: AuthService,\n    private auth: Auth,\n    private router: Router,\n  ) { }\n\n  /**\n   * login with email and password via firebase authentication\n   * @param {Event} event \n   */\n  async logIn(event: Event) {\n    let email = this.loginData.value.email || '';\n    let password = this.loginData.value.password || '';\n    event.preventDefault();\n    let logInSuccess = await this.authService.signIn(email, password);\n    if (logInSuccess) {\n      this.logInFalse = false;\n      this.router.navigate(['/dashboard/']);\n    } else {\n      this.logInFalse = true;\n      console.log('Anmeldung fehlgeschlagen');\n    }\n  }\n\n  /**\n   * login for guest\n   */\n  async guestLogin() {\n    this.authService.signIn('max@mustermann.com', '123456')\n      .then(() => {\n        console.log('Guest signed in with sucess.');\n        this.router.navigate(['/dashboard/']);\n      })\n      .catch(error => {\n        console.warn('Could not sign up with the Guest User. Signing up with anonymous login. ');\n        this.anonymousUserLogin();\n      })\n  }\n\n  /**\n   * Fallback method in case auth does not get Guest User - when for example deleted\n   */\n  anonymousUserLogin() {\n    const auth = getAuth();\n    signInAnonymously(auth)\n      .then(() => {\n        this.router.navigate(['/dashboard/']);\n      })\n      .catch((error) => {\n        console.error('Could not sign up with guest account. ', error);\n      });\n  }\n}\n\n    \n\n    \n        \n\n    Neu bei DABubble?\n    Konto erstellen\n\n\n\n    \n        Anmeldung\n        Wir empfehlen dir, die E-Mail-Adresse zu nutzen, die du bei der Arbeit verwendest.\n        \n            \n                \n                    \n                        mail_outline\n                        \n                    \n                    *Diese E-Mail-Adresse ist\n                        leider ungültig.\n                \n                \n                    \n                        lock_outline\n                        \n                    \n                    *Dieses Passwort ist leider\n                        ungültig.\n                \n\n                Passwort vergessen?\n            \n            \n                \n                ODER\n                \n            \n\n            Anmelden mit Google\n\n            \n                 -->\n            \n            \n                Anmelden\n                Gäste-Login\n            \n        \n    \n\n\n\n    Impressum\n    Datenschutz\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Neu bei DABubble?    Konto erstellen            Anmeldung        Wir empfehlen dir, die E-Mail-Adresse zu nutzen, die du bei der Arbeit verwendest.                                                                                mail_outline                                                                *Diese E-Mail-Adresse ist                        leider ungültig.                                                                            lock_outline                                                                *Dieses Passwort ist leider                        ungültig.                                Passwort vergessen?                                                        ODER                                        Anmelden mit Google                             -->                                        Anmelden                Gäste-Login                            Impressum    Datenschutz'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogoComponent.html":{"url":"components/LogoComponent.html","title":"component - LogoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LogoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/animations/logo/logo.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-logo\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./logo.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./logo.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                containerState\n                            \n                            \n                                defaultBackground\n                            \n                            \n                                fullLogoBlackUrl\n                            \n                            \n                                iconLogoWidth\n                            \n                            \n                                logoTextUrl\n                            \n                            \n                                marginLeft\n                            \n                            \n                                scaleFactor\n                            \n                            \n                                startGrowing\n                            \n                            \n                                textLogoWidth\n                            \n                            \n                                textVisible\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculateDynamicValues\n                            \n                            \n                                growDone\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                    Async\n                                resizeAndMoveDone\n                            \n                            \n                                slideDone\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/animations/logo/logo.component.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:79\n                        \n                    \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculateDynamicValues\n                        \n                    \n                \n            \n            \n                \ncalculateDynamicValues()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Calculates dynamic values for logo dimensions based on the window width.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        growDone\n                        \n                    \n                \n            \n            \n                \ngrowDone()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Handler for the completion of the grow animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resizeAndMoveDone\n                        \n                    \n                \n            \n            \n                \n                        \n                    resizeAndMoveDone()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Handler for the completion of the resize and move animation.\nNavigates to the dashboard and updates the logo text URL.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slideDone\n                        \n                    \n                \n            \n            \n                \nslideDone()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/animations/logo/logo.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Handler for the completion of the slide animation.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        containerState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'start'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultBackground\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullLogoBlackUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : './../../../assets/img/dabubble_header_logo.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iconLogoWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '187px'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoTextUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : './../../../assets/img/logo-text-white.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marginLeft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '-470px'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scaleFactor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '.354'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startGrowing\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textLogoWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '470px'\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/animations/logo/logo.component.ts:61\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, HostListener } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-logo',\n  standalone: true,\n  imports: [\n    CommonModule\n  ],\n  templateUrl: './logo.component.html',\n  styleUrls: ['./logo.component.scss'],\n  animations: [\n    // trigger for the icon\n    trigger('fade', [\n      state('void', style({ opacity: 0 })),\n      transition('void => *', [\n        animate(2000)\n      ])\n    ]),\n\n    // trigger for the text slide-in\n    trigger('slideIn', [\n      state('void', style({ marginLeft: '{{marginLeft}}' }), { params: { marginLeft: '-470px' } }),\n      transition('void => *', [\n        animate(400, style({ marginLeft: '0' }))\n      ])\n    ]),\n\n    trigger('grow', [\n      state('void', style({ width: '0px' })),\n      state('*', style({ width: '{{textLogoWidth}}' }), { params: { textLogoWidth: '470px' } }),\n      transition('void => *', [animate(400)])\n    ]),\n\n    trigger('resizeAndMove', [\n      state('start', style({ top: '50%', left: '50%', transform: 'translate(-50%, -50%) scale(1)' })),\n      state('end', style({\n        top: '32px', left: '32px',\n        transform: 'scale({{scaleFactor}})',\n        transformOrigin: 'top left'\n      }), { params: { scaleFactor: '.3' } }),\n      transition('* => end', animate('1s ease-in-out'))\n    ])\n  ]\n})\nexport class LogoComponent {\n\n  logoTextUrl: string = './../../../assets/img/logo-text-white.png';\n  fullLogoBlackUrl: string = './../../../assets/img/dabubble_header_logo.png';\n\n  startGrowing = false;\n  containerState = 'start';\n  textVisible = false;\n  defaultBackground = false;\n  textLogoWidth: string = '470px'; // Default value\n  iconLogoWidth: string = '187px'; // Default value\n  marginLeft: string = '-470px';\n  scaleFactor: string = '.354'; // Default scale factor\n\n  constructor(private route: Router) { }\n\n  ngOnInit(): void {\n    this.calculateDynamicValues();\n    setTimeout(() => {\n      // Change to true when animating\n      this.startGrowing = true;\n    }, 800);\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) {\n    this.calculateDynamicValues();\n  }\n\n  /**\n   * Calculates dynamic values for logo dimensions based on the window width.\n   */\n  calculateDynamicValues() {\n    const totalWindowWidth = window.innerWidth;\n    const ratio = 2.513; // Ratio of the logo elements\n\n    if (totalWindowWidth > 1200) {\n      this.textLogoWidth = `470px`;\n      this.iconLogoWidth = `187px`;\n      this.marginLeft = `-470px`;\n      this.scaleFactor = '.354';\n      return;\n    }\n\n    let adjustedWidth: number;\n    if (totalWindowWidth > 800) {\n      adjustedWidth = totalWindowWidth * 0.5;\n      this.scaleFactor = '.6';\n    } else {\n      adjustedWidth = totalWindowWidth * 0.6;\n      this.scaleFactor = '.4';\n    }\n\n    const adjustedIconWidth = adjustedWidth / (1 + ratio);\n    const adjustedTextWidth = adjustedIconWidth * ratio;\n\n    this.textLogoWidth = `${adjustedTextWidth}px`;\n    this.iconLogoWidth = `${adjustedIconWidth}px`;\n    this.marginLeft = `-${adjustedTextWidth}px`;\n  }\n\n  /**\n   * Handler for the completion of the grow animation.\n   */\n  growDone() {\n    setTimeout(() => {\n      this.textVisible = true;\n    }, 600);\n  }\n\n  /**\n   * Handler for the completion of the slide animation.\n   */\n  slideDone() {\n    this.containerState = 'end';\n  }\n\n  /**\n   * Handler for the completion of the resize and move animation.\n   * Navigates to the dashboard and updates the logo text URL.\n   */\n  async resizeAndMoveDone() {\n    if (this.containerState === 'end') {\n      this.defaultBackground = true;\n      this.logoTextUrl = './../../../assets/img/logo-text-black.png';\n      await this.route.navigateByUrl('dashboard');\n    }\n  }\n}\n\n    \n\n    \n        \n\n  \n  \n\n    \n\n    \n\n        \n\n    \n\n  \n\n\n resize to size of black logo\n-> move to upper left corner\nChange background to standard color and show the login screen\n\n-->\n\n    \n\n    \n                \n                    ./logo.component.scss\n                \n                @import './../../../mixin.scss';\n\n\n.main-container {\n  height: 100vh;\n  width: 100vw;\n  background: linear-gradient(to bottom, #787df3, #313ae5);\n  position: relative;\n}\n\n.defaultBg {\n  background: #eceefe;\n}\n\n.flex {\n  display: flex;\n}\n\n.center {\n  justify-content: center;\n  align-items: center;\n}\n\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.text-container {\n  width: 470px;\n  overflow: hidden;\n}\n\n.logo-container {\n  max-width: 689px;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  gap: 32px;\n  /* Centering */\n  margin: auto;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                           resize to size of black logo-> move to upper left cornerChange background to standard color and show the login screen-->'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/message.class.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a single message in a thread\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                editMode\n                            \n                            \n                                emojiReactions\n                            \n                            \n                                hoverReactionbar\n                            \n                            \n                                imgFileURL\n                            \n                            \n                                replies\n                            \n                            \n                                senderId\n                            \n                            \n                                senderName\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sender: Partial, content: string, imgFileUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/message.class.ts:15\n                            \n                        \n\n                \n                    \n                            Constructs a new Message instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sender\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe sender of the message.\n\n\n                                                        \n                                                \n                                                \n                                                        content\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe content of the message.\n\n\n                                                        \n                                                \n                                                \n                                                        imgFileUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nThe URL of an image file associated with the message.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emojiReactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hoverReactionbar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imgFileURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/message.class.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJSON(json: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/message.class.ts:63\n                        \n                    \n\n\n            \n                \n                        Creates a Message instance from a JSON object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JSON object to create the message from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Message\n\n                        \n                            \n                                The created Message instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/message.class.ts:42\n                        \n                    \n\n\n            \n                \n                        Converts the Message instance to a JSON object.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                The JSON representation of the message.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from './user.class';\n\n/**\n * Represents a single message in a thread\n */\nexport class Message {\n  senderId: string;\n  senderName: string;\n  content: string;\n  timestamp: number;\n  replies: Message[];\n  emojiReactions: string[];\n  imgFileURL: string;\n  editMode: boolean;\n  hoverReactionbar: boolean;\n\n /**\n   * Constructs a new Message instance.\n   * \n   * @param {Partial} sender - The sender of the message.\n   * @param {string} content - The content of the message.\n   * @param {string} [imgFileUrl] - The URL of an image file associated with the message.\n   */\n  constructor(sender: Partial, content: string, imgFileUrl?: string) {\n    this.senderId = sender.id || '';\n    this.senderName = sender.name || '';\n    this.content = content;\n    this.timestamp = new Date().getTime();\n    this.replies = [];\n    this.emojiReactions = [];\n    this.imgFileURL = imgFileUrl !== undefined ? imgFileUrl : '';\n    this.editMode = false;\n    this.hoverReactionbar = false\n  }\n\n\n   /**\n   * Converts the Message instance to a JSON object.\n   * \n   * @returns {Object} The JSON representation of the message.\n   */\n  toJSON(): {} {\n    return {\n      senderId: this.senderId,\n      senderName: this.senderName,\n      content: this.content,\n      timestamp: this.timestamp,\n      replies: this.replies.map(reply => reply.toJSON()),  \n      emojiReactions: this.emojiReactions,\n      imgFileURL: this.imgFileURL,\n      editMode: this.editMode,\n      hoverReactionbar: this.hoverReactionbar,\n    };\n  }\n\n\n   /**\n   * Creates a Message instance from a JSON object.\n   * \n   * @param {any} json - The JSON object to create the message from.\n   * @returns {Message} The created Message instance.\n   */\n  static fromJSON(json: any): Message {       \n    const message = new Message({ \n      id: json.senderId,\n      name: json.senderName\n    },\n      json.content,\n      json.imgFileURL\n    );\n    message.timestamp = json.timestamp;\n    message.replies = json.replies.map((reply: any) => Message.fromJSON(reply));\n    message.emojiReactions = json.emojiReactions;\n    message.editMode = json.editMode;\n    message.hoverReactionbar = json.hoverReactionbar;\n    \n    return message;\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MessageReactionComponent.html":{"url":"components/MessageReactionComponent.html","title":"component - MessageReactionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MessageReactionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-message-reaction\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./message-reaction.component.html\n            \n\n\n\n            \n                styleUrl\n                ./message-reaction.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emojiSubscription\n                            \n                            \n                                usersForReaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEmojiReactions\n                            \n                            \n                                getNewReactionToMessage\n                            \n                            \n                                isUserInReaction\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                processEmojiReactions\n                            \n                            \n                                raiseReactionCount\n                            \n                            \n                                reactToThread\n                            \n                            \n                                searchUserInReactions\n                            \n                            \n                                updateThreadMessageReactions\n                            \n                            \n                                userReactionagain\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                thread\n                            \n                            \n                                threadMessage\n                            \n                            \n                                userChatId\n                            \n                            \n                                userChatIndex\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiService: EmojiCommunicationService, dataService: DataService, threadService: ThreadService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:28\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the component.\nInitializes with instances of EmojiCommunicationService, DataService, and ThreadService.\nSubscribes to emoji events from EmojiCommunicationService to react to message reactions.\nReacts to thread messages based on the received emoji event, if the sender matches 'MessageReactionComponent' and the message timestamp matches.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        emojiService\n                                                  \n                                                        \n                                                                        EmojiCommunicationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service for emoji communication.\n\n\n                                                        \n                                                \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service for data operations.\n\n\n                                                        \n                                                \n                                                \n                                                        threadService\n                                                  \n                                                        \n                                                                        ThreadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service for thread operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        currentUser\n                    \n                \n                \n                    \n                        Type :         User\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        thread\n                    \n                \n                \n                    \n                        Type :         Thread\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        threadMessage\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        userChatId\n                    \n                \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        userChatIndex\n                    \n                \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getEmojiReactions\n                        \n                    \n                \n            \n            \n                \ngetEmojiReactions(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Retrieves emoji reactions for a specific user.\nSearches for the user in each emoji reaction and updates usersDetail if found.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user to retrieve emoji reactions for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNewReactionToMessage\n                        \n                    \n                \n            \n            \n                \ngetNewReactionToMessage(threadMessage: any, userReaction: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:211\n                        \n                    \n\n\n            \n                \n                        Adds a new emoji reaction to the thread message for the current user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                threadMessage\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread message to add the reaction to.\n\n\n                                            \n                                        \n                                        \n                                                userReaction\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction from the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUserInReaction\n                        \n                    \n                \n            \n            \n                \nisUserInReaction(chatReaction: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:170\n                        \n                    \n\n\n            \n                \n                        Checks if the current user is already in an emoji reaction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                chatReaction\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction to check.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \nThe index of the user in the reaction array, or -1 if not found.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:225\n                        \n                    \n\n\n            \n                \n                        Cleans up resources when the component is destroyed.\nUnsubscribes from emojiSubscription to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\nSubscribes to currentMessages$ from threadService to listen for updates related to emoji reactions.\nProcesses emoji reactions for all users.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processEmojiReactions\n                        \n                    \n                \n            \n            \n                \nprocessEmojiReactions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Processes emoji reactions for all users.\nIterates through all users and retrieves their emoji reactions.\nUpdates the thread message emoji reactions after processing.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        raiseReactionCount\n                        \n                    \n                \n            \n            \n                \nraiseReactionCount(chatReaction: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:199\n                        \n                    \n\n\n            \n                \n                        Increases the reaction count and adds the current user to the emoji reaction.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                chatReaction\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactToThread\n                        \n                    \n                \n            \n            \n                \nreactToThread(threadMessage: any, userReaction: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:138\n                        \n                    \n\n\n            \n                \n                        Reacts to a thread message with an emoji reaction.\nManages adding, updating, or removing emoji reactions based on user actions.\nCopies the thread to Firebase after processing reactions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                threadMessage\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread message to react to.\n\n\n                                            \n                                        \n                                        \n                                                userReaction\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction from the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUserInReactions\n                        \n                    \n                \n            \n            \n                \nsearchUserInReactions(user: User, emojiReaction: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Searches for a user in an emoji reaction and updates usersDetail if found.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user to search for in the emoji reaction.\n\n\n                                            \n                                        \n                                        \n                                                emojiReaction\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction object to search within.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateThreadMessageReactions\n                        \n                    \n                \n            \n            \n                \nupdateThreadMessageReactions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Updates the thread message emoji reactions by transferring data from usersDetail to users.\nRemoves usersDetail after updating.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userReactionagain\n                        \n                    \n                \n            \n            \n                \nuserReactionagain(chatReactions: any, chatReaction: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:183\n                        \n                    \n\n\n            \n                \n                        Handles the case where the current user reacts again with the same emoji.\nDecreases the reaction count and removes the user from the reaction.\nRemoves the entire reaction if the count reaches zero.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                chatReactions\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of emoji reactions.\n\n\n                                            \n                                        \n                                        \n                                                chatReaction\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe specific emoji reaction to handle.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emojiSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usersForReaction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { User } from '../../../models/user.class';\nimport { EmojiCommunicationService } from '../../../services/emoji-communication.service';\nimport { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { Thread } from '../../../models/thread.class';\nimport { DataService } from '../../../services/data.service';\nimport { ThreadService } from '../../../services/thread.service';\n\n@Component({\n  selector: 'app-message-reaction',\n  standalone: true,\n  imports: [\n    CommonModule,\n  ],\n  templateUrl: './message-reaction.component.html',\n  styleUrl: './message-reaction.component.scss'\n})\nexport class MessageReactionComponent {\n  @Input() threadMessage!: any;\n  @Input() currentUser!: User;\n  @Input() thread!: Thread;\n  @Input() userChatId!: string | undefined;\n  @Input() userChatIndex!: number | undefined;\n\n  usersForReaction: User[] = [];\n\n  emojiSubscription: Subscription;\n\n\n  /**\n * Constructs an instance of the component.\n * Initializes with instances of EmojiCommunicationService, DataService, and ThreadService.\n * Subscribes to emoji events from EmojiCommunicationService to react to message reactions.\n * Reacts to thread messages based on the received emoji event, if the sender matches 'MessageReactionComponent' and the message timestamp matches.\n *\n * @param {EmojiCommunicationService} emojiService - The service for emoji communication.\n * @param {DataService} dataService - The service for data operations.\n * @param {ThreadService} threadService - The service for thread operations.\n */\n  constructor(\n    private emojiService: EmojiCommunicationService,\n    private dataService: DataService,\n    private threadService: ThreadService,\n  ) {\n    this.emojiSubscription = this.emojiService.emojiEvent$.subscribe(event => {\n      if (event.sender === 'MessageReactionComponent' && event.messageTimestamp === this.threadMessage.timestamp) {\n        this.reactToThread(this.threadMessage, event.emoji);\n      }\n    });\n  }\n\n\n  /**\n * Initializes the component.\n * Subscribes to `currentMessages$` from `threadService` to listen for updates related to emoji reactions.\n * Processes emoji reactions for all users.\n */\n  ngOnInit() {\n    this.usersForReaction = [];\n    this.threadService.currentMessages$.subscribe(event => {\n      if (event.update === 'updateReaction') {\n        if (event.thread) {\n          this.thread = event.thread;\n          this.processEmojiReactions();\n        }\n      }\n    });\n    this.processEmojiReactions();\n  }\n\n\n  /**\n * Processes emoji reactions for all users.\n * Iterates through all users and retrieves their emoji reactions.\n * Updates the thread message emoji reactions after processing.\n */\n  processEmojiReactions() {\n    this.dataService.allUsers.forEach(user => {\n      this.getEmojiReactions(user);\n    });\n    this.updateThreadMessageReactions();\n  }\n\n\n  /**\n * Retrieves emoji reactions for a specific user.\n * Searches for the user in each emoji reaction and updates `usersDetail` if found.\n *\n * @param {User} user - The user to retrieve emoji reactions for.\n */\n  getEmojiReactions(user: User) {\n    this.threadMessage.emojiReactions.forEach((emojiReaction: any) => {\n      this.searchUserInReactions(user, emojiReaction);\n    });\n  }\n\n\n  /**\n * Searches for a user in an emoji reaction and updates `usersDetail` if found.\n *\n * @param {User} user - The user to search for in the emoji reaction.\n * @param {any} emojiReaction - The emoji reaction object to search within.\n */\n  searchUserInReactions(user: User, emojiReaction: any) {\n    emojiReaction.users.forEach((reactionUserId: any) => {\n      if (reactionUserId === user.id || reactionUserId.id === user.id) {\n        if (!emojiReaction.usersDetail) {\n          emojiReaction.usersDetail = [];\n        }\n        emojiReaction.usersDetail.push(user);\n      }\n    });\n  }\n\n\n  /**\n * Updates the thread message emoji reactions by transferring data from `usersDetail` to `users`.\n * Removes `usersDetail` after updating.\n */\n  updateThreadMessageReactions() {\n    this.threadMessage.emojiReactions = this.threadMessage.emojiReactions.map((reaction: any) => {\n      reaction.users = reaction.usersDetail || reaction.users;\n      delete reaction.usersDetail;\n      return reaction;\n    });\n  }\n\n\n  /**\n * Reacts to a thread message with an emoji reaction.\n * Manages adding, updating, or removing emoji reactions based on user actions.\n * Copies the thread to Firebase after processing reactions.\n *\n * @param {any} threadMessage - The thread message to react to.\n * @param {string} userReaction - The emoji reaction from the user.\n */\n  reactToThread(threadMessage: any, userReaction: string) {\n    let chatReactions = threadMessage.emojiReactions;\n    let reactionExists = false;\n\n    chatReactions.forEach((chatReaction: any) => {\n      if (chatReaction.reaction === userReaction) {\n        reactionExists = true;\n        if (this.isUserInReaction(chatReaction) !== -1) {\n          this.userReactionagain(chatReactions, chatReaction);\n        } else {\n          this.raiseReactionCount(chatReaction);\n        }\n      }\n    });\n    if (!reactionExists) {\n      this.getNewReactionToMessage(threadMessage, userReaction);\n    }\n    if (this.thread.channelId.length > 1) {\n      this.threadService.copyThreadForFirebase(this.thread);\n    } else {\n      this.threadService.copyUserChatThreadForFirebase(this.thread, this.userChatId, this.userChatIndex)\n    }\n    this.processEmojiReactions();\n  }\n\n\n  /**\n * Checks if the current user is already in an emoji reaction.\n *\n * @param {any} chatReaction - The emoji reaction to check.\n * @returns {number} - The index of the user in the reaction array, or -1 if not found.\n */\n  isUserInReaction(chatReaction: any) {\n    return chatReaction.users.findIndex((u: any) => u.id === this.currentUser.id);\n  }\n\n\n  /**\n * Handles the case where the current user reacts again with the same emoji.\n * Decreases the reaction count and removes the user from the reaction.\n * Removes the entire reaction if the count reaches zero.\n *\n * @param {any} chatReactions - The list of emoji reactions.\n * @param {any} chatReaction - The specific emoji reaction to handle.\n */\n  userReactionagain(chatReactions: any, chatReaction: any) {\n    let userIndex = chatReaction.users.findIndex((u: any) => u.id === this.currentUser.id);\n    chatReaction.count--;\n    chatReaction.users.splice(userIndex, 1);\n    if (chatReaction.count === 0) {\n      const index = chatReactions.indexOf(chatReaction);\n      chatReactions.splice(index, 1);\n    }\n  }\n\n\n  /**\n * Increases the reaction count and adds the current user to the emoji reaction.\n *\n * @param {any} chatReaction - The emoji reaction to update.\n */\n  raiseReactionCount(chatReaction: any) {\n    chatReaction.count++;\n    chatReaction.users.push(this.currentUser);\n  }\n\n  \n  /**\n * Adds a new emoji reaction to the thread message for the current user.\n *\n * @param {any} threadMessage - The thread message to add the reaction to.\n * @param {string} userReaction - The emoji reaction from the user.\n */\n  getNewReactionToMessage(threadMessage: any, userReaction: string) {\n    let threadReaction = {\n      reaction: userReaction,\n      users: [this.currentUser],\n      count: 1\n    };\n    threadMessage.emojiReactions.push(threadReaction);\n  }\n\n\n  /**\n * Cleans up resources when the component is destroyed.\n * Unsubscribes from `emojiSubscription` to prevent memory leaks.\n */\n  ngOnDestroy() {\n    this.emojiSubscription.unsubscribe();\n  }\n}\n\n\n    \n\n    \n        \n  \n\n    \n      \n        \n      \n      \n        {{ reactions.reaction }}\n      \n\n      \n        \n          {{ reactions.users[0].id === currentUser.id ? 'Du' : reactions.users[0].name }}\n        \n         1\">und\n         1 && reactions.users.length \n          {{ reactions.users[1].id === currentUser.id ? 'Du' : reactions.users[1].name }}\n        \n         2\">{{ reactions.users.length - 1 }} weitere\n      \n      hat reagiert\n    \n\n\n    \n      \n    \n    \n      {{ reactions.reaction }}\n    \n    {{ reactions.count }}\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        {{ reactions.reaction }}                              {{ reactions.users[0].id === currentUser.id ? \\'Du\\' : reactions.users[0].name }}                 1\">und         1 && reactions.users.length           {{ reactions.users[1].id === currentUser.id ? \\'Du\\' : reactions.users[1].name }}                 2\">{{ reactions.users.length - 1 }} weitere            hat reagiert                            {{ reactions.reaction }}        {{ reactions.count }}  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MessageReactionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentMessages$\n                            \n                            \n                                currentThread$\n                            \n                            \n                                    Private\n                                openCurrentFullThreadSource\n                            \n                            \n                                openCurrentThread$\n                            \n                            \n                                    Private\n                                threadChangesSource\n                            \n                            \n                                    Private\n                                threadMessageSource\n                            \n                            \n                                    Private\n                                threadSource\n                            \n                            \n                                updateThread$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeThread\n                            \n                            \n                                deletFileOfMessage\n                            \n                            \n                                getReactionsForMessage\n                            \n                            \n                                getThreadChanges\n                            \n                            \n                                openFullThread\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/message.service.ts:21\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeThread\n                        \n                    \n                \n            \n            \n                \nchangeThread(thread: Thread, threadOwner: User, currentChannel: Channel, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/message.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Changes the current thread and notifies observers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread to switch to.\n\n\n                                            \n                                        \n                                        \n                                                threadOwner\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe owner of the thread.\n\n\n                                            \n                                        \n                                        \n                                                currentChannel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current channel.\n\n\n                                            \n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves when the thread change is complete.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletFileOfMessage\n                        \n                    \n                \n            \n            \n                \ndeletFileOfMessage(imgFileLink: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/message.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Deletes a file associated with a message from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imgFileLink\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe link to the image file to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReactionsForMessage\n                        \n                    \n                \n            \n            \n                \ngetReactionsForMessage(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/message.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Sends a request to update reactions for a message in a thread.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread containing the message.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getThreadChanges\n                        \n                    \n                \n            \n            \n                \ngetThreadChanges(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/message.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Sends a request to update the changes in a thread.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openFullThread\n                        \n                    \n                \n            \n            \n                \nopenFullThread(openFullThreadBoolean: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/message.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Opens or closes the full thread view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                openFullThreadBoolean\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether to open or close the full thread view.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves when the operation is complete.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessages$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadMessageSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openCurrentFullThreadSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openCurrentThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.openCurrentFullThreadSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadChangesSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadMessageSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadChangesSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/message.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Thread } from '../models/thread.class';\nimport { User } from '../models/user.class';\nimport { Channel } from '../models/channel.class';\nimport { deleteObject, getStorage, ref } from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n\n  private threadSource = new Subject();\n  private threadChangesSource = new Subject();\n  private threadMessageSource = new Subject();\n  private openCurrentFullThreadSource = new Subject();\n\n  currentThread$ = this.threadSource.asObservable();\n  updateThread$ = this.threadChangesSource.asObservable();\n  currentMessages$ = this.threadMessageSource.asObservable();\n  openCurrentThread$ = this.openCurrentFullThreadSource.asObservable();\n\n  constructor() {}\n  \n   /**\n   * Changes the current thread and notifies observers.\n   *\n   * @param {Thread} thread - The thread to switch to.\n   * @param {User} threadOwner - The owner of the thread.\n   * @param {Channel} currentChannel - The current channel.\n   * @param {User} currentUser - The current user.\n   * @returns {Promise} - A promise that resolves when the thread change is complete.\n   */\n  changeThread(thread: Thread, threadOwner: User, currentChannel: Channel, currentUser: User): Promise {\n    return new Promise((resolve) => {\n      this.threadSource.next({ thread, threadOwner, currentChannel, currentUser });\n      resolve();\n    });\n  }\n\n\n   /**\n   * Opens or closes the full thread view.\n   *\n   * @param {boolean} openFullThreadBoolean - Whether to open or close the full thread view.\n   * @returns {Promise} - A promise that resolves when the operation is complete.\n   */\n  openFullThread(openFullThreadBoolean: boolean): Promise {\n    return new Promise((resolve) => {\n      this.openCurrentFullThreadSource.next(openFullThreadBoolean);\n      resolve();\n    })\n  }\n\n\n  /**\n   * Sends a request to update reactions for a message in a thread.\n   *\n   * @param {Thread} thread - The thread containing the message.\n   */\n  getReactionsForMessage(thread: Thread) {\n    let update = 'updateReaction'\n    this.threadMessageSource.next({ thread, update });\n  }\n\n\n   /**\n   * Sends a request to update the changes in a thread.\n   *\n   * @param {Thread} thread - The thread to update.\n   */\n  getThreadChanges(thread: Thread) {\n    let update = 'updateThread'\n    this.threadChangesSource.next({ thread, update });\n  }\n\n\n  /**\n   * Deletes a file associated with a message from the storage.\n   *\n   * @param {string} imgFileLink - The link to the image file to delete.\n   */\n  deletFileOfMessage(imgFileLink: string) {\n    const storage = getStorage();\n    const desertRef = ref(storage, imgFileLink);\n    deleteObject(desertRef).then(() => {\n      return\n    }).catch((error) => {\n      console.error(error);\n    }); \n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageNotFoundComponent.html":{"url":"components/PageNotFoundComponent.html","title":"component - PageNotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PageNotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/page-not-found/page-not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-not-found\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./page-not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./page-not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-page-not-found',\n  standalone: true,\n  imports: [RouterModule],\n  templateUrl: './page-not-found.component.html',\n  styleUrl: './page-not-found.component.scss'\n})\nexport class PageNotFoundComponent {\n\n}\n\n    \n\n    \n        \n  \n\n  \n  \n    Oops, dieser Kanal ist stummgeschaltet! 🤐\n    Zurück zum Dashboard \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Oops, dieser Kanal ist stummgeschaltet! 🤐    Zurück zum Dashboard   '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageNotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PasswordResetComponent.html":{"url":"components/PasswordResetComponent.html","title":"component - PasswordResetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PasswordResetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/password-reset/password-reset.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-password-reset\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatCardModule\n                            RouterModule\n                            ReactiveFormsModule\n                            MatIconModule\n                            MatIcon\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./password-reset.component.html\n            \n\n\n\n            \n                styleUrl\n                ./password-reset.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bannerState\n                            \n                            \n                                passwordData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                passwordMatchValidator\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, router: Router, activatedRoute: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/password-reset/password-reset.component.ts:43\n                            \n                        \n\n                \n                    \n                            create an instance of PasswordResetComponent\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe form builder service\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe router service\n\n\n                                                        \n                                                \n                                                \n                                                        activatedRoute\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nreceive information about the current route\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        passwordMatchValidator\n                        \n                    \n                \n            \n            \n                \npasswordMatchValidator(group: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/password-reset/password-reset.component.ts:68\n                        \n                    \n\n\n            \n                \n                        checks if passwords match\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                group\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { mismatch: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/password-reset/password-reset.component.ts:78\n                        \n                    \n\n\n            \n                \n                        reset password and show banner\nnavigate back to login\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bannerState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/password-reset/password-reset.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/password-reset/password-reset.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIcon, MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-password-reset',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatCardModule,\n    RouterModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatIcon,\n  ],\n  templateUrl: './password-reset.component.html',\n  styleUrl: './password-reset.component.scss',\n  animations: [\n    trigger('resetBanner', [\n      state('showBanner', style({\n        opacity: 1,\n      })),\n      state('fadeUp', style({\n        opacity: 1,\n        bottom: '50%',\n      })),\n      transition('void => showBanner', [\n        animate('0.1s')\n      ]),\n      transition('showBanner => fadeUp', [\n        animate('0.3s')\n      ])\n    ])\n  ]\n})\nexport class PasswordResetComponent {\n\n  passwordData!: FormGroup;\n  bannerState = '';\n\n  /**\n   * create an instance of PasswordResetComponent\n   * @param formBuilder - the form builder service\n   * @param router - the router service\n   * @param activatedRoute - receive information about the current route\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {\n\n    this.passwordData = this.formBuilder.group({\n      password: ['', Validators.required],\n      passwordRepeat: ['', Validators.required]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n  /**\n   * checks if passwords match\n   * @param {FormGroup} group \n   */\n  passwordMatchValidator(group: FormGroup) {\n    const password = group.get('password')!.value;\n    const passwordRepeat = group.get('passwordRepeat')!.value;\n    return password === passwordRepeat ? null : { mismatch: true };\n  }\n\n  /**\n   * reset password and show banner\n   * navigate back to login\n   */\n  async resetPassword() {\n    if (this.passwordData.valid) {\n      const newPassword = this.passwordData.value.password;\n      const actionCode = this.activatedRoute.snapshot.queryParams['oobCode'];\n      this.bannerState = 'showBanner';\n      setTimeout(() => {\n        this.bannerState = 'fadeUp';\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 1000);\n      }, 500);\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            \n        \n        \n            \n                Passwort zurücksetzen\n            \n        \n        \n            \n                \n                    \n                        lock_outline\n                        \n                    \n                    *Diese E-Mail-Adresse ist ungültig.\n                \n\n                \n                    \n                        lock_outline\n                        \n                    \n                    *Diese E-Mail-Adresse ist ungültig.\n                \n            \n            \n                Password ändern\n            \n        \n\n    \n\n\n\n    \n        Password geändert\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                Passwort zurücksetzen                                                                                                    lock_outline                                                                *Diese E-Mail-Adresse ist ungültig.                                                                            lock_outline                                                                *Diese E-Mail-Adresse ist ungültig.                                                        Password ändern                                    Password geändert    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PasswordResetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PhotoSelectionComponent.html":{"url":"components/PhotoSelectionComponent.html","title":"component - PhotoSelectionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PhotoSelectionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/photo-selection/photo-selection.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component allows the user to select or upload a profile photo.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-photo-selection\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatButtonModule\n                            MatCardModule\n                            MatInputModule\n                            MatIconModule\n                            ReactiveFormsModule\n                            MatCheckboxModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./photo-selection.component.html\n            \n\n\n\n            \n                styleUrl\n                ./photo-selection.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                data\n                            \n                            \n                                DEFAULT_IMG_SRC_URL\n                            \n                            \n                                defaultAvatars\n                            \n                            \n                                    \n                                    Public\n                                dialogRef\n                            \n                            \n                                filesize\n                            \n                            \n                                fullName\n                            \n                            \n                                imageSelected\n                            \n                            \n                                imgSrcUrl\n                            \n                            \n                                uploadedFile\n                            \n                            \n                                uploadErr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                fileTooBig\n                            \n                            \n                                handleNext\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSelectedAvatar\n                            \n                            \n                                onSelectedFile\n                            \n                            \n                                setFile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                buttonText\n                            \n                            \n                                onNext\n                            \n                            \n                                showBackArrow\n                            \n                            \n                                showClose\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                selectedImg\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userRegService: UserRegistrationService, dialogRef: MatDialogRef, data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/photo-selection/photo-selection.component.ts:56\n                            \n                        \n\n                \n                    \n                            Creates an instance of PhotoSelectionComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRegService\n                                                  \n                                                        \n                                                                        UserRegistrationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe user registration service.\n\n\n                                                        \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nOptional reference to the dialog containing this component.\n\n\n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nOptional data passed to the dialog.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        buttonText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Weiter'\n                    \n                \n                        \n                            \n                                    Defined in src/app/photo-selection/photo-selection.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onNext\n                    \n                \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/photo-selection/photo-selection.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showBackArrow\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/photo-selection/photo-selection.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showClose\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/photo-selection/photo-selection.component.ts:37\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        selectedImg\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/photo-selection/photo-selection.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Closes the dialog.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileTooBig\n                        \n                    \n                \n            \n            \n                \nfileTooBig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:150\n                        \n                    \n\n\n            \n                \n                        Handles the case when the uploaded file is too large.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleNext\n                        \n                    \n                \n            \n            \n                \nhandleNext()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:93\n                        \n                    \n\n\n            \n                \n                        Calls the next function provided via the onNext input.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:79\n                        \n                    \n\n\n            \n                \n                        Initializes the component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSelectedAvatar\n                        \n                    \n                \n            \n            \n                \nonSelectedAvatar(avatarUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Handles avatar selection by the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                avatarUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the selected avatar.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSelectedFile\n                        \n                    \n                \n            \n            \n                \nonSelectedFile(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:114\n                        \n                    \n\n\n            \n                \n                        Handles file selection by the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFile\n                        \n                    \n                \n            \n            \n                \nsetFile(file: File, element: HTMLInputElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/photo-selection/photo-selection.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Sets the uploaded file and reads its data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe uploaded file.\n\n\n                                            \n                                        \n                                        \n                                                element\n                                            \n                                                        HTMLInputElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input element.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()@Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:67\n                        \n                    \n\n            \n                \n                    - Optional data passed to the dialog.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_IMG_SRC_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : './../../assets/img/profile-empty.png'\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaultAvatars\n                        \n                    \n                \n            \n                \n                    \n                        Default value : defaultAvatars\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Optional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:66\n                        \n                    \n\n            \n                \n                    - Optional reference to the dialog containing this component.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filesize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Full Name'\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageSelected\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imgSrcUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | ArrayBuffer | null\n\n                    \n                \n                \n                    \n                        Default value : this.DEFAULT_IMG_SRC_URL\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadedFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadErr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/photo-selection/photo-selection.component.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Inject, Input, Optional, Output } from '@angular/core';\nimport { UserRegistrationService } from '../services/user-registration.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CommonModule } from '@angular/common';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { RouterModule } from \"@angular/router\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { defaultAvatars } from \"../configuration/default-avatars\";\n\n/**\n * @component PhotoSelectionComponent\n * This component allows the user to select or upload a profile photo.\n */\n@Component({\n  selector: 'app-photo-selection',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatCheckboxModule,\n    RouterModule\n  ],\n  templateUrl: './photo-selection.component.html',\n  styleUrl: './photo-selection.component.scss'\n})\nexport class PhotoSelectionComponent {\n\n  @Input({ required: true }) showBackArrow: boolean = false;\n  @Input({ required: true }) showClose: boolean = false;\n\n  @Input({ required: true }) onNext?: () => void;\n\n  @Input() buttonText: string = 'Weiter';\n\n  @Output() selectedImg = new EventEmitter();\n\n  fullName: string = 'Full Name';\n  defaultAvatars = defaultAvatars;\n\n  DEFAULT_IMG_SRC_URL: string = './../../assets/img/profile-empty.png';\n  imgSrcUrl: string | ArrayBuffer | null = this.DEFAULT_IMG_SRC_URL;\n\n  imageSelected: boolean = false;\n\n  uploadedFile: File | null = null;\n\n  filesize: number = 0;\n  uploadErr: boolean = false;\n\n  /**\n   * Creates an instance of PhotoSelectionComponent.\n   * @param {UserRegistrationService} userRegService - The user registration service.\n   * @param {MatDialogRef} [dialogRef] - Optional reference to the dialog containing this component.\n   * @param {any} [data] - Optional data passed to the dialog.\n   */\n  constructor(\n    private userRegService: UserRegistrationService,\n    @Optional() public dialogRef: MatDialogRef,\n    @Optional() @Inject(MAT_DIALOG_DATA) public data: {\n      showClose: boolean,\n      showBackArrow: boolean,\n      onNext?: () => void,\n      buttonText: string\n    }\n  ) { }\n\n  /**\n   * Initializes the component.\n   * @memberof PhotoSelectionComponent\n   */\n  ngOnInit(): void {\n    this.fullName = this.userRegService.getUserFullName();\n    if (this.data) {\n      this.showClose = this.data.showClose;\n      this.showBackArrow = this.data.showBackArrow;\n      this.buttonText = this.data.buttonText;\n      this.onNext = this.data.onNext;\n    }\n  }\n\n  /**\n   * Calls the next function provided via the onNext input.\n   * @memberof PhotoSelectionComponent\n   */\n  handleNext() {\n    if (this.onNext) {\n      this.onNext();\n    }\n  }\n\n  /**\n   * Closes the dialog.\n   * @param {Event} event - The event object.\n   * @memberof PhotoSelectionComponent\n   */\n  closeDialog(event: Event) {\n    event.stopPropagation();\n    this.dialogRef.close();\n  }\n\n  /**\n   * Handles file selection by the user.\n   * @param {Event} event - The event object.\n   * @memberof PhotoSelectionComponent\n   */\n  onSelectedFile(event: Event): void {\n    this.uploadErr = false;\n    const element = event.target as HTMLInputElement;\n    const file = element.files ? element.files[0] : null;\n    if (file) {\n      this.filesize = Math.round(file?.size / 1000);\n      if (this.filesize > 500) {\n        this.fileTooBig();\n        return;\n      }\n\n      this.selectedImg.emit(file);\n\n      this.setFile(file, element);\n    } else {\n      element.value = '';\n      this.imageSelected = false;\n    }\n  }\n\n  /**\n   * Handles avatar selection by the user.\n   * @param {string} avatarUrl - The URL of the selected avatar.\n   * @memberof PhotoSelectionComponent\n   */\n  onSelectedAvatar(avatarUrl: string): void {\n    this.selectedImg.emit(avatarUrl);\n\n    this.imgSrcUrl = avatarUrl;\n    this.imageSelected = true;\n  }\n\n  /**\n   * Handles the case when the uploaded file is too large.\n   * @memberof PhotoSelectionComponent\n   */\n  fileTooBig() {\n    this.imageSelected = false;\n    this.uploadErr = true;\n    this.imgSrcUrl = this.DEFAULT_IMG_SRC_URL;\n  }\n\n  /**\n   * Sets the uploaded file and reads its data.\n   * @param {File} file - The uploaded file.\n   * @param {HTMLInputElement} element - The input element.\n   * @memberof PhotoSelectionComponent\n   */\n  setFile(file: File, element: HTMLInputElement) {\n    this.uploadedFile = file;\n    const reader = new FileReader;\n    reader.onload = () => {\n      this.imgSrcUrl = reader.result;\n      this.imageSelected = true;\n      element.value = '';\n    }\n    reader.onerror = () => {\n      console.error('Error occurred reading file');\n    }\n    reader.readAsDataURL(file);\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n        \n          \n            Wähle deinen Avatar\n          \n        \n        \n          \n        \n      \n    \n\n    \n\n      \n        \n        {{ fullName }}\n      \n\n      \n        Aus der Liste wählen\n        \n          \n            \n          \n        \n      \n\n      \n        Eigenes Bild verwenden\n        \n          \n          Datei hochladen\n        \n      \n      \n        Bild muss kleiner als 500kb sein. Das Bild hat {{ filesize }}\n          kb.\n      \n\n      {{ buttonText }}\n      \n\n    \n\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                    Wähle deinen Avatar                                                                                {{ fullName }}                    Aus der Liste wählen                                                                    Eigenes Bild verwenden                            Datei hochladen                            Bild muss kleiner als 500kb sein. Das Bild hat {{ filesize }}          kb.            {{ buttonText }}            '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PhotoSelectionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PrivacyComponent.html":{"url":"components/PrivacyComponent.html","title":"component - PrivacyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PrivacyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/privacy/privacy.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-privacy\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                            MatCard\n                            MatCardContent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./privacy.component.html\n            \n\n\n\n            \n                styleUrl\n                ./privacy.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location)\n                    \n                \n                        \n                            \n                                Defined in src/app/privacy/privacy.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/privacy/privacy.component.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { CommonModule, Location } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { MatCard, MatCardContent } from '@angular/material/card';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-privacy',\n  standalone: true,\n  imports: [CommonModule, RouterModule, MatCard, MatCardContent],\n  templateUrl: './privacy.component.html',\n  styleUrl: './privacy.component.scss'\n})\nexport class PrivacyComponent {\n\n  constructor(private location: Location) { }\n\n  goBack() {\n    this.location.back();\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n      Datenschutzerklärung\n      Verantwortlicher im Sinne der Datenschutzgesetze, insbesondere der EU-Datenschutzgrundverordnung (DSGVO), ist:\n      \n      Hannes Pirhofer | Jan Horstmann | Julian Heupgen | Daniel Schneider\n        Postanschrift:\n        Schöne Aussicht 6\n        65329 Hohenstein\n      \n      Ihre Betroffenenrechte\n      Unter den angegebenen Kontaktdaten unseres Datenschutzbeauftragten können Sie jederzeit folgende Rechte\n        ausüben:\n      \n        Auskunft über Ihre bei uns gespeicherten Daten und deren Verarbeitung (Art. 15 DSGVO),\n        Berichtigung unrichtiger personenbezogener Daten (Art. 16 DSGVO),\n        Löschung Ihrer bei uns gespeicherten Daten (Art. 17 DSGVO),\n        Einschränkung der Datenverarbeitung, sofern wir Ihre Daten aufgrund gesetzlicher Pflichten noch nicht\n          löschen dürfen (Art. 18 DSGVO),\n        Widerspruch gegen die Verarbeitung Ihrer Daten bei uns (Art. 21 DSGVO) und\n        Datenübertragbarkeit, sofern Sie in die Datenverarbeitung eingewilligt haben oder einen Vertrag mit uns\n          abgeschlossen haben (Art. 20 DSGVO).\n      \n      Sofern Sie uns eine Einwilligung erteilt haben, können Sie diese jederzeit mit Wirkung für die Zukunft\n        widerrufen.\n      Sie können sich jederzeit mit einer Beschwerde an eine Aufsichtsbehörde wenden, z. B. an die zuständige\n        Aufsichtsbehörde des Bundeslands Ihres Wohnsitzes oder an die für uns als verantwortliche Stelle zuständige\n        Behörde.\n      Eine Liste der Aufsichtsbehörden (für den nichtöffentlichen Bereich) mit Anschrift finden Sie unter: https://www.bfdi.bund.de/.\n      \n      Registrierung auf unserer Website\n      Art und Zweck der Verarbeitung:\n      Für die Registrierung auf unserer Website benötigen wir einige personenbezogene Daten, die über eine\n        Eingabemaske an uns übermittelt werden. \n      Zum Zeitpunkt der Registrierung werden zusätzlich folgende Daten erhoben:\n      \n      Ihre Registrierung ist für das Bereithalten bestimmter Inhalte und Leistungen auf unserer Website erforderlich.\n      \n      Rechtsgrundlage:\n      Die Verarbeitung der bei der Registrierung eingegebenen Daten erfolgt auf Grundlage einer Einwilligung des\n        Nutzers (Art. 6 Abs. 1 lit. a DSGVO).\n      Empfänger:\n      Empfänger der Daten sind ggf. technische Dienstleister, die für den Betrieb und die Wartung unserer Website als\n        Auftragsverarbeiter tätig werden.\n      \n      Speicherdauer:\n      Daten werden in diesem Zusammenhang nur verarbeitet, solange die entsprechende Einwilligung vorliegt. \n      Bereitstellung vorgeschrieben oder erforderlich:\n      Die Bereitstellung Ihrer personenbezogenen Daten erfolgt freiwillig, allein auf Basis Ihrer Einwilligung. Ohne\n        die Bereitstellung Ihrer personenbezogenen Daten können wir Ihnen keinen Zugang auf unsere angebotenen Inhalte\n        gewähren. \n      \n      SSL-Verschlüsselung\n      Um die Sicherheit Ihrer Daten bei der Übertragung zu schützen, verwenden wir dem aktuellen Stand der Technik\n        entsprechende Verschlüsselungsverfahren (z. B. SSL) über HTTPS.\n      \n      \n      Information über Ihr Widerspruchsrecht nach Art. 21 DSGVO\n      Einzelfallbezogenes Widerspruchsrecht\n      Sie haben das Recht, aus Gründen, die sich aus Ihrer besonderen Situation ergeben, jederzeit gegen die\n        Verarbeitung Sie betreffender personenbezogener Daten, die aufgrund Art. 6 Abs. 1 lit. f DSGVO\n        (Datenverarbeitung auf der Grundlage einer Interessenabwägung) erfolgt, Widerspruch einzulegen; dies gilt auch\n        für ein auf diese Bestimmung gestütztes Profiling im Sinne von Art. 4 Nr. 4 DSGVO.\n      Legen Sie Widerspruch ein, werden wir Ihre personenbezogenen Daten nicht mehr verarbeiten, es sei denn, wir\n        können zwingende schutzwürdige Gründe für die Verarbeitung nachweisen, die Ihre Interessen, Rechte und\n        Freiheiten überwiegen, oder die Verarbeitung dient der Geltendmachung, Ausübung oder Verteidigung von\n        Rechtsansprüchen.\n      \n      \n      Änderung unserer Datenschutzbestimmungen\n      Wir behalten uns vor, diese Datenschutzerklärung anzupassen, damit sie stets den aktuellen rechtlichen\n        Anforderungen entspricht oder um Änderungen unserer Leistungen in der Datenschutzerklärung umzusetzen, z.B. bei\n        der Einführung neuer Services. Für Ihren erneuten Besuch gilt dann die neue Datenschutzerklärung.\n      Fragen an den Datenschutzbeauftragten\n      Wenn Sie Fragen zum Datenschutz haben, schreiben Sie uns bitte eine E-Mail oder wenden Sie sich direkt an die\n        für den Datenschutz verantwortliche Person in unserer Organisation:\n      \n      Die Datenschutzerklärung wurde mithilfe der activeMind AG erstellt, den Experten für externe\n            Datenschutzbeauftragte (Version #2020-09-30).\n    \n  \n  \n    Home\n    Impressum\n    Datenschutz\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Datenschutzerklärung      Verantwortlicher im Sinne der Datenschutzgesetze, insbesondere der EU-Datenschutzgrundverordnung (DSGVO), ist:            Hannes Pirhofer | Jan Horstmann | Julian Heupgen | Daniel Schneider        Postanschrift:        Schöne Aussicht 6        65329 Hohenstein            Ihre Betroffenenrechte      Unter den angegebenen Kontaktdaten unseres Datenschutzbeauftragten können Sie jederzeit folgende Rechte        ausüben:              Auskunft über Ihre bei uns gespeicherten Daten und deren Verarbeitung (Art. 15 DSGVO),        Berichtigung unrichtiger personenbezogener Daten (Art. 16 DSGVO),        Löschung Ihrer bei uns gespeicherten Daten (Art. 17 DSGVO),        Einschränkung der Datenverarbeitung, sofern wir Ihre Daten aufgrund gesetzlicher Pflichten noch nicht          löschen dürfen (Art. 18 DSGVO),        Widerspruch gegen die Verarbeitung Ihrer Daten bei uns (Art. 21 DSGVO) und        Datenübertragbarkeit, sofern Sie in die Datenverarbeitung eingewilligt haben oder einen Vertrag mit uns          abgeschlossen haben (Art. 20 DSGVO).            Sofern Sie uns eine Einwilligung erteilt haben, können Sie diese jederzeit mit Wirkung für die Zukunft        widerrufen.      Sie können sich jederzeit mit einer Beschwerde an eine Aufsichtsbehörde wenden, z. B. an die zuständige        Aufsichtsbehörde des Bundeslands Ihres Wohnsitzes oder an die für uns als verantwortliche Stelle zuständige        Behörde.      Eine Liste der Aufsichtsbehörden (für den nichtöffentlichen Bereich) mit Anschrift finden Sie unter: https://www.bfdi.bund.de/.            Registrierung auf unserer Website      Art und Zweck der Verarbeitung:      Für die Registrierung auf unserer Website benötigen wir einige personenbezogene Daten, die über eine        Eingabemaske an uns übermittelt werden.       Zum Zeitpunkt der Registrierung werden zusätzlich folgende Daten erhoben:            Ihre Registrierung ist für das Bereithalten bestimmter Inhalte und Leistungen auf unserer Website erforderlich.            Rechtsgrundlage:      Die Verarbeitung der bei der Registrierung eingegebenen Daten erfolgt auf Grundlage einer Einwilligung des        Nutzers (Art. 6 Abs. 1 lit. a DSGVO).      Empfänger:      Empfänger der Daten sind ggf. technische Dienstleister, die für den Betrieb und die Wartung unserer Website als        Auftragsverarbeiter tätig werden.            Speicherdauer:      Daten werden in diesem Zusammenhang nur verarbeitet, solange die entsprechende Einwilligung vorliegt.       Bereitstellung vorgeschrieben oder erforderlich:      Die Bereitstellung Ihrer personenbezogenen Daten erfolgt freiwillig, allein auf Basis Ihrer Einwilligung. Ohne        die Bereitstellung Ihrer personenbezogenen Daten können wir Ihnen keinen Zugang auf unsere angebotenen Inhalte        gewähren.             SSL-Verschlüsselung      Um die Sicherheit Ihrer Daten bei der Übertragung zu schützen, verwenden wir dem aktuellen Stand der Technik        entsprechende Verschlüsselungsverfahren (z. B. SSL) über HTTPS.                  Information über Ihr Widerspruchsrecht nach Art. 21 DSGVO      Einzelfallbezogenes Widerspruchsrecht      Sie haben das Recht, aus Gründen, die sich aus Ihrer besonderen Situation ergeben, jederzeit gegen die        Verarbeitung Sie betreffender personenbezogener Daten, die aufgrund Art. 6 Abs. 1 lit. f DSGVO        (Datenverarbeitung auf der Grundlage einer Interessenabwägung) erfolgt, Widerspruch einzulegen; dies gilt auch        für ein auf diese Bestimmung gestütztes Profiling im Sinne von Art. 4 Nr. 4 DSGVO.      Legen Sie Widerspruch ein, werden wir Ihre personenbezogenen Daten nicht mehr verarbeiten, es sei denn, wir        können zwingende schutzwürdige Gründe für die Verarbeitung nachweisen, die Ihre Interessen, Rechte und        Freiheiten überwiegen, oder die Verarbeitung dient der Geltendmachung, Ausübung oder Verteidigung von        Rechtsansprüchen.                  Änderung unserer Datenschutzbestimmungen      Wir behalten uns vor, diese Datenschutzerklärung anzupassen, damit sie stets den aktuellen rechtlichen        Anforderungen entspricht oder um Änderungen unserer Leistungen in der Datenschutzerklärung umzusetzen, z.B. bei        der Einführung neuer Services. Für Ihren erneuten Besuch gilt dann die neue Datenschutzerklärung.      Fragen an den Datenschutzbeauftragten      Wenn Sie Fragen zum Datenschutz haben, schreiben Sie uns bitte eine E-Mail oder wenden Sie sich direkt an die        für den Datenschutz verantwortliche Person in unserer Organisation:            Die Datenschutzerklärung wurde mithilfe der activeMind AG erstellt, den Experten für externe            Datenschutzbeauftragte (Version #2020-09-30).            Home    Impressum    Datenschutz  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PrivacyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ProfileViewComponent.html":{"url":"components/ProfileViewComponent.html","title":"component - ProfileViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ProfileViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/menus/profile-view/profile-view.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-profile-view\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./profile-view.component.html\n            \n\n\n\n            \n                styleUrl\n                ./profile-view.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Private\n                                userSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeView\n                            \n                            \n                                editUser\n                            \n                            \n                                getUser\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                editClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, profileService: HeaderProfileService)\n                    \n                \n                        \n                            \n                                Defined in src/app/menus/profile-view/profile-view.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileService\n                                                  \n                                                        \n                                                                        HeaderProfileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        editClicked\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/menus/profile-view/profile-view.component.ts:15\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeView\n                        \n                    \n                \n            \n            \n                \ncloseView(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/menus/profile-view/profile-view.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Closes the profile view and switches to the menu view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event triggering the close action.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editUser\n                        \n                    \n                \n            \n            \n                \neditUser(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/menus/profile-view/profile-view.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Switches to the edit user mode.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event triggering the edit action.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/menus/profile-view/profile-view.component.ts:28\n                        \n                    \n\n\n            \n                \n                        Subscribes to user data and assigns it to the user property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/menus/profile-view/profile-view.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from user data updates when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/menus/profile-view/profile-view.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSub\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/menus/profile-view/profile-view.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Output } from '@angular/core';\nimport { User } from '../../models/user.class';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\nimport { HeaderProfileService } from '../../services/header-profile.service';\n\n@Component({\n  selector: 'app-profile-view',\n  standalone: true,\n  imports: [],\n  templateUrl: './profile-view.component.html',\n  styleUrl: './profile-view.component.scss'\n})\nexport class ProfileViewComponent {\n  @Output() editClicked = new EventEmitter();\n\n  user?: User;\n\n  private userSub = new Subscription();\n\n  constructor(private auth: AuthService, private profileService: HeaderProfileService) {\n    this.getUser();\n  }\n\n  /**\n   * Subscribes to user data and assigns it to the user property.\n   */\n  getUser() {\n    this.userSub = this.auth.getUser().subscribe(user => {\n      if (user) {\n        this.user = user;\n      }\n    });\n  }\n\n  /**\n   * Closes the profile view and switches to the menu view.\n   * @param event - The event triggering the close action.\n   */\n  closeView(event: Event) {\n    event.stopPropagation();\n    this.profileService.switchToMenu();\n  }\n\n  /**\n   * Switches to the edit user mode.\n   * @param event - The event triggering the edit action.\n   */\n  editUser(event: Event) {\n    event.stopPropagation();\n    this.profileService.switchToEdit();\n  }\n\n  /**\n   * Unsubscribes from user data updates when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.userSub) {\n      this.userSub.unsubscribe();\n    }\n  }\n}\n\n    \n\n    \n        @if (user) {\n\n  \n    Profil\n    \n  \n  \n    \n  \n  \n    {{ user.name }}\n    Bearbeiten\n  \n  \n    @if (user.onlineStatus === 'online') {\n    \n    Aktiv\n    }\n    @if (user.onlineStatus === 'offline') {\n    \n    Inaktiv\n    }\n    @if (user.onlineStatus === 'away') {\n    \n    Nicht am PC\n    }\n  \n  \n    \n      \n    \n    \n      E-Mail-Adresse\n      {{ user.email }}\n    \n  \n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (user) {      Profil                    {{ user.name }}    Bearbeiten        @if (user.onlineStatus === \\'online\\') {        Aktiv    }    @if (user.onlineStatus === \\'offline\\') {        Inaktiv    }    @if (user.onlineStatus === \\'away\\') {        Nicht am PC    }                            E-Mail-Adresse      {{ user.email }}      }'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ProfileViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ReAuthenticateUserComponent.html":{"url":"components/ReAuthenticateUserComponent.html","title":"component - ReAuthenticateUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ReAuthenticateUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-re-authenticate-user\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                            MatIconModule\n                            MatCardModule\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./re-authenticate-user.component.html\n            \n\n\n\n            \n                styleUrl\n                ./re-authenticate-user.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                reAuthForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reAuthenticateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, dialogRef: MatDialogRef, data: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        reAuthenticateUser\n                        \n                    \n                \n            \n            \n                \nreAuthenticateUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts:34\n                        \n                    \n\n\n            \n                \n                        Closes the dialog and returns the form value if the form is valid.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reAuthForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-re-authenticate-user',\n  standalone: true,\n  imports: [ReactiveFormsModule, CommonModule, MatIconModule, MatCardModule, MatButtonModule],\n  templateUrl: './re-authenticate-user.component.html',\n  styleUrl: './re-authenticate-user.component.scss'\n})\nexport class ReAuthenticateUserComponent {\n\n  reAuthForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private dialogRef: MatDialogRef,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.reAuthForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  /**\n   * Closes the dialog and returns the form value if the form is valid.\n   */\n  reAuthenticateUser() {\n    if (this.reAuthForm.valid) {\n      this.dialogRef.close(this.reAuthForm.value);\n    }\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        Login\n      \n      Melde dich bitte nochmals an um die gewünschte Aktion {{ data.from }} durchzuführen.\n    \n    \n\n      \n        \n          \n            mail\n            \n          \n        \n        \n          *Diese\n            E-Mail Adresse ist leider ungültig.\n        \n      \n\n\n      \n        \n          \n            lock\n            \n          \n        \n        \n          Bitte geben sie ein Passwort mit mind. 6 Zeichen ein.\n        \n      \n\n      Login\n\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Login            Melde dich bitte nochmals an um die gewünschte Aktion {{ data.from }} durchzuführen.                                            mail                                                *Diese            E-Mail Adresse ist leider ungültig.                                                  lock                                                Bitte geben sie ein Passwort mit mind. 6 Zeichen ein.                    Login      '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ReAuthenticateUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/register/register.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component handles the user registration process.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatButtonModule\n                            MatCardModule\n                            MatInputModule\n                            MatIconModule\n                            ReactiveFormsModule\n                            MatCheckboxModule\n                            RouterModule\n                \n            \n\n            \n                styleUrls\n                ./register.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                registerForm\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onNextStep\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, userRegService: UserRegistrationService, route: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/register/register.component.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of RegisterComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe form builder service.\n\n\n                                                        \n                                                \n                                                \n                                                        userRegService\n                                                  \n                                                        \n                                                                        UserRegistrationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe user registration service.\n\n\n                                                        \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onNextStep\n                        \n                    \n                \n            \n            \n                \n                        \n                    onNextStep()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/register/register.component.ts:63\n                        \n                    \n\n\n            \n                \n                        Proceeds to the next step in the registration process.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        registerForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/register/register.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/register/register.component.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { CommonModule, Location } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { UserRegistrationService } from '../services/user-registration.service';\nimport { Router, RouterModule } from '@angular/router';\n\n/**\n * @component RegisterComponent\n * This component handles the user registration process.\n */\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    MatCheckboxModule,\n    RouterModule\n  ],\n  templateUrl: './register.component.html',\n  styleUrls: [\n    './register.component.scss'\n  ]\n})\nexport class RegisterComponent {\n\n  registerForm: FormGroup;\n  userId = '';\n\n  /**\n   * Creates an instance of RegisterComponent.\n   * @param {FormBuilder} formBuilder - The form builder service.\n   * @param {UserRegistrationService} userRegService - The user registration service.\n   * @param {Router} route - The router service.\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private userRegService: UserRegistrationService,\n    private route: Router\n  ) {\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.pattern('^[a-zA-ZäöüÄÖÜß]+ [a-zA-ZäöüÄÖÜß]+$')]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      privacy: ['', Validators.requiredTrue],\n    });\n  }\n\n  /**\n   * Proceeds to the next step in the registration process.\n   * @memberof RegisterComponent\n   */\n  async onNextStep() {\n    const { privacy, ...userData } = this.registerForm.value;\n    this.userRegService.saveUserData(userData);\n    this.registerForm.reset();\n    this.route.navigate(['/register/next']).then();\n  }\n\n}\n\n    \n\n    \n        \n  \n  \n    \n      \n        \n          \n            \n          \n          \n            \n              Konto erstellen\n            \n          \n          \n        \n      \n      Mit deinem Namen und deiner E-Mail Adresse hast du dein neues DABubble Konto.\n\n\n      \n\n        \n          \n            \n              person\n              \n            \n          \n          \n            Bitte\n              schreiben sie einen Namen. Bsp: Max Mustermann\n          \n        \n\n        \n          \n            \n              mail\n              \n            \n          \n          \n            \n              *Diese E-Mail Adresse ist leider ungültig.\n          \n        \n\n        \n          \n            \n              lock\n              \n            \n          \n          \n            Bitte geben sie ein\n              Passwort mit mind. 6 Zeichen ein.\n          \n        \n\n        Ich stimme der Datenschutzerklärung zu.\n\n        Weiter\n\n      \n\n    \n\n  \n\n\n  \n    Impressum\n    Datenschutz\n  \n\n  \n    Login Hannes\n    Register\n    \n    Form Status: {{ registerForm.status }}\n   -->\n\n\n\n    \n\n    \n                \n                    ./register.component.scss\n                \n                @import '../../mixin.scss';\n\n.register-container {\n  @include flex-align-justify();\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.logo {\n  height: 55px;\n  position: absolute;\n  left: 32px;\n  top: 32px;\n}\n\n.devtools {\n  position: absolute;\n  bottom: 75px;\n  left: 75px;\n}\n\nmat-card {\n  width: 90%;\n  max-width: 606px;\n  max-height: 769px;\n  min-height: 70vh;\n  border-radius: 30px;\n  padding: 18px 32px;\n\n  mat-card-content {\n    height: 100%;\n    display: flex;\n    gap: 48px;\n    flex-direction: column;\n\n    .register-header {\n      gap: 48px;\n      display: flex;\n      flex-direction: column;\n      position: relative;\n\n      .headline-with-arrow {\n        display: flex;\n        flex-direction: row;\n        gap: 16px;\n\n        .back-arrow {\n          height: 40px;\n          width: 40px;\n          z-index: 99;\n          border-radius: 50%;\n\n          &:hover {\n            background-color: #797df36e;\n            cursor: pointer;\n          }\n        }\n\n        .headline {\n          @include flex-align-justify();\n          flex: 1;\n\n          h1 {\n            margin-bottom: 0 !important;\n          }\n        }\n\n        .headline-side-space {\n          width: 10%;\n          @include flex-align-justify();\n        }\n      }\n    }\n\n    h1 {\n      font-family: Nunito, sans-serif;\n      font-size: 46px;\n      line-height: 46px;\n      font-weight: 700;\n      color: #444DF2;\n      text-align: center;\n    }\n\n    span {\n      font-family: Nunito, sans-serif;\n      font-size: 20px;\n      line-height: normal;\n      font-weight: 400;\n      text-align: center;\n    }\n\n    .input-container {\n      width: 100%;\n    }\n\n    .input-field-container {\n      font-family: Nunito, sans-serif;\n      font-size: 18px;\n      line-height: normal;\n      font-weight: 500;\n      display: flex;\n      flex-direction: column;\n      border-radius: 100px;\n      padding: 16px 24px;\n      background-color: #ECEEFE;\n      box-sizing: border-box;\n\n      mat-icon {\n        color: #686868;\n        height: 24px;\n      }\n\n      div {\n        display: flex;\n        flex-direction: row;\n        gap: 16px;\n      }\n\n      input {\n        background-color: #ECEEFE;\n        border: none;\n        color: #686868;\n        font-size: 18px;\n        line-height: normal;\n\n        &:focus {\n          outline: none;\n        }\n      }\n\n      &:hover {\n        outline: 1px solid #686868;\n      }\n\n      &:focus-within,\n      &:focus {\n        outline: 1px solid #535AF1;\n      }\n\n    }\n\n    .next-btn {\n      align-self: end;\n      padding: 12px 25px;\n      margin-top: 16px;\n      border-radius: 25px;\n      font-size: 18px;\n      font-weight: 700;\n      color: white;\n      background-color: #444DF2;\n      border: none;\n\n      &:disabled {\n        cursor: default;\n        pointer-events: none;\n        color: rgba(0, 0, 0, 0.38);\n        background-color: rgba(0, 0, 0, 0.12);\n      }\n\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n}\n\nform {\n  width: 100%;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-evenly;\n  flex-direction: column;\n  height: 100%;\n\n  input {\n    width: 100%;\n  }\n}\n\n.input-feedback {\n  margin: 0;\n  color: #ed1e79;\n  font-size: 14px;\n  line-height: normal;\n}\n\n.error-container {\n  display: flex;\n  margin: 6px 0 6px 22px;\n}\n\n.privacy-check span {\n  color: #42526E;\n  line-height: 18px;\n  padding: 0 !important;\n}\n\na {\n  color: #797EF3;\n  font-size: 18px;\n  line-height: normal;\n  font-family: Nunito, sans-serif;\n  text-decoration: none;\n\n  &:hover {\n    cursor: pointer;\n    color: #444DF2;\n  }\n}\n\n.footer-links {\n  display: flex;\n  gap: 24px;\n  position: absolute;\n  bottom: 24px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n@media (max-width: 450px) {\n\n  .register-container {\n    gap: 24px;\n\n    .logo {\n      position: unset;\n      max-width: 40%;\n      height: unset;\n    }\n\n    mat-card {\n      padding: 0 !important;\n      max-height: 80vh;\n      min-height: unset;\n\n      mat-card-content {\n        gap: 12px;\n\n        .register-header {\n          gap: 12px !important;\n\n          h1 {\n            font-size: 32px;\n            line-height: 32px;\n          }\n        }\n\n        span {\n          font-size: 17px;\n          line-height: 20px;\n        }\n\n        form {\n          overflow: auto;\n          justify-content: unset;\n          padding: 12px;\n        }\n      }\n    }\n\n    .footer-links {\n      display: none;\n    }\n  }\n}\n\n@media (max-width: 450px) {\n  .input-field-container {\n    input {\n      font-size: 15px !important;\n    }\n\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                          Konto erstellen                                                    Mit deinem Namen und deiner E-Mail Adresse hast du dein neues DABubble Konto.                                                  person                                                          Bitte              schreiben sie einen Namen. Bsp: Max Mustermann                                                              mail                                                                        *Diese E-Mail Adresse ist leider ungültig.                                                              lock                                                          Bitte geben sie ein              Passwort mit mind. 6 Zeichen ein.                          Ich stimme der Datenschutzerklärung zu.        Weiter                  Impressum    Datenschutz        Login Hannes    Register        Form Status: {{ registerForm.status }}   -->'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterNextComponent.html":{"url":"components/RegisterNextComponent.html","title":"component - RegisterNextComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterNextComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/register-next/register-next.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component handles the next step in the user registration process, including photo selection and final registration.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register-next\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatButton\n                            MatCard\n                            MatCardContent\n                            NgForOf\n                            NgIf\n                            RouterLink\n                                PhotoSelectionComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./register-next.component.html\n            \n\n\n\n            \n                styleUrl\n                ./register-next.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                imageAsFileOrUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleFile\n                            \n                            \n                                handleImage\n                            \n                            \n                                    Async\n                                onRegistrationFinished\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userRegService: UserRegistrationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/register-next/register-next.component.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of RegisterNextComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRegService\n                                                  \n                                                        \n                                                                        UserRegistrationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe user registration service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleFile\n                        \n                    \n                \n            \n            \n                \nhandleFile(file: File | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/register-next/register-next.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Handles the selected file from the photo selection component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selected file.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleImage\n                        \n                    \n                \n            \n            \n                \nhandleImage(fileOrUrl: File | string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/register-next/register-next.component.ts:52\n                        \n                    \n\n\n            \n                \n                        Handles the selected image (either file or URL) from the photo selection component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileOrUrl\n                                            \n                                                        File | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selected image.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onRegistrationFinished\n                        \n                    \n                \n            \n            \n                \n                        \n                    onRegistrationFinished()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/register-next/register-next.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Completes the user registration process.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        imageAsFileOrUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File | string | null\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/register-next/register-next.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { MatButton } from \"@angular/material/button\";\nimport { MatCard, MatCardContent } from \"@angular/material/card\";\nimport { NgForOf, NgIf } from \"@angular/common\";\nimport { RouterLink } from \"@angular/router\";\nimport { PhotoSelectionComponent } from \"../photo-selection/photo-selection.component\";\nimport { UserRegistrationService } from \"../services/user-registration.service\";\n\n/**\n * @component RegisterNextComponent\n * This component handles the next step in the user registration process, including photo selection and final registration.\n */\n@Component({\n  selector: 'app-register-next',\n  standalone: true,\n  imports: [\n    MatButton,\n    MatCard,\n    MatCardContent,\n    NgForOf,\n    NgIf,\n    RouterLink,\n    PhotoSelectionComponent\n  ],\n  templateUrl: './register-next.component.html',\n  styleUrl: './register-next.component.scss'\n})\nexport class RegisterNextComponent {\n\n  imageAsFileOrUrl: File | string | null = '';\n\n  /**\n   * Creates an instance of RegisterNextComponent.\n   * @param {UserRegistrationService} userRegService - The user registration service.\n   */\n  constructor(private userRegService: UserRegistrationService) { }\n\n  /**\n   * Handles the selected file from the photo selection component.\n   * @param {File | null} file - The selected file.\n   * @memberof RegisterNextComponent\n   */\n  handleFile(file: File | null) {\n    this.imageAsFileOrUrl = file;\n  }\n\n  /**\n   * Handles the selected image (either file or URL) from the photo selection component.\n   * @param {File | string} fileOrUrl - The selected image.\n   * @memberof RegisterNextComponent\n   */\n  handleImage(fileOrUrl: File | string) {\n    this.imageAsFileOrUrl = fileOrUrl;\n  }\n\n  /**\n   * Completes the user registration process.\n   * @memberof RegisterNextComponent\n   */\n  async onRegistrationFinished() {\n    try {\n      let storageUrl: string = '';\n      if (this.imageAsFileOrUrl instanceof File) {\n        storageUrl = await this.userRegService.uploadFile(this.imageAsFileOrUrl);\n      } else if (typeof this.imageAsFileOrUrl === 'string') {\n        storageUrl = this.imageAsFileOrUrl;\n      }\n      this.userRegService.updateUserObject('imageUrl', storageUrl as string);\n      this.userRegService.updateUserObject('onlineStatus', 'online');\n      this.userRegService.updateUserObject('channels', ['Yk2dgejx9yy7iHLij1Qj']);\n      this.userRegService.signUpAndCreateUser();\n    }\n    catch (error) {\n      console.error('An error occurred while saving the user.');\n    }\n  }\n\n}\n\n    \n\n    \n        \n  \n\n  \n\n  \n    Impressum\n    Datenschutz\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          Impressum    Datenschutz  '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterNextComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SearchComponent.html":{"url":"components/SearchComponent.html","title":"component - SearchComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SearchComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/search/search.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-search\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            MatAutocompleteModule\n                            CommonModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./search.component.html\n            \n\n\n\n            \n                styleUrl\n                ./search.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                autocompleteTrigger\n                            \n                            \n                                channels\n                            \n                            \n                                control\n                            \n                            \n                                currentUser\n                            \n                            \n                                    Public\n                                dataService\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                filteredChannels\n                            \n                            \n                                filteredUsers\n                            \n                            \n                                isPanelOpen\n                            \n                            \n                                placeholder\n                            \n                            \n                                    \n                                searchInput\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeSidenav\n                            \n                            \n                                filterChannels\n                            \n                            \n                                filterUsers\n                            \n                            \n                                initFilteredChannel\n                            \n                            \n                                initFilteredUsers\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                onSelection\n                            \n                            \n                                openProfile\n                            \n                            \n                                showChannels\n                            \n                            \n                                updatePlaceholder\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService, dialog: MatDialog, auth: AuthService, sidenavService: SidenavService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/search/search.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sidenavService\n                                                  \n                                                        \n                                                                        SidenavService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Handles the window resize event to update UI components.\nThis method is triggered whenever the window is resized. It updates\nthe placeholder text based on the new window width by calling the\nupdatePlaceholder method. This ensures that the placeholder text\nis responsive to the current screen size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe resize event object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeSidenav\n                        \n                    \n                \n            \n            \n                \ncloseSidenav()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:219\n                        \n                    \n\n\n            \n                \n                        Closes the sidenav if the screen width is small.\nThis method calls the toggleSidenavIfScreenIsSmall method from the\nsidenavService to close the sidenav if the current screen width is\n650 pixels or less. This ensures that the sidenav is only toggled\nwhen appropriate for smaller screens.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterChannels\n                        \n                    \n                \n            \n            \n                \nfilterChannels(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Filters a list of channels based on a search value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe search value to use for filtering.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Channel[]\n\n                        \n                            \n                                \nAn array of channels that match the search criteria.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterUsers\n                        \n                    \n                \n            \n            \n                \nfilterUsers(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Filters a list of users based on a search value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe search value to use for filtering.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User[]\n\n                        \n                            \n                                \nAn array of users that match the search criteria.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initFilteredChannel\n                        \n                    \n                \n            \n            \n                \ninitFilteredChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Initializes the observable stream for filtered channels based on the control value changes.\nSubscribes to the control's valueChanges observable and applies filtering logic through the filterChannels function.\nThe filtered channels are then assigned to the filteredChannels property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initFilteredUsers\n                        \n                    \n                \n            \n            \n                \ninitFilteredUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Initializes the observable stream for filtered users based on the control value changes.\nSubscribes to the control's valueChanges observable and applies filtering logic through the filterUsers function.\nThe filtered users are then assigned to the filteredUsers property.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Initializes the user and channel data after the component is loaded.\nThis function fetches user and channel data from the data service and populates the following properties:\nusers: An array of all users.\ncurrentUser: The currently authenticated user object.\nchannels: An array of all channels (if the user has channel information).\nfilteredUsers: An array of filtered users (implementation assumed to be in initFilteredUsers).\nfilteredChannels: An array of filtered channels (implementation assumed to be in initFilteredChannel).\nIt also handles potential errors during data fetching.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Handles the window resize event to update UI components.\nThis method is triggered whenever the window is resized. It updates\nthe placeholder text based on the new window width by calling the\nupdatePlaceholder method. This ensures that the placeholder text\nis responsive to the current screen size.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSelection\n                        \n                    \n                \n            \n            \n                \nonSelection()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:204\n                        \n                    \n\n\n            \n                \n                        Resets the control after a selection event.\nThis function is likely triggered by a user interaction (e.g., clicking on an item in a list).\nIt resets the state of the control property, which is assumed to be a form control or similar element.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfile\n                        \n                    \n                \n            \n            \n                \nopenProfile(participant: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:188\n                        \n                    \n\n\n            \n                \n                        Opens a dialog to view the profile of a participant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                participant\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe participant object to display in the profile view.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showChannels\n                        \n                    \n                \n            \n            \n                \nshowChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:175\n                        \n                    \n\n\n            \n                \n                        Returns a list of channels for the current user.\nThis function filters the available channels based on the current user's channel subscriptions.\nIt returns an empty array if the current user has no channel information.\n\n\n                        \n                            Returns :         Channel[]\n\n                        \n                            \n                                \nAn array of channels that the current user has access to.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePlaceholder\n                        \n                    \n                \n            \n            \n                \nupdatePlaceholder(width: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dashboard/search/search.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Updates the placeholder text based on the given width.\nThis method sets the placeholder property to a different string\ndepending on whether the provided width is less than 651 pixels.\nIt helps in making the placeholder text responsive to the screen size.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                width\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current width of the screen.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        autocompleteTrigger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatAutocompleteTrigger\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild(MatAutocompleteTrigger)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Channel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl('')\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPanelOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeholder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Code learning durchsuchen'\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        searchInput\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('searchInput')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/dashboard/search/search.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { DataService } from '../../services/data.service';\nimport { User } from '../../models/user.class';\nimport { CommonModule } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ViewProfileComponent } from '../../dialog/view-profile/view-profile.component';\nimport { RouterModule } from '@angular/router';\nimport { Channel } from '../../models/channel.class';\nimport { AuthService } from '../../services/auth.service';\nimport { Observable, map, startWith, switchMap } from 'rxjs';\nimport { SidenavService } from '../../services/sidenav.service';\n\n@Component({\n  selector: 'app-search',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    CommonModule,\n    RouterModule\n  ],\n  templateUrl: './search.component.html',\n  styleUrl: './search.component.scss'\n})\n\nexport class SearchComponent {\n  @ViewChild('searchInput') searchInput!: ElementRef;\n  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger!: MatAutocompleteTrigger;\n\n  control = new FormControl('');\n  isPanelOpen: boolean = false;\n  users: User[] = [];\n  filteredUsers!: Observable;\n  filteredChannels!: Observable;\n  channels: Channel[] = [];\n  currentUser!: User;\n  placeholder: string = 'Code learning durchsuchen';\n\n\n  constructor(\n    public dataService: DataService,\n    public dialog: MatDialog,\n    private auth: AuthService,\n    private sidenavService: SidenavService\n  ) {\n    this.updatePlaceholder(window.innerWidth);\n  }\n\n\n  /**\n  * Updates the placeholder text based on the given width.\n  * This method sets the `placeholder` property to a different string\n  * depending on whether the provided width is less than 651 pixels.\n  * It helps in making the placeholder text responsive to the screen size.\n  *\n  * @param {number} width - The current width of the screen.\n  */\n  updatePlaceholder(width: number) {\n    this.placeholder = width  {\n        this.dataService.getUsersList().pipe(\n          switchMap((users: any) => {\n            this.users = users;\n            this.currentUser = users.find((u: any) => u.authUserId === userId);\n            this.initFilteredUsers();\n            return this.dataService.getChannelsList();\n          })\n        ).subscribe((channels: any) => {\n          if (this.currentUser.channels) {\n            this.channels = channels.filter((channel: any) => this.currentUser.channels.includes(channel.channelId));\n            this.initFilteredChannel();\n          }\n        });\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n  /**\n   * Initializes the observable stream for filtered users based on the control value changes.\n   * Subscribes to the control's valueChanges observable and applies filtering logic through the filterUsers function.\n   * The filtered users are then assigned to the `filteredUsers` property.\n   */\n  initFilteredUsers() {\n    this.filteredUsers = this.control.valueChanges.pipe(\n      startWith(''),\n      map(value => this.filterUsers(value ?? ''))\n    );\n  }\n\n\n  /**\n   * Filters a list of users based on a search value.\n   * \n   * @param value - The search value to use for filtering.\n   * @returns - An array of users that match the search criteria.\n   */\n  filterUsers(value: string): User[] {\n    if (!value) return this.users;\n    const filterValue = value.toLowerCase();\n    return this.users.filter(user => user.name.toLowerCase().includes(filterValue));\n  }\n\n\n  /**\n   * Initializes the observable stream for filtered channels based on the control value changes.\n   * Subscribes to the control's valueChanges observable and applies filtering logic through the filterChannels function.\n   * The filtered channels are then assigned to the `filteredChannels` property.\n  */\n  initFilteredChannel() {\n    this.filteredChannels = this.control.valueChanges.pipe(\n      startWith(''),\n      map(value => this.filterChannels(value ?? ''))\n    );\n  }\n\n\n  /**\n   * Filters a list of channels based on a search value.\n   * \n   * @param value - The search value to use for filtering.\n   * @returns - An array of channels that match the search criteria.\n   */\n  filterChannels(value: string): Channel[] {\n    if (!value) return this.channels;\n    const filterValue = value.toLowerCase();\n    return this.channels.filter(channel => channel.title.toLowerCase().includes(filterValue));\n  }\n\n\n  /**\n     * Returns a list of channels for the current user.\n     *\n     * This function filters the available channels based on the current user's channel subscriptions.\n     * It returns an empty array if the current user has no channel information.\n     *\n     * @returns - An array of channels that the current user has access to.\n     */\n  showChannels(): Channel[] {\n    if (!this.currentUser.channels) {\n      return [];\n    }\n    return this.channels.filter(channel => this.currentUser.channels.includes(channel.channelId));\n  }\n\n\n  /**\n   * Opens a dialog to view the profile of a participant.\n   * \n   * @param participant - The participant object to display in the profile view.\n   */\n  openProfile(participant: any): void {\n    const dialogRef = this.dialog.open(ViewProfileComponent, { data: participant });\n    dialogRef.afterClosed().subscribe(() => {\n      this.control.reset();\n      this.isPanelOpen = false;\n      this.searchInput.nativeElement.blur();\n      this.autocompleteTrigger.closePanel();\n    });\n  }\n\n\n  /**\n   * Resets the control after a selection event.\n   * This function is likely triggered by a user interaction (e.g., clicking on an item in a list).\n   * It resets the state of the `control` property, which is assumed to be a form control or similar element.\n   */\n  onSelection(): void {\n    this.control.reset();\n    this.isPanelOpen = false;\n    this.searchInput.nativeElement.blur();\n    this.autocompleteTrigger.closePanel();\n  }\n\n\n  /**\n  * Closes the sidenav if the screen width is small.\n  * This method calls the `toggleSidenavIfScreenIsSmall` method from the\n  * `sidenavService` to close the sidenav if the current screen width is\n  * 650 pixels or less. This ensures that the sidenav is only toggled\n  * when appropriate for smaller screens.\n  */\n  closeSidenav() {\n    this.sidenavService.toggleSidenavIfScreenIsSmall('sidenav');\n  }\n}\n    \n\n    \n        \n  \n  \n    User\n    @for (searchObjects of filteredUsers | async; track $index) {\n    \n      \n      {{ searchObjects.name }}\n    }\n    Channels\n    @for (searchObjects of filteredChannels | async; track $index) {\n    \n      \n      {{ searchObjects.title }}\n    }\n  \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        User    @for (searchObjects of filteredUsers | async; track $index) {                {{ searchObjects.name }}    }    Channels    @for (searchObjects of filteredChannels | async; track $index) {                {{ searchObjects.title }}    }    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SearchComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SendMailToResetPasswordComponent.html":{"url":"components/SendMailToResetPasswordComponent.html","title":"component - SendMailToResetPasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SendMailToResetPasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-send-mail-to-reset-password\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatCardModule\n                            MatIconModule\n                            ReactiveFormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./send-mail-to-reset-password.component.html\n            \n\n\n\n            \n                styleUrl\n                ./send-mail-to-reset-password.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bannerState\n                            \n                            \n                                emailData\n                            \n                            \n                                logInFalse\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmailResetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts:43\n                            \n                        \n\n                \n                    \n                            creates an instance of SendMailToResetPasswordComponent\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe form builder service\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nthe router service\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmailResetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmailResetPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts:64\n                        \n                    \n\n\n            \n                \n                        send an email for password reset\nshow banner for success\nnavigate back to login\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bannerState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.formBuilder.group({\n    email: ['', [Validators.required, Validators.email]],\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logInFalse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { getAuth, sendPasswordResetEmail } from '@angular/fire/auth';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-send-mail-to-reset-password',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatIconModule,\n    ReactiveFormsModule,\n    RouterModule,\n  ],\n  templateUrl: './send-mail-to-reset-password.component.html',\n  styleUrl: './send-mail-to-reset-password.component.scss',\n  animations: [\n    trigger('emailBanner', [\n      state('showBanner', style({\n        opacity: 1,\n      })),\n      state('fadeUp', style({\n        opacity: 1,\n        bottom: '50%',\n      })),\n      transition('void => showBanner', [\n        animate('0.1s')\n      ]),\n      transition('showBanner => fadeUp', [\n        animate('0.3s')\n      ])\n    ])\n  ]\n})\nexport class SendMailToResetPasswordComponent {\n\n  logInFalse: boolean = false;\n  bannerState = '';\n\n  /**\n   * creates an instance of SendMailToResetPasswordComponent\n   * @param formBuilder - the form builder service\n   * @param router - the router service\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router\n  ) { }\n\n  emailData = this.formBuilder.group({\n    email: ['', [Validators.required, Validators.email]],\n  })\n\n  /**\n   * send an email for password reset\n   * show banner for success\n   * navigate back to login\n   */\n  async sendEmailResetPassword(): Promise {\n    if (this.emailData.valid) {\n      const auth = getAuth();\n      const email: string = this.emailData.value.email || '';\n\n      sendPasswordResetEmail(auth, email)\n        .then(() => {\n          this.bannerState = 'showBanner';\n          setTimeout(() => {\n            this.bannerState = 'fadeUp';\n            setTimeout(() => {\n              this.router.navigate(['/login']);\n            }, 1000);\n          }, 500);\n        })\n        .catch((error) => {\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          // ..\n        });\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n            \n        \n        \n            \n                Passwort zurücksetzen\n            \n            \n                Bitte geben Sie Ihre E-Mail-Adresse ein.\n            \n        \n        \n            \n                \n                    \n                        mail_outline\n                        \n                    \n                    *Diese E-Mail-Adresse ist ungültig.\n                \n                \n                    Wir senden Ihnen eine E-Mail, über die Sie Ihr Passwort ändern können.\n                \n            \n            \n                E-Mail senden\n            \n        \n\n    \n\n\n\n    \n        \n        E-Mail gesendet\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                Passwort zurücksetzen                                        Bitte geben Sie Ihre E-Mail-Adresse ein.                                                                                                    mail_outline                                                                *Diese E-Mail-Adresse ist ungültig.                                                    Wir senden Ihnen eine E-Mail, über die Sie Ihr Passwort ändern können.                                                        E-Mail senden                                            E-Mail gesendet    '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SendMailToResetPasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SidenavService.html":{"url":"injectables/SidenavService.html","title":"injectable - SidenavService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SidenavService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/sidenav.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                opened\n                            \n                            \n                                screenIsSmall\n                            \n                            \n                                showChannels\n                            \n                            \n                                showDirectMessages\n                            \n                            \n                                windowWidth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleSidenav\n                            \n                            \n                                toggleSidenavIfScreenIsSmall\n                            \n                            \n                                updateScreenSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/sidenav.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSidenav\n                        \n                    \n                \n            \n            \n                \ntoggleSidenav(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/sidenav.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Toggles the state of various UI components based on the provided value.\nThis method manages the open state of sidenav elements including the main sidenav,\nchannels list, and private messages. It checks the provided value to determine\nwhich component's visibility should be toggled.\nExample :                    'sidenav', 'channels', and 'private', each corresponding\n                    to different parts of the UI.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component identifier to toggle. Valid values are\n'sidenav', 'channels', and 'private', each corresponding\nto different parts of the UI.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleSidenavIfScreenIsSmall\n                        \n                    \n                \n            \n            \n                \ntoggleSidenavIfScreenIsSmall(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/sidenav.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Toggles the sidenav based on the current window width.\nThis method checks if the window width is 650 pixels or less,\nand if true, it delegates the toggle action to the toggleSidenav method.\nIt is used to conditionally toggle sidenav elements based on the screen size,\nensuring that UI adjustments are responsive.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier for the sidenav component to be toggled.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateScreenSize\n                        \n                    \n                \n            \n            \n                \nupdateScreenSize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/sidenav.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Updates the screenIsSmall property based on the current window width.\nSets screenIsSmall to true if the window width is 650 pixels or less,\notherwise sets it to false. This method is typically used to adjust UI elements\nbased on the screen size for responsive design purposes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        opened\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/services/sidenav.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        screenIsSmall\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/services/sidenav.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/services/sidenav.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showDirectMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/services/sidenav.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        windowWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : window.innerWidth\n                    \n                \n                    \n                        \n                                Defined in src/app/services/sidenav.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidenavService {\n  windowWidth: number = window.innerWidth;\n  opened: boolean = true;\n  showChannels: boolean = true;\n  showDirectMessages: boolean = true;\n  screenIsSmall: boolean = false;\n\n\n  constructor() {\n    this.updateScreenSize();\n  }\n\n\n  /**\n  * Toggles the state of various UI components based on the provided value.\n  * This method manages the open state of sidenav elements including the main sidenav,\n  * channels list, and private messages. It checks the provided value to determine\n  * which component's visibility should be toggled.\n  *\n  * @param {string} value - The component identifier to toggle. Valid values are\n  *                         'sidenav', 'channels', and 'private', each corresponding\n  *                         to different parts of the UI.\n  */\n  toggleSidenav(value: string) {\n    if (value === 'sidenav') {\n      this.opened = !this.opened;\n    }\n    if (value === 'channels') {\n      this.showChannels = !this.showChannels;\n    }\n    if (value === 'private') {\n      this.showDirectMessages = !this.showDirectMessages;\n    }\n  }\n\n\n  /**\n  * Toggles the sidenav based on the current window width.\n  * This method checks if the window width is 650 pixels or less,\n  * and if true, it delegates the toggle action to the `toggleSidenav` method.\n  * It is used to conditionally toggle sidenav elements based on the screen size,\n  * ensuring that UI adjustments are responsive.\n  *\n  * @param {string} value - The identifier for the sidenav component to be toggled.\n  */\n  toggleSidenavIfScreenIsSmall(value: string) {\n    if (this.windowWidth \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SnackBarService.html":{"url":"injectables/SnackBarService.html","title":"injectable - SnackBarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SnackBarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/snack-bar.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                showSnackBar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_snackbar: MatSnackBar)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/snack-bar.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _snackbar\n                                                  \n                                                        \n                                                                    MatSnackBar\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        showSnackBar\n                        \n                    \n                \n            \n            \n                \nshowSnackBar(message: string, action: string | undefined, seconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/snack-bar.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Displays a snack bar with the specified message and action.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe message to display in the snack bar.\n\n\n                                            \n                                        \n                                        \n                                                action\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                            \n                                                    \nThe label for the snack bar action. Optional.\n\n\n                                            \n                                        \n                                        \n                                                seconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3\n                                            \n\n                                            \n                                                    \nThe duration to display the snack bar, in seconds. Default is 3 seconds.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackBarService {\n\n  constructor(private _snackbar: MatSnackBar) { }\n\n  /**\n   * Displays a snack bar with the specified message and action.\n   * @param message - The message to display in the snack bar.\n   * @param action - The label for the snack bar action. Optional.\n   * @param seconds - The duration to display the snack bar, in seconds. Default is 3 seconds.\n   */\n  showSnackBar(message: string, action: string | undefined = undefined, seconds: number = 3) {\n    this._snackbar.open(message, action, {\n      duration: seconds * 1000\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/storage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteFile\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFile\n                        \n                    \n                \n            \n            \n                \ndeleteFile(fileUrl: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/storage.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Deletes a file from Firebase Storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fileUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe URL of the file to be deleted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/storage.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Firebase Storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file to be uploaded.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A Promise that resolves with the download URL of the uploaded file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { deleteObject } from \"@angular/fire/storage\";\nimport { defaultAvatars } from \"../configuration/default-avatars\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  /**\n   * Uploads a file to Firebase Storage.\n   * @param file - The file to be uploaded.\n   * @returns A Promise that resolves with the download URL of the uploaded file.\n   * @throws An error if the upload fails.\n   */\n  async uploadFile(file: File) {\n    const storage = getStorage();\n    const storageRef = ref(storage, file.name);\n\n    try {\n      const uploadFile = await uploadBytes(storageRef, file);\n      return await getDownloadURL(uploadFile.ref);\n    } catch (error) {\n      console.error(\"Upload failed\", error);\n      throw new Error(\"Upload failed\");\n    }\n  }\n\n  /**\n   * Deletes a file from Firebase Storage.\n   * @param fileUrl - The URL of the file to be deleted.\n   */\n  deleteFile(fileUrl: string) {\n    const storage = getStorage();\n    const desertRef = ref(storage, fileUrl);\n\n    if (defaultAvatars.includes(fileUrl)) {\n      return;\n    }\n\n    deleteObject(desertRef)\n      .then(() => {\n        console.log('File deleted.');\n      })\n      .catch((error) => {\n        console.log('Uh-oh, an error occurred and the file could not be deleted!');\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestComponent.html":{"url":"components/TestComponent.html","title":"component - TestComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/test/test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-test\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            CommonModule\n                            RouterModule\n                            MatDialogModule\n                            MatDialogClose\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./test.component.html\n            \n\n\n\n            \n                styleUrl\n                ./test.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                    Public\n                                dialog\n                            \n                            \n                                newEmail\n                            \n                            \n                                newFullname\n                            \n                            \n                                user\n                            \n                            \n                                userAuthId\n                            \n                            \n                                users\n                            \n                            \n                                    Private\n                                usersSub\n                            \n                            \n                                    Private\n                                userSub\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeEmail\n                            \n                            \n                                    Async\n                                changeFullname\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                getUser\n                            \n                            \n                                    Async\n                                getUserAuthId\n                            \n                            \n                                getUsers\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onVisibilityChange\n                            \n                            \n                                openLoginModal\n                            \n                            \n                                    Async\n                                reAuthenticate\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:visibilitychange\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, dialog: MatDialog, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/test/test.component.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:visibilitychange\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \ndocument:visibilitychange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:28\n                        \n                    \n\n\n            \n                \n                        This Event listener sets the user onlineStatus\nUPDATE: update Model - away when only doc.hidden and offline when no auth object\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeEmail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:159\n                        \n                    \n\n\n            \n                \n                        Take this function to update users email address\nStep 1. reAuthenticateUser(email: string, password: string)\nStep 2. updateEmailAddress(newmail: string)\n        this updates email on firestore and auth - rollback when needed\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeFullname\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeFullname()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:179\n                        \n                    \n\n\n            \n                \n                        Take this function to update users fullname on firestore\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A log or an error log. In hope for just a log.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:135\n                        \n                    \n\n\n            \n                \n                        Deletes a User from Auth and from Firestore\nStep 1. reAuthenticateUser(email: string, password: string)\nStep 2. removeAuthUser()\nStep 3. removeFirestoreUser()\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserAuthId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserAuthId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:97\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    logoutUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:189\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:56\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onVisibilityChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onVisibilityChange()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:visibilitychange', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:28\n                        \n                    \n\n\n            \n                \n                        This Event listener sets the user onlineStatus\nUPDATE: update Model - away when only doc.hidden and offline when no auth object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openLoginModal\n                        \n                    \n                \n            \n            \n                \nopenLoginModal(source: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:109\n                        \n                    \n\n\n            \n                \n                        Open the login modal which is used for the reauthentification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Login Form value as Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        reAuthenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    reAuthenticate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/test/test.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Reauthenticates the user by email and password\nIs needed for sensible firebase actions like updating email, password or delete whole user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newFullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userAuthId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        usersSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userSub\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/test/test.component.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { FormsModule } from '@angular/forms';\nimport { AuthService } from './../services/auth.service';\nimport { Component, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterModule } from '@angular/router';\nimport { MatDialog, MatDialogModule, MatDialogClose } from '@angular/material/dialog';\nimport { ReAuthenticateUserComponent } from '../dialog/re-authenticate-user/re-authenticate-user.component';\nimport { Subscription, firstValueFrom } from 'rxjs';\nimport { User } from '../models/user.class';\n\n@Component({\n  selector: 'app-test',\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule, MatDialogModule, MatDialogClose],\n  templateUrl: './test.component.html',\n  styleUrl: './test.component.scss'\n})\n\n\nexport class TestComponent {\n\n  /**\n   * This Event listener sets the user onlineStatus\n   * UPDATE: update Model - away when only doc.hidden and offline when no auth object\n   * @param event\n   */\n  @HostListener('document:visibilitychange', ['$event'])\n  onVisibilityChange() {\n    if (document.visibilityState === 'visible') {\n      this.authService.updateFirebaseUser({ onlineStatus: 'online' });\n    } else if (document.visibilityState === 'hidden') {\n      this.authService.updateFirebaseUser({ onlineStatus: 'away' });\n    }\n  }\n\n  constructor(\n    private authService: AuthService,\n    public dialog: MatDialog,\n    private router: Router\n  ) { }\n\n  date: number = 0;\n\n  userAuthId!: string | null;\n  users: User[] | undefined;\n  user: User | undefined;\n\n  // New values from user input\n  newEmail: string = '';\n  newFullname: string = '';\n\n  private usersSub: Subscription = new Subscription();\n  private userSub: Subscription = new Subscription();\n\n\n  ngOnInit(): void {\n    // one time getter\n    this.getUserAuthId();\n\n    // observable streams\n    this.getUsers();\n    this.getUser();\n\n    this.date = new Date().getTime();\n  }\n\n  async logoutUser() {\n    try {\n      await this.authService.updateFirebaseUser({ onlineStatus: 'offline' });\n      const tryLogout = await this.authService.logout();\n      if (tryLogout === true) {\n        this.router.navigate(['/login']);\n      }\n      console.log('User logged out.');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  getUsers() {\n    this.usersSub = this.authService.getUsersList().subscribe({\n      next: (users) => this.users = users,\n      error: (err) => console.error('Falied to fetch Users List. ', err)\n    });\n  }\n\n  getUser() {\n    //this.userSub = this.authService.getUser().subscribe(user => this.user = user);\n    this.userSub = this.authService.getUser().subscribe({\n      next: (user) => {\n        this.user = user;\n      },\n      error: (err) => console.error('Failed to fetch user: ', err)\n    });\n  }\n\n  async getUserAuthId() {\n    try {\n      this.userAuthId = await this.authService.getUserAuthId();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Open the login modal which is used for the reauthentification\n   * @returns Login Form value as Promise\n   */\n  openLoginModal(source: string): Promise {\n    const dialogRef = this.dialog.open(ReAuthenticateUserComponent, { data: { from: source } });\n    return firstValueFrom(dialogRef.afterClosed());\n  }\n\n  /**\n   * Reauthenticates the user by email and password\n   * Is needed for sensible firebase actions like updating email, password or delete whole user\n   * @param email\n   * @param password\n   */\n  async reAuthenticate(email: string, password: string) {\n    try {\n      await this.authService.reAuthenticateUser(email, password);\n      console.log('User reauthenticated with success');\n    } catch (error) {\n      throw new Error('Couldnt authenticate the user.');\n    }\n  }\n\n  /**\n   * Deletes a User from Auth and from Firestore\n   * Step 1. reAuthenticateUser(email: string, password: string)\n   * Step 2. removeAuthUser()\n   * Step 3. removeFirestoreUser()\n   */\n  async deleteUser() {\n    try {\n      const formData = await this.openLoginModal('User löschen');\n      if (formData) {\n        await this.reAuthenticate(formData.email, formData.password);\n        // delete firestore user first as auth uid is needed to track the firestore user\n        await this.authService.removeFirestoreUser();\n        await this.authService.removeAuthUser();\n        console.log('User deleted with success.');\n      } else {\n        console.log('Form data not provided');\n      }\n    } catch (error) {\n      console.error('Error during deletion process: ', error);\n    }\n  }\n\n  /**\n   * Take this function to update users email address\n   * Step 1. reAuthenticateUser(email: string, password: string)\n   * Step 2. updateEmailAddress(newmail: string)\n   *         this updates email on firestore and auth - rollback when needed\n   * @returns\n   */\n  async changeEmail() {\n    try {\n      const formData = await this.openLoginModal('E-Mail ändern');\n      if (formData) {\n        await this.reAuthenticate(formData.email, formData.password);\n        if (!this.newEmail) { return; }\n        await this.authService.updateFirebaseUser({email: this.newEmail});\n        console.log('User Email updated with success.');\n      } else {\n        console.log('Form data not provided');\n      }\n    } catch (error) {\n      console.error('Error during updating email process: ', error);\n    }\n  }\n\n  /**\n   * Take this function to update users fullname on firestore\n   * @returns A log or an error log. In hope for just a log.\n   */\n  async changeFullname() {\n    if (!this.newFullname) { return; }\n    try {\n      await this.authService.updateFirebaseUser({name: this.newFullname});\n      console.log('Name successfull changed.');\n    } catch (error) {\n      console.error('Error while updating the name.', error);\n    }\n  }\n\n  ngOnDestroy(): void {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    this.usersSub.unsubscribe();\n    this.userSub.unsubscribe();\n  }\n\n}\n\n    \n\n    \n        \nUser Auth Id: {{ userAuthId }}\n\n  \n  \n\n  Check if editing email adress work\n  Actual email adress is: {{ user?.email }}\n  \n  Change email\n\n  \n  \n\n  Check if editing fullname work\n  Actual fullname is: {{ user?.name }}\n  \n  Change fullname\n\n  \n  \n\n  Delete the current User\n  Delete User\n\n\n\n\nLogout the current User\nLogout User\n\n\n\nFirestore Users\n\n  \n    Index\n    Email\n    Name\n    UID\n    Image\n    Status\n  \n  @for (user of users; track $index) {\n  \n    {{ $index +1 }}\n    {{ user.email }}\n    {{ user.name }}\n    {{ user.authUserId }}\n    Image\n    \n      \n    \n  \n  }\n\n\n\n\nActual Date is: {{ date | date }}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'User Auth Id: {{ userAuthId }}      Check if editing email adress work  Actual email adress is: {{ user?.email }}    Change email      Check if editing fullname work  Actual fullname is: {{ user?.name }}    Change fullname      Delete the current User  Delete UserLogout the current UserLogout UserFirestore Users      Index    Email    Name    UID    Image    Status    @for (user of users; track $index) {      {{ $index +1 }}    {{ user.email }}    {{ user.name }}    {{ user.authUserId }}    Image                  }Actual Date is: {{ date | date }}'\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TestComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Thread.html":{"url":"classes/Thread.html","title":"class - Thread","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Thread\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/thread.class.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a thread containing messages and reactions in a channel or private UserChat\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId\n                            \n                            \n                                messages\n                            \n                            \n                                threadId\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertMessageToObject\n                            \n                            \n                                dateIsNotToday\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                getFormattedDatestamp\n                            \n                            \n                                getFormattedTimeStamp\n                            \n                            \n                                messageStringtoJSON\n                            \n                            \n                                sortMessagesByTimestamp\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/thread.class.ts:10\n                            \n                        \n\n                \n                    \n                            Constructs a new Thread instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to initialize the Thread instance with.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/thread.class.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/thread.class.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/thread.class.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/thread.class.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        convertMessageToObject\n                        \n                    \n                \n            \n            \n                \nconvertMessageToObject(jsonMessage: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:125\n                        \n                    \n\n\n            \n                \n                        Converts a JSON message to a Message object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                jsonMessage\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JSON message to convert.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The Message object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateIsNotToday\n                        \n                    \n                \n            \n            \n                \ndateIsNotToday(weekday: number, month: number, day: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:71\n                        \n                    \n\n\n            \n                \n                        Formats the date if it is not today.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                weekday\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe day of the week.\n\n\n                                            \n                                        \n                                        \n                                                month\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe month of the year.\n\n\n                                            \n                                        \n                                        \n                                                day\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe day of the month.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The formatted date string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromJSON(json: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:166\n                        \n                    \n\n\n            \n                \n                        Creates a Thread instance from a JSON object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                json\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JSON object to create the Thread instance from.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Thread\n\n                        \n                            \n                                The created Thread instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFormattedDatestamp\n                        \n                    \n                \n            \n            \n                \ngetFormattedDatestamp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:43\n                        \n                    \n\n\n            \n                \n                        Gets the formatted date stamp of the thread.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The formatted date stamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFormattedTimeStamp\n                        \n                    \n                \n            \n            \n                \ngetFormattedTimeStamp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:88\n                        \n                    \n\n\n            \n                \n                        Gets the formatted time stamp of the thread.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The formatted time stamp.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageStringtoJSON\n                        \n                    \n                \n            \n            \n                \nmessageStringtoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:102\n                        \n                    \n\n\n            \n                \n                        Converts message strings to JSON objects.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sortMessagesByTimestamp\n                        \n                    \n                \n            \n            \n                \nsortMessagesByTimestamp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:140\n                        \n                    \n\n\n            \n                \n                        Sorts the messages in the thread by their timestamp.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The sorted list of messages.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/thread.class.ts:150\n                        \n                    \n\n\n            \n                \n                        Converts the Thread instance to a JSON object.\n\n\n                        \n                            Returns :     { threadId: string; channelId: string; messages: {}; timestamp: any; }\n\n                        \n                            \n                                The JSON representation of the thread.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from \"./message.class\";\n\n/**\n * Represents a thread containing messages and reactions in a channel or private UserChat\n */\nexport class Thread {\n  threadId: string;\n  channelId: string;\n  messages: any[];\n  timestamp: any;\n\n   /**\n   * Constructs a new Thread instance.\n   * \n   * @param {Object} data - The data to initialize the Thread instance with.\n   * @param {string} [data.threadId] - The unique identifier of the thread.\n   * @param {string} [data.channelId] - The unique identifier of the channel.\n   * @param {any[]} [data.messages] - The list of messages in the thread.\n   * @param {any} data.timestamp - The timestamp of the thread.\n   */\n  constructor(data: {\n    threadId?: string,\n    channelId?: string,\n    messages?: any[],\n    timestamp: any\n  }) {\n    this.threadId = data.threadId || '';\n    this.channelId = data.channelId || '';\n    this.messages = data.messages || [];\n    this.timestamp = data.timestamp;\n\n    if (data.messages) {\n      this.messageStringtoJSON();\n    }\n  }\n\n\n   /**\n   * Gets the formatted date stamp of the thread.\n   * \n   * @returns {string} The formatted date stamp.\n   */\n  getFormattedDatestamp() {\n    const date = new Date(this.timestamp);\n    const month = date.getMonth();\n    const weekday = date.getDay();\n    const day = date.getDate();\n    const year = date.getFullYear();\n\n    const today = new Date();\n    const todayYear = today.getFullYear();\n    const todayMonth = today.getMonth();\n    const todayDay = today.getDate();\n\n    if (todayYear === year && todayMonth === month && todayDay === day) {\n      return \"Heute\";\n    } else {\n      return this.dateIsNotToday(weekday, month, day);\n    }\n  }\n\n\n   /**\n   * Formats the date if it is not today.\n   * \n   * @param {number} weekday - The day of the week.\n   * @param {number} month - The month of the year.\n   * @param {number} day - The day of the month.\n   * @returns {string} The formatted date string.\n   */\n  dateIsNotToday(weekday: number, month: number, day: number) {\n    const weekdays = ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'];\n    const months = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];\n\n    const weekdayName = weekdays[weekday];\n    const monthName = months[month];\n\n    const formattedDate = `${weekdayName}, ${day}. ${monthName}`;\n    return formattedDate;\n  }\n\n\n   /**\n   * Gets the formatted time stamp of the thread.\n   * \n   * @returns {string} The formatted time stamp.\n   */\n  getFormattedTimeStamp() {\n    const date = new Date(this.timestamp);\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n\n    const formattedTime = `${hours}:${minutes} Uhr`;\n\n    return formattedTime;\n  }\n\n\n   /**\n   * Converts message strings to JSON objects.\n   */\n  messageStringtoJSON() {\n    let newMessages: any = [];\n    this.messages.forEach(message => {\n      if (typeof message === 'string') {\n        let jsonMessage = JSON.parse(message)\n        let messageObject = this.convertMessageToObject(jsonMessage)\n        newMessages.push(messageObject);\n      } else {\n        let messageObject = this.convertMessageToObject(message); \n        newMessages.push(messageObject);\n      }\n    })\n    this.messages = newMessages;\n    this.sortMessagesByTimestamp();\n  }\n\n\n  /**\n   * Converts a JSON message to a Message object.\n   * \n   * @param {any} jsonMessage - The JSON message to convert.\n   * @returns {Message} The Message object.\n   */\n  convertMessageToObject(jsonMessage: any) {\n    let messageObject = new Message(jsonMessage.senderId, jsonMessage.content, jsonMessage.imgFileURL);\n    messageObject.senderId = jsonMessage.senderId;\n    messageObject.timestamp = jsonMessage.timestamp;\n    messageObject.replies = jsonMessage.replies;\n    messageObject.emojiReactions = jsonMessage.emojiReactions;\n    return messageObject;\n  }\n\n\n   /**\n   * Sorts the messages in the thread by their timestamp.\n   * \n   * @returns {any[]} The sorted list of messages.\n   */\n  sortMessagesByTimestamp() {\n    return this.messages.sort((a, b) => a.timestamp - b.timestamp);\n  }\n\n\n  /**\n   * Converts the Thread instance to a JSON object.\n   * \n   * @returns {Object} The JSON representation of the thread.\n   */\n  toJSON() {\n    return {\n      threadId: this.threadId,\n      channelId: this.channelId,\n      messages: this.messages,  \n      timestamp: this.timestamp\n    }\n  }\n\n\n  /**\n   * Creates a Thread instance from a JSON object.\n   * \n   * @param {any} json - The JSON object to create the Thread instance from.\n   * @returns {Thread} The created Thread instance.\n   */\n  static fromJSON(json: any): Thread { \n    const thread = new Thread({\n      threadId: json.threadId,\n      channelId: json.channelId,\n      messages: json.messages,\n      timestamp: json.timestamp\n    });\n    return thread;\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThreadService.html":{"url":"injectables/ThreadService.html","title":"injectable - ThreadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ThreadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/thread.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentMessages$\n                            \n                            \n                                currentThread$\n                            \n                            \n                                    Private\n                                openCurrentFullThreadSource\n                            \n                            \n                                openCurrentThread$\n                            \n                            \n                                    Private\n                                threadChangesSource\n                            \n                            \n                                    Private\n                                threadMessageSource\n                            \n                            \n                                    Private\n                                threadSource\n                            \n                            \n                                updateThread$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeThread\n                            \n                            \n                                convertThreadMessagesToString\n                            \n                            \n                                copyThreadForFirebase\n                            \n                            \n                                copyUserChatThreadForFirebase\n                            \n                            \n                                deletFileOfMessage\n                            \n                            \n                                getReactionsForMessage\n                            \n                            \n                                getThreadChanges\n                            \n                            \n                                openFullThread\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DataService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/thread.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DataService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeThread\n                        \n                    \n                \n            \n            \n                \nchangeThread(thread: Thread, threadOwner: User, currentChannel: Channel, currentUser: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Changes the current thread and notifies observers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread to switch to.\n\n\n                                            \n                                        \n                                        \n                                                threadOwner\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe owner of the thread.\n\n\n                                            \n                                        \n                                        \n                                                currentChannel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current channel.\n\n\n                                            \n                                        \n                                        \n                                                currentUser\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves when the thread change is complete.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertThreadMessagesToString\n                        \n                    \n                \n            \n            \n                \nconvertThreadMessagesToString(thread: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Converts thread messages to strings for Firebase.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread whose messages need to be converted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        copyThreadForFirebase\n                        \n                    \n                \n            \n            \n                \ncopyThreadForFirebase(originThread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Copies a thread and updates it in Firebase.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                originThread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original thread to copy and update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        copyUserChatThreadForFirebase\n                        \n                    \n                \n            \n            \n                \ncopyUserChatThreadForFirebase(originThread: Thread, userChatId: string | undefined, index: number | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Copies a user chat thread and updates it in Firebase.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                originThread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original thread to copy and update.\n\n\n                                            \n                                        \n                                        \n                                                userChatId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user chat.\n\n\n                                            \n                                        \n                                        \n                                                index\n                                            \n                                                        number | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the thread in the user chat.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletFileOfMessage\n                        \n                    \n                \n            \n            \n                \ndeletFileOfMessage(imgFileLink: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Deletes a file associated with a message from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                imgFileLink\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe link to the image file to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReactionsForMessage\n                        \n                    \n                \n            \n            \n                \ngetReactionsForMessage(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Sends a request to update reactions for a message in a thread.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread containing the message.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getThreadChanges\n                        \n                    \n                \n            \n            \n                \ngetThreadChanges(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Sends a request to update the changes in a thread.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openFullThread\n                        \n                    \n                \n            \n            \n                \nopenFullThread(openFullThreadBoolean: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/thread.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Opens or closes the full thread view.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                openFullThreadBoolean\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether to open or close the full thread view.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves when the operation is complete.\n\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentMessages$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadMessageSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        openCurrentFullThreadSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openCurrentThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.openCurrentFullThreadSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadChangesSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadMessageSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateThread$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadChangesSource.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/thread.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { Thread } from '../models/thread.class';\nimport { User } from '../models/user.class';\nimport { Channel } from '../models/channel.class';\nimport { DataService } from './data.service';\nimport { deleteObject, getStorage, ref } from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThreadService {\n\n  private threadSource = new Subject();\n  private threadChangesSource = new Subject();\n  private threadMessageSource = new Subject();\n  private openCurrentFullThreadSource = new Subject();\n\n  currentThread$ = this.threadSource.asObservable();\n  updateThread$ = this.threadChangesSource.asObservable();\n  currentMessages$ = this.threadMessageSource.asObservable();\n  openCurrentThread$ = this.openCurrentFullThreadSource.asObservable();\n\n  constructor(\n    private dataService: DataService,\n  ) { }\n\n  \n  /**\n   * Changes the current thread and notifies observers.\n   *\n   * @param {Thread} thread - The thread to switch to.\n   * @param {User} threadOwner - The owner of the thread.\n   * @param {Channel} currentChannel - The current channel.\n   * @param {User} currentUser - The current user.\n   * @returns {Promise} - A promise that resolves when the thread change is complete.\n   */\n  changeThread(thread: Thread, threadOwner: User, currentChannel: Channel, currentUser: User): Promise {\n    return new Promise((resolve) => {\n      this.threadSource.next({ thread, threadOwner, currentChannel, currentUser });\n      resolve();\n    });\n  }\n\n\n  /**\n   * Opens or closes the full thread view.\n   *\n   * @param {boolean} openFullThreadBoolean - Whether to open or close the full thread view.\n   * @returns {Promise} - A promise that resolves when the operation is complete.\n   */\n  openFullThread(openFullThreadBoolean: boolean): Promise {\n    return new Promise((resolve) => {\n      this.openCurrentFullThreadSource.next(openFullThreadBoolean);\n      resolve();\n    })\n  }\n\n\n   /**\n   * Sends a request to update reactions for a message in a thread.\n   *\n   * @param {Thread} thread - The thread containing the message.\n   */\n  getReactionsForMessage(thread: Thread) {\n    let update = 'updateReaction'\n    this.threadMessageSource.next({ thread, update });\n  }\n\n\n   /**\n   * Sends a request to update the changes in a thread.\n   *\n   * @param {Thread} thread - The thread to update.\n   */\n  getThreadChanges(thread: Thread) {\n    let update = 'updateThread'\n    this.threadChangesSource.next({ thread, update });\n  }\n\n\n  /**\n   * Copies a thread and updates it in Firebase.\n   *\n   * @param {Thread} originThread - The original thread to copy and update.\n   */\n  copyThreadForFirebase(originThread: Thread) {\n    const threadCopy = new Thread({ ...originThread });\n    threadCopy.messages = [...originThread.messages];\n    this.convertThreadMessagesToString(threadCopy);\n    this.dataService.updateThread(threadCopy).then(() => {\n      console.log('Thread successfully updated in Firebase');\n    }).catch(err => {\n      console.error('Update failed', err);\n    });\n  }\n\n\n   /**\n   * Converts thread messages to strings for Firebase.\n   *\n   * @param {Thread} thread - The thread whose messages need to be converted.\n   */\n  convertThreadMessagesToString(thread: any) {\n    thread.messages = thread.messages.map((message: any) => JSON.stringify(message));\n  }\n\n\n  /**\n   * Deletes a file associated with a message from the storage.\n   *\n   * @param {string} imgFileLink - The link to the image file to delete.\n   */\n  deletFileOfMessage(imgFileLink: string) {\n    const storage = getStorage();\n    const desertRef = ref(storage, imgFileLink);\n    deleteObject(desertRef).then(() => {\n      return\n    }).catch((error) => {\n      console.log(error);\n    }); \n  }\n\n\n  /**\n   * Copies a user chat thread and updates it in Firebase.\n   *\n   * @param {Thread} originThread - The original thread to copy and update.\n   * @param {string | undefined} userChatId - The ID of the user chat.\n   * @param {number | undefined} index - The index of the thread in the user chat.\n   */\n  copyUserChatThreadForFirebase(originThread: Thread, userChatId: string | undefined, index: number | undefined) {\n    const threadCopy = new Thread({ ...originThread });\n    threadCopy.messages = [...originThread.messages];\n    this.convertThreadMessagesToString(threadCopy);\n\n    this.dataService.updateUserChatThread(threadCopy, userChatId, index).then(() => {\n      console.log('Thread successfully updated in Firebase');\n    }).catch(err => {\n      console.error('Update failed', err);\n    });\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/user.class.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user in the chat application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authUserId\n                            \n                            \n                                channels\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                imageUrl\n                            \n                            \n                                name\n                            \n                            \n                                onlineStatus\n                            \n                            \n                                userChats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addReaction\n                            \n                            \n                                addReply\n                            \n                            \n                                changeStatus\n                            \n                            \n                                joinChannel\n                            \n                            \n                                leaveChannel\n                            \n                            \n                                    Async\n                                sendChannelMessage\n                            \n                            \n                                    Async\n                                sendDirectMessage\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/user.class.ts:18\n                            \n                        \n\n                \n                    \n                            Constructs a new User instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to initialize the User instance with.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authUserId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onlineStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"online\" | \"offline\" | \"away\"\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userChats\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UserChat[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.class.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addReaction\n                        \n                    \n                \n            \n            \n                \naddReaction(message: Message, emoji: string, reactor: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:181\n                        \n                    \n\n\n            \n                \n                        Adds a reaction to a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to react to.\n\n\n                                            \n                                        \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe emoji reaction.\n\n\n                                            \n                                        \n                                        \n                                                reactor\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user who reacted.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addReply\n                        \n                    \n                \n            \n            \n                \naddReply(message: Message, sender: User, replyContent: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:168\n                        \n                    \n\n\n            \n                \n                        Adds a reply to a message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to reply to.\n\n\n                                            \n                                        \n                                        \n                                                sender\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sender of the reply.\n\n\n                                            \n                                        \n                                        \n                                                replyContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe content of the reply.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changeStatus\n                        \n                    \n                \n            \n            \n                \nchangeStatus(status: \"online\" | \"offline\" | \"away\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:89\n                        \n                    \n\n\n            \n                \n                        Changes the online status of the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                        \"online\" | \"offline\" | \"away\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new online status.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinChannel\n                        \n                    \n                \n            \n            \n                \njoinChannel(channelId: string, channel: Channel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:61\n                        \n                    \n\n\n            \n                \n                        Joins a channel and adds the user as a participant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the channel to join.\n\n\n                                            \n                                        \n                                        \n                                                channel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe channel object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveChannel\n                        \n                    \n                \n            \n            \n                \nleaveChannel(channelId: string, channel: Channel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:75\n                        \n                    \n\n\n            \n                \n                        Leaves a channel and removes the user as a participant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the channel to leave.\n\n\n                                            \n                                        \n                                        \n                                                channel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe channel object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendChannelMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendChannelMessage(channel: Channel, messageContent: string, imgFile?: File, replyToThread?: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:103\n                        \n                    \n\n\n            \n                \n                        Sends a message to a channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe channel to send the message to.\n\n\n                                            \n                                        \n                                        \n                                                messageContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe content of the message.\n\n\n                                            \n                                        \n                                        \n                                                imgFile\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional image file to include in the message.\n\n\n                                            \n                                        \n                                        \n                                                replyToThread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional thread to reply to.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \nA promise that resolves to the new thread or message.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendDirectMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendDirectMessage(recipient: User, messageContent: string, currentUserChat: UserChat | undefined, imgFile?: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:133\n                        \n                    \n\n\n            \n                \n                        Sends a direct message to another user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                recipient\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe recipient of the direct message.\n\n\n                                            \n                                        \n                                        \n                                                messageContent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe content of the message.\n\n\n                                            \n                                        \n                                        \n                                                currentUserChat\n                                            \n                                                        UserChat | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn optional existing chat between the users.\n\n\n                                            \n                                        \n                                        \n                                                imgFile\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional image file to include in the message.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nA promise that resolves to the user chat and whether it is new.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user.class.ts:191\n                        \n                    \n\n\n            \n                \n                        Converts the User instance to a JSON object.\n\n\n                        \n                            Returns :         { id: string; name: string; email: string; onlineStatus: \"online\" | \"offline\" | \"away\"; authUserId: string; imageUrl: string; channels: {}; userChats: {}; }\n\n                        \n                            \n                                The JSON representation of the user.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { StorageService } from \"../services/storage.service\";\nimport { Channel } from \"./channel.class\";\nimport { Message } from \"./message.class\";\nimport { Thread } from \"./thread.class\";\nimport { UserChat } from \"./user-chat\";\n\n/**\n * Represents a user in the chat application.\n */\nexport class User {\n  id: string;\n  name: string;\n  email: string;\n  onlineStatus: 'online' | 'offline' | 'away';\n  channels: string[];\n  userChats: UserChat[];\n  authUserId: string;\n  imageUrl: string;\n\n \n  /**\n   * Constructs a new User instance.\n   * \n   * @param {Object} data - The data to initialize the User instance with.\n   * @param {string} data.id - The unique identifier of the user.\n   * @param {string} data.name - The name of the user.\n   * @param {string} data.email - The email address of the user.\n   * @param {'online' | 'offline' | 'away'} data.onlineStatus - The online status of the user.\n   * @param {string} data.authUserId - The authenticated user ID.\n   * @param {string} data.imageUrl - The URL of the user's profile image.\n   * @param {string[]} data.channels - The list of channel IDs the user has joined.\n   * @param {UserChat[]} data.userChats - The list of user chats the user is part of.\n   */\n  constructor(data: {\n    id: string,\n    name: string,\n    email: string,\n    onlineStatus: 'online' | 'offline' | 'away',\n    authUserId: string,\n    imageUrl: string,\n    channels: string[],\n    userChats: UserChat[],\n  }) {\n    this.id = data.id || '';\n    this.name = data.name;\n    this.email = data.email;\n    this.onlineStatus = data.onlineStatus;\n    this.authUserId = data.authUserId;\n    this.imageUrl = data.imageUrl;\n    this.channels = data.channels;\n    this.userChats = data.userChats || [];\n  }\n\n\n  /**\n   * Joins a channel and adds the user as a participant.\n   * \n   * @param {string} channelId - The ID of the channel to join.\n   * @param {Channel} channel - The channel object.\n   */\n  joinChannel(channelId: string, channel: Channel): void {\n    if (!this.channels.includes(channelId)) {\n      this.channels.push(channelId);\n      channel.addParticipant(this);\n    }\n  }\n\n\n   /**\n   * Leaves a channel and removes the user as a participant.\n   * \n   * @param {string} channelId - The ID of the channel to leave.\n   * @param {Channel} channel - The channel object.\n   */\n  leaveChannel(channelId: string, channel: Channel): void {\n    const index = this.channels.indexOf(channelId);\n    if (index !== -1) {\n      this.channels.splice(index, 1);\n      channel.removeParticipant(this);\n    }\n  }\n\n\n   /**\n   * Changes the online status of the user.\n   * \n   * @param {'online' | 'offline' | 'away'} status - The new online status.\n   */\n  changeStatus(status: 'online' | 'offline' | 'away'): void {\n    this.onlineStatus = status;\n  }\n\n\n  /**\n   * Sends a message to a channel.\n   * \n   * @param {Channel} channel - The channel to send the message to.\n   * @param {string} messageContent - The content of the message.\n   * @param {File} [imgFile] - An optional image file to include in the message.\n   * @param {Thread} [replyToThread] - An optional thread to reply to.\n   * @returns {Promise} - A promise that resolves to the new thread or message.\n   */\n  async sendChannelMessage(channel: Channel, messageContent: string, imgFile?: File, replyToThread?: Thread) {        \n    let imgFileURL;\n    if (imgFile) {                                          \n      let storage: StorageService = new StorageService;\n      let imgURL = await storage.uploadFile(imgFile) as string;\n      imgFileURL = imgURL;\n    }\n\n    if (replyToThread) {                                      \n      let newMessage = new Message(this, messageContent, imgFileURL);\n      replyToThread.messages.push(newMessage);\n      return newMessage\n    } else {                                                \n      let newThread = new Thread({ channelId: channel.channelId, timestamp: new Date().getTime() });\n      let newMessage = new Message(this, messageContent, imgFileURL);\n      newThread.messages.push(JSON.stringify(newMessage));\n      return newThread\n    }\n  }\n\n\n  /**\n   * Sends a direct message to another user.\n   * \n   * @param {User} recipient - The recipient of the direct message.\n   * @param {string} messageContent - The content of the message.\n   * @param {UserChat} [currentUserChat] - An optional existing chat between the users.\n   * @param {File} [imgFile] - An optional image file to include in the message.\n   * @returns {Promise} - A promise that resolves to the user chat and whether it is new.\n   */\n  async sendDirectMessage(recipient: User, messageContent: string, currentUserChat: UserChat | undefined, imgFile?: File): Promise {\n    let imgFileURL;\n    if (imgFile) {                                          \n      let storage: StorageService = new StorageService;\n      let imgURL = await storage.uploadFile(imgFile) as string;\n      imgFileURL = imgURL;\n    }\n    if(currentUserChat != undefined) {\n      const newThread = new Thread( { timestamp: new Date().getTime() } );\n      let newMessage = new Message(this, messageContent, imgFileURL);\n      newThread.messages.push(newMessage);\n      currentUserChat.addThread(newThread);\n      return { currentUserChat, isNew: false }\n    } else {\n        currentUserChat = new UserChat({\n          participants: [this.id, recipient.id],\n        });\n        const newThread = new Thread( { timestamp: new Date().getTime() } );\n        let newMessage = new Message(this, messageContent, imgFileURL);\n        newThread.messages.push(newMessage);\n        currentUserChat.addThread(newThread);\n        this.userChats.push(currentUserChat);\n        recipient.userChats.push(currentUserChat);\n        return { currentUserChat, isNew: true };\n      }\n    }\n\n\n    /**\n   * Adds a reply to a message.\n   * \n   * @param {Message} message - The message to reply to.\n   * @param {User} sender - The sender of the reply.\n   * @param {string} replyContent - The content of the reply.\n   */\n  addReply(message: Message, sender: User, replyContent: string): void {       \n    const replyMessage = new Message(sender, replyContent);\n    message.replies.push(replyMessage);\n  }\n\n\n  /**\n   * Adds a reaction to a message.\n   * \n   * @param {Message} message - The message to react to.\n   * @param {string} emoji - The emoji reaction.\n   * @param {User} reactor - The user who reacted.\n   */\n  addReaction(message: Message, emoji: string, reactor: User): void {          \n    message.emojiReactions.push(emoji, reactor.name);\n  }\n\n\n   /**\n   * Converts the User instance to a JSON object.\n   * \n   * @returns {Object} The JSON representation of the user.\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      email: this.email,\n      onlineStatus: this.onlineStatus,\n      authUserId: this.authUserId,\n      imageUrl: this.imageUrl,\n      channels: this.channels,\n      userChats: this.userChats\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserChat.html":{"url":"classes/UserChat.html","title":"class - UserChat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserChat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/user-chat.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a private chat with another user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                participants\n                            \n                            \n                                threads\n                            \n                            \n                                userChatId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addThread\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/user-chat.ts:9\n                            \n                        \n\n                \n                    \n                            Constructs a new UserChat instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to initialize the UserChat instance with.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        participants\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user-chat.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threads\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Thread[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user-chat.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userChatId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user-chat.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addThread\n                        \n                    \n                \n            \n            \n                \naddThread(thread: Thread)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user-chat.ts:38\n                        \n                    \n\n\n            \n                \n                        Adds a new thread to the user chat.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                thread\n                                            \n                                                            Thread\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe thread to be added.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/models/user-chat.ts:48\n                        \n                    \n\n\n            \n                \n                        Converts the UserChat instance to a JSON object.\n\n\n                        \n                            Returns :     literal type\n\n                        \n                            \n                                The JSON representation of the user chat.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Thread } from './thread.class';\n\n/**\n * Represents a private chat with another user\n */\nexport class UserChat {\n  userChatId: string;\n  participants: string[];\n  threads: Thread[];\n\n  /**\n   * Constructs a new UserChat instance.\n   * \n   * @param {Object} data - The data to initialize the UserChat instance with.\n   * @param {string} [data.userChatId] - The unique identifier of the user chat.\n   * @param {string[]} [data.participants] - The list of participant IDs.\n   * @param {any[]} [data.threads] - The list of threads in the chat.\n   */\n  constructor(data:  {\n    userChatId?: string,\n    chatId?: string,\n    participants?: string [],\n    threads?: any []\n  }) {\n    this.userChatId = data.userChatId || '';\n    this.participants = data.participants || [];\n    this.threads = (data.threads || []).map(thread => \n      typeof thread === 'string' ? new Thread(JSON.parse(thread)) : new Thread(thread)\n    );\n  }\n\n\n  /**\n   * Adds a new thread to the user chat.\n   * \n   * @param {Thread} thread - The thread to be added.\n   */\n  addThread(thread: Thread): void {\n    this.threads.push(thread);\n  }\n\n\n   /**\n   * Converts the UserChat instance to a JSON object.\n   * \n   * @returns {Object} The JSON representation of the user chat.\n   */\n  toJSON(): {} {\n    return {\n      userChatId: this.userChatId,\n      participants: this.participants,\n      threads: this.threads.map(thread => thread.toJSON())\n    }\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserChatJson.html":{"url":"interfaces/UserChatJson.html","title":"interface - UserChatJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserChatJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interfaces/user-chat-json.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            chatId\n                                        \n                                \n                                \n                                        \n                                            participants\n                                        \n                                \n                                \n                                        \n                                            threads\n                                        \n                                \n                                \n                                        \n                                            userChatId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        participants\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        participants:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threads\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threads:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userChatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userChatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserChatJson {\n    userChatId: string;\n    chatId: string;\n    participants: string[];\n    threads: string[];\n  }\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRegistrationService.html":{"url":"injectables/UserRegistrationService.html","title":"injectable - UserRegistrationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRegistrationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/user-registration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _userData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearUserData\n                            \n                            \n                                getUserFullName\n                            \n                            \n                                removePasswordFromUserObject\n                            \n                            \n                                    Async\n                                saveFirebaseUser\n                            \n                            \n                                saveUserData\n                            \n                            \n                                    Async\n                                saveUserToFirebase\n                            \n                            \n                                signUpAndCreateUser\n                            \n                            \n                                updateUserObject\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService, authService: AuthService, router: Router, snack: SnackBarService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/user-registration.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        snack\n                                                  \n                                                        \n                                                                        SnackBarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearUserData\n                        \n                    \n                \n            \n            \n                \nclearUserData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Clears the saved user data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserFullName\n                        \n                    \n                \n            \n            \n                \ngetUserFullName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Gets the full name of the user from the saved data.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The full name of the user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removePasswordFromUserObject\n                        \n                    \n                \n            \n            \n                \nremovePasswordFromUserObject()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Removes the password from the user data object.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveFirebaseUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveFirebaseUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Saves the user data to Firestore and navigates to the dashboard.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A Promise that resolves when the user data is saved.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveUserData\n                        \n                    \n                \n            \n            \n                \nsaveUserData(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Saves user data for the registration process.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to be saved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserToFirebase\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserToFirebase(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Saves a user object to Firestore.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user object to be saved.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A Promise that resolves when the user object is saved.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAndCreateUser\n                        \n                    \n                \n            \n            \n                \nsignUpAndCreateUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Signs up the user and creates a user document in Firestore.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserObject\n                        \n                    \n                \n            \n            \n                \nupdateUserObject(key: string, data: string | string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Updates the user data object with a new key-value pair.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key to be updated.\n\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data to be updated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-registration.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Uploads a file to Firebase Storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe file to be uploaded.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A Promise that resolves with the file URL or an empty string if upload fails.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _userData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-registration.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { StorageService } from \"./storage.service\";\nimport { AuthService } from \"./auth.service\";\nimport { User } from \"../models/user.class\";\nimport { Router } from \"@angular/router\";\nimport {SnackBarService} from \"./snack-bar.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserRegistrationService {\n\n  private _userData: any;\n\n  constructor(\n    private storageService: StorageService,\n    private authService: AuthService,\n    private router: Router,\n    private snack: SnackBarService\n  ) { }\n\n  /**\n   * Saves user data for the registration process.\n   * @param data - The user data to be saved.\n   */\n  saveUserData(data: any) {\n    this._userData = data;\n  }\n\n  /**\n   * Gets the full name of the user from the saved data.\n   * @returns The full name of the user.\n   */\n  getUserFullName(): any {\n    if (this._userData) {\n      return this._userData.fullname;\n    }\n  }\n\n  /**\n   * Clears the saved user data.\n   */\n  clearUserData(): void {\n    this._userData = {};\n  }\n\n  /**\n   * Uploads a file to Firebase Storage.\n   * @param file - The file to be uploaded.\n   * @returns A Promise that resolves with the file URL or an empty string if upload fails.\n   */\n  async uploadFile(file: File) {\n    if (file && file instanceof File) {\n      try {\n        return await this.storageService.uploadFile(file);\n      } catch (error) {\n        console.error('Image upload error. ', error);\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Updates the user data object with a new key-value pair.\n   * @param key - The key to be updated.\n   * @param data - The data to be updated.\n   */\n  updateUserObject(key: string, data: string | string[]) {\n    this._userData = { ...this._userData, [key]: data };\n  }\n\n  /**\n   * Signs up the user and creates a user document in Firestore.\n   */\n  signUpAndCreateUser() {\n    // first we sign up the user with the Firebase Auth\n    this.authService.signUp(this._userData.email, this._userData.password)\n      .then(user => {\n        // update the firebase user model with the auth id and store it\n        this.updateUserObject('authUserId', user.user.uid);\n        this.removePasswordFromUserObject();\n        return this.saveFirebaseUser();\n      })\n      .then(() => {\n        console.log('User created with success.');\n      })\n      .catch(error => {\n        console.error('An error occurred while signing up the user. Error: ', error);\n        if (error.code === 'auth/email-already-in-use') {\n          this._userData = {};\n          this.snack.showSnackBar('Email already in use.')\n          setTimeout(() =>this.router.navigate(['/register']).then(), 1500);\n        }\n      });\n  }\n\n  /**\n   * Removes the password from the user data object.\n   */\n  removePasswordFromUserObject() {\n    if (this._userData.password) {\n      delete this._userData.password;\n    }\n  }\n\n  /**\n   * Saves the user data to Firestore and navigates to the dashboard.\n   * @returns A Promise that resolves when the user data is saved.\n   */\n  async saveFirebaseUser() {\n    const user = new User(this._userData);\n    // Connect firebase and set Doc User HERE\n    await this.saveUserToFirebase(user)\n      .then(() => {\n        this.router.navigate(['dashboard']);\n      })\n      .catch((error) => {\n        console.error('Error saving user to firebase. ', error);\n      });\n  }\n\n  /**\n   * Saves a user object to Firestore.\n   * @param user - The user object to be saved.\n   * @returns A Promise that resolves when the user object is saved.\n   */\n  async saveUserToFirebase(user: User) {\n    try {\n      const userRef = await this.authService.createFirebaseUser(user);\n      const userId = userRef.id;\n      await this.authService.updateFirebaseUser({'userChats': [{userChatId: userId}]});\n    } catch (error) {\n      console.error('Error after saving user to firebase: ', error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ViewProfileComponent.html":{"url":"components/ViewProfileComponent.html","title":"component - ViewProfileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ViewProfileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dialog/view-profile/view-profile.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-view-profile\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatDialogContent\n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./view-profile.component.html\n            \n\n\n\n            \n                styleUrl\n                ./view-profile.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialog\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any, dialog: MatDialog, sidenavService: SidenavService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dialog/view-profile/view-profile.component.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor that injects the dialog data, MatDialog service, and SidenavService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nData passed to the dialog.\n\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing dialogs.\n\n\n                                                        \n                                                \n                                                \n                                                        sidenavService\n                                                  \n                                                        \n                                                                        SidenavService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing the sidenav state.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfile\n                        \n                    \n                \n            \n            \n                \ncloseProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dialog/view-profile/view-profile.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Closes the profile dialog and toggles the sidenav if the screen width is less than 650 pixels.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/view-profile/view-profile.component.ts:22\n                        \n                    \n\n            \n                \n                    - Data passed to the dialog.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatDialog\n\n                    \n                \n                    \n                        \n                                Defined in src/app/dialog/view-profile/view-profile.component.ts:23\n                        \n                    \n\n            \n                \n                    - Service for managing dialogs.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogContent } from '@angular/material/dialog';\nimport { RouterLink } from '@angular/router';\nimport { SidenavService } from '../../services/sidenav.service';\n\n@Component({\n  selector: 'app-view-profile',\n  standalone: true,\n  imports: [MatDialogContent, RouterLink],\n  templateUrl: './view-profile.component.html',\n  styleUrl: './view-profile.component.scss'\n})\nexport class ViewProfileComponent {\n  /**\n   * Constructor that injects the dialog data, MatDialog service, and SidenavService.\n   * \n   * @param {any} data - Data passed to the dialog.\n   * @param {MatDialog} dialog - Service for managing dialogs.\n   * @param {SidenavService} sidenavService - Service for managing the sidenav state.\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialog: MatDialog, \n    private sidenavService: SidenavService\n  ) {}\n\n\n  /**\n   * Closes the profile dialog and toggles the sidenav if the screen width is less than 650 pixels.\n   */\n  closeProfile() {\n    this.dialog.closeAll();\n    if (window.innerWidth \n    \n\n    \n        \n    \n         Profil\n         \n            \n        \n    \n    \n        \n    \n    \n        {{ data.name }}\n    \n    \n        \n            \n            {{ data.onlineStatus }}\n        \n    \n    \n        \n            \n            E-Mail-Adresse\n        \n    \n    \n        {{ data.email }}\n    \n    \n        \n            Nachricht\n        \n    \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '             Profil                                                             {{ data.name }}                                        {{ data.onlineStatus }}                                                E-Mail-Adresse                        {{ data.email }}                            Nachricht            '\n    var COMPONENTS = [{'name': 'AddChannelComponent', 'selector': 'app-add-channel'},{'name': 'AddImgToMessageComponent', 'selector': 'app-add-img-to-message'},{'name': 'AddUsersComponent', 'selector': 'app-channel-members'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChannelChatComponent', 'selector': 'app-channel-chat'},{'name': 'ChannelMembersComponent', 'selector': 'app-channel-members'},{'name': 'ChannelParticipantsComponent', 'selector': 'app-channel-participants'},{'name': 'ChannelThreadComponent', 'selector': 'app-channel-thread'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'EditChannelComponent', 'selector': 'app-edit-channel'},{'name': 'EmojiMartComponent', 'selector': 'app-emoji-mart'},{'name': 'FullThreadComponent', 'selector': 'app-full-thread'},{'name': 'FullThreadMessageComponent', 'selector': 'app-full-thread-message'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MessageReactionComponent', 'selector': 'app-message-reaction'},{'name': 'PageNotFoundComponent', 'selector': 'app-page-not-found'},{'name': 'PasswordResetComponent', 'selector': 'app-password-reset'},{'name': 'PhotoSelectionComponent', 'selector': 'app-photo-selection'},{'name': 'PrivacyComponent', 'selector': 'app-privacy'},{'name': 'ProfileEditComponent', 'selector': 'app-profile-edit'},{'name': 'ProfileViewComponent', 'selector': 'app-profile-view'},{'name': 'ReAuthenticateUserComponent', 'selector': 'app-re-authenticate-user'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterNextComponent', 'selector': 'app-register-next'},{'name': 'SearchComponent', 'selector': 'app-search'},{'name': 'SendMailToResetPasswordComponent', 'selector': 'app-send-mail-to-reset-password'},{'name': 'SidenavComponent', 'selector': 'app-sidenav'},{'name': 'TestComponent', 'selector': 'app-test'},{'name': 'UserChatComponent', 'selector': 'app-user-chat'},{'name': 'UserChatThreadComponent', 'selector': 'app-user-chat-thread'},{'name': 'ViewProfileComponent', 'selector': 'app-view-profile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ViewProfileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/animations/logo/logo.component.ts\n            \n            component\n            LogoComponent\n            \n                21 %\n                (4/19)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/auth.guard.ts\n            \n            variable\n            authGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/configuration/default-avatars.ts\n            \n            variable\n            defaultAvatars\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/dashboard/add-img-to-message/add-img-to-message.component.ts\n            \n            component\n            AddImgToMessageComponent\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/app/dashboard/channel-chat/channel-chat.component.ts\n            \n            component\n            ChannelChatComponent\n            \n                38 %\n                (19/50)\n            \n        \n        \n            \n                \n                src/app/dashboard/channel-chat/channel-participants/channel-participants.component.ts\n            \n            component\n            ChannelParticipantsComponent\n            \n                41 %\n                (7/17)\n            \n        \n        \n            \n                \n                src/app/dashboard/channel-chat/channel-thread/channel-thread.component.ts\n            \n            component\n            ChannelThreadComponent\n            \n                62 %\n                (15/24)\n            \n        \n        \n            \n                \n                src/app/dashboard/channel-chat/edit-channel/edit-channel.component.ts\n            \n            component\n            EditChannelComponent\n            \n                41 %\n                (12/29)\n            \n        \n        \n            \n                \n                src/app/dashboard/channel-chat/message-reaction/message-reaction.component.ts\n            \n            component\n            MessageReactionComponent\n            \n                60 %\n                (12/20)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/dashboard/emoji-mart/emoji-mart.component.ts\n            \n            component\n            EmojiMartComponent\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/dashboard/full-thread/full-thread-message/full-thread-message.component.ts\n            \n            component\n            FullThreadMessageComponent\n            \n                52 %\n                (13/25)\n            \n        \n        \n            \n                \n                src/app/dashboard/full-thread/full-thread.component.ts\n            \n            component\n            FullThreadComponent\n            \n                51 %\n                (22/43)\n            \n        \n        \n            \n                \n                src/app/dashboard/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                55 %\n                (10/18)\n            \n        \n        \n            \n                \n                src/app/dashboard/search/search.component.ts\n            \n            component\n            SearchComponent\n            \n                46 %\n                (12/26)\n            \n        \n        \n            \n                \n                src/app/dashboard/sidenav/sidenav.component.ts\n            \n            component\n            SidenavComponent\n            \n                56 %\n                (18/32)\n            \n        \n        \n            \n                \n                src/app/dashboard/user-chat/user-chat-thread/user-chat-thread.component.ts\n            \n            component\n            UserChatThreadComponent\n            \n                33 %\n                (8/24)\n            \n        \n        \n            \n                \n                src/app/dashboard/user-chat/user-chat.component.ts\n            \n            component\n            UserChatComponent\n            \n                42 %\n                (22/52)\n            \n        \n        \n            \n                \n                src/app/dialog/add-channel/add-channel.component.ts\n            \n            component\n            AddChannelComponent\n            \n                45 %\n                (10/22)\n            \n        \n        \n            \n                \n                src/app/dialog/add-users/add-users.component.ts\n            \n            component\n            AddUsersComponent\n            \n                42 %\n                (8/19)\n            \n        \n        \n            \n                \n                src/app/dialog/channel-members/channel-members.component.ts\n            \n            component\n            ChannelMembersComponent\n            \n                45 %\n                (10/22)\n            \n        \n        \n            \n                \n                src/app/dialog/re-authenticate-user/re-authenticate-user.component.ts\n            \n            component\n            ReAuthenticateUserComponent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/dialog/view-profile/view-profile.component.ts\n            \n            component\n            ViewProfileComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/imprint/imprint.component.ts\n            \n            component\n            ImprintComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/interfaces/user-chat-json.interface.ts\n            \n            interface\n            UserChatJson\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/menus/profile-edit/profile-edit.component.ts\n            \n            component\n            ProfileEditComponent\n            \n                65 %\n                (15/23)\n            \n        \n        \n            \n                \n                src/app/menus/profile-view/profile-view.component.ts\n            \n            component\n            ProfileViewComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/app/models/channel.class.ts\n            \n            class\n            Channel\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/app/models/message.class.ts\n            \n            class\n            Message\n            \n                30 %\n                (4/13)\n            \n        \n        \n            \n                \n                src/app/models/thread.class.ts\n            \n            class\n            Thread\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                src/app/models/user-chat.ts\n            \n            class\n            UserChat\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/app/models/user.class.ts\n            \n            class\n            User\n            \n                55 %\n                (10/18)\n            \n        \n        \n            \n                \n                src/app/page-not-found/page-not-found.component.ts\n            \n            component\n            PageNotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/password-reset/password-reset.component.ts\n            \n            component\n            PasswordResetComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/photo-selection/photo-selection.component.ts\n            \n            component\n            PhotoSelectionComponent\n            \n                45 %\n                (11/24)\n            \n        \n        \n            \n                \n                src/app/privacy/privacy.component.ts\n            \n            component\n            PrivacyComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/register-next/register-next.component.ts\n            \n            component\n            RegisterNextComponent\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app/send-mail-to-reset-password/send-mail-to-reset-password.component.ts\n            \n            component\n            SendMailToResetPasswordComponent\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                src/app/services/data.service.ts\n            \n            injectable\n            DataService\n            \n                77 %\n                (41/53)\n            \n        \n        \n            \n                \n                src/app/services/emoji-communication.service.ts\n            \n            injectable\n            EmojiCommunicationService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/services/header-profile.service.ts\n            \n            injectable\n            HeaderProfileService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/services/message.service.ts\n            \n            injectable\n            MessageService\n            \n                33 %\n                (5/15)\n            \n        \n        \n            \n                \n                src/app/services/sidenav.service.ts\n            \n            injectable\n            SidenavService\n            \n                30 %\n                (3/10)\n            \n        \n        \n            \n                \n                src/app/services/snack-bar.service.ts\n            \n            injectable\n            SnackBarService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/services/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/services/thread.service.ts\n            \n            injectable\n            ThreadService\n            \n                44 %\n                (8/18)\n            \n        \n        \n            \n                \n                src/app/services/user-registration.service.ts\n            \n            injectable\n            UserRegistrationService\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/app/test/test.component.ts\n            \n            component\n            TestComponent\n            \n                29 %\n                (7/24)\n            \n        \n        \n            \n                \n                src/environments/firebase.config.ts\n            \n            variable\n            firebaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.0.0\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/material : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            @ctrl/ngx-emoji-mart : ^9.2.0\n        \n            firebaseui : ^6.1.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ndabubble Test\nThis project was generated with Angular CLI version 18.0.1.\nSetup Firestore Application and Firestore Database\nConfiguration\nCreate src/environments/firebase.config.ts and copy the code below. Then insert your config keys from Firestore.\nExample :export const firebaseConfig = {\n  projectId: \"PROJECT_ID\",\n  appId: \"APP_ID\",\n  storageBucket: \"STORAGE_BUCKET\",\n  apiKey: \"API_KEY\",\n  authDomain: \"AUTH_DOMAIN\",\n  messagingSenderId: \"MESSAGING_SENDER_ID\"\n};Development server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    34 Components\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            authGuard   (src/.../auth.guard.ts)\n                        \n                        \n                            defaultAvatars   (src/.../default-avatars.ts)\n                        \n                        \n                            firebaseConfig   (src/.../firebase.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes),\n    provideAnimations(),\n    provideFirebaseApp(() => initializeApp(firebaseConfig)),\n    provideAuth(() => getAuth()),\n    provideFirestore(() => getFirestore()),\n    provideStorage(() => getStorage()),\n\n    // Test below - uncomment above line if it fails\n    /* importProvidersFrom(provideFirestore(() => {\n      const firestore = getFirestore();\n      enableIndexedDbPersistence(firestore);\n      return firestore;\n    })), */\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/app/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : (route, state) => {\n\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  return authService.isAuthenticated().pipe(\n    take(1),\n    map(isAuthenticated => {\n      if (isAuthenticated) {\n        return true;\n      } else {\n        return router.createUrlTree(['/login']);\n      }\n    })\n  )\n\n}\n                    \n                \n\n\n        \n    \n\n    src/app/configuration/default-avatars.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultAvatars\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_1.png?alt=media&token=76a558f3-7364-4591-8b0d-9084a608438d',\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_2.png?alt=media&token=c11604f5-49f6-4faf-b7c7-5e1795c67e12',\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_3.png?alt=media&token=8e57bc9d-29fd-4e99-aece-435a6edf761a',\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_4.png?alt=media&token=b088c163-1a4f-42e7-81e1-beaa11df5ccb',\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_5.png?alt=media&token=27617a09-956f-47c4-b96a-bedd411f6da1',\n  'https://firebasestorage.googleapis.com/v0/b/da-bubble-4a31a.appspot.com/o/avatar_6.png?alt=media&token=c4962f78-c6cf-4d28-964b-ed104548d2da'\n]\n                    \n                \n\n            \n                \n                    An array of default avatar URLs used for the Photo Selection process.\n\n                \n            \n\n        \n    \n\n    src/environments/firebase.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        firebaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  apiKey: \"AIzaSyCCR-gSsdDCnLuNQ2yXzL0EVQv_ch4Wyzk\",\n  authDomain: \"da-bubble-4a31a.firebaseapp.com\",\n  projectId: \"da-bubble-4a31a\",\n  storageBucket: \"da-bubble-4a31a.appspot.com\",\n  messagingSenderId: \"554696271521\",\n  appId: \"1:554696271521:web:3320570cc3b6bf304032e0\"\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
